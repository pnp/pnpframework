### YamlMime:ManagedReference
items:
- uid: CamlBuilder.FieldReference
  commentId: T:CamlBuilder.FieldReference
  id: FieldReference
  parent: CamlBuilder
  children:
  - CamlBuilder.FieldReference.#ctor
  - CamlBuilder.FieldReference.#ctor(System.String)
  - CamlBuilder.FieldReference.Alias
  - CamlBuilder.FieldReference.Ascending
  - CamlBuilder.FieldReference.CreateUrl
  - CamlBuilder.FieldReference.DisplayName
  - CamlBuilder.FieldReference.Explicit
  - CamlBuilder.FieldReference.Format
  - CamlBuilder.FieldReference.Id
  - CamlBuilder.FieldReference.Key
  - CamlBuilder.FieldReference.List
  - CamlBuilder.FieldReference.LookupId
  - CamlBuilder.FieldReference.Name
  - CamlBuilder.FieldReference.op_Implicit(System.String)~CamlBuilder.FieldReference
  - CamlBuilder.FieldReference.RefType
  - CamlBuilder.FieldReference.ShowField
  - CamlBuilder.FieldReference.TextOnly
  - CamlBuilder.FieldReference.Type
  langs:
  - csharp
  - vb
  name: FieldReference
  nameWithType: FieldReference
  fullName: CamlBuilder.FieldReference
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FieldReference
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 9
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nRepresents a reference to a field within a query.\n"
  example: []
  syntax:
    content: public class FieldReference
    content.vb: Public Class FieldReference
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - CamlBuilder.FieldReference.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  - CamlBuilder.FieldReference.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{CamlBuilder.FieldReference,{T}}},{T},System.Boolean,System.Boolean)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  - System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CamlBuilder.FieldReference.Alias
  commentId: P:CamlBuilder.FieldReference.Alias
  id: Alias
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: Alias
  nameWithType: FieldReference.Alias
  fullName: CamlBuilder.FieldReference.Alias
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Alias
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 14
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nField alias.\n"
  example: []
  syntax:
    content: public string Alias { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Alias As String
  overload: CamlBuilder.FieldReference.Alias*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.Ascending
  commentId: P:CamlBuilder.FieldReference.Ascending
  id: Ascending
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: Ascending
  nameWithType: FieldReference.Ascending
  fullName: CamlBuilder.FieldReference.Ascending
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Ascending
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 22
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nThis specifies the sort order on a FieldRef.\n"
  remarks: "\nQuery defaults this to true when no value is specified.\n"
  example: []
  syntax:
    content: public bool? Ascending { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property Ascending As Boolean?
  overload: CamlBuilder.FieldReference.Ascending*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.CreateUrl
  commentId: P:CamlBuilder.FieldReference.CreateUrl
  id: CreateUrl
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: CreateUrl
  nameWithType: FieldReference.CreateUrl
  fullName: CamlBuilder.FieldReference.CreateUrl
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateUrl
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 27
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nSpecifies the URL for the .aspx file that is used to create a Meeting Workspace site.\n"
  example: []
  syntax:
    content: public string CreateUrl { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property CreateUrl As String
  overload: CamlBuilder.FieldReference.CreateUrl*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.DisplayName
  commentId: P:CamlBuilder.FieldReference.DisplayName
  id: DisplayName
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: FieldReference.DisplayName
  fullName: CamlBuilder.FieldReference.DisplayName
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: DisplayName
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 32
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nThis attribute provides the display name of the field that is referenced.\n"
  example: []
  syntax:
    content: public string DisplayName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DisplayName As String
  overload: CamlBuilder.FieldReference.DisplayName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.Explicit
  commentId: P:CamlBuilder.FieldReference.Explicit
  id: Explicit
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: Explicit
  nameWithType: FieldReference.Explicit
  fullName: CamlBuilder.FieldReference.Explicit
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Explicit
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 38
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nThis attribute is only supported within the ViewFields element. True if the field is \nexplicitly declared in the view definition and is not returned in a Fields enumeration inside a view.\n"
  example: []
  syntax:
    content: public bool? Explicit { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property Explicit As Boolean?
  overload: CamlBuilder.FieldReference.Explicit*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.Format
  commentId: P:CamlBuilder.FieldReference.Format
  id: Format
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: Format
  nameWithType: FieldReference.Format
  fullName: CamlBuilder.FieldReference.Format
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Format
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 43
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nField format.\n"
  example: []
  syntax:
    content: public string Format { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Format As String
  overload: CamlBuilder.FieldReference.Format*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.Id
  commentId: P:CamlBuilder.FieldReference.Id
  id: Id
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: FieldReference.Id
  fullName: CamlBuilder.FieldReference.Id
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Id
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 48
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nSpecifies the GUID that identifies the field.\n"
  example: []
  syntax:
    content: public string Id { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Id As String
  overload: CamlBuilder.FieldReference.Id*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.Key
  commentId: P:CamlBuilder.FieldReference.Key
  id: Key
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: FieldReference.Key
  fullName: CamlBuilder.FieldReference.Key
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Key
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 54
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nIf set to Primary, specifies that the field is the primary key for its table and thus\nuniquely identifies each record in the table.\n"
  example: []
  syntax:
    content: public string Key { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Key As String
  overload: CamlBuilder.FieldReference.Key*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.List
  commentId: P:CamlBuilder.FieldReference.List
  id: List
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: List
  nameWithType: FieldReference.List
  fullName: CamlBuilder.FieldReference.List
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: List
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 61
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nSpecifies the parent foreign list when the FieldRef element is a child of an Eq element\nin Join element. The value is an alias for the list that is defined by the ListAlias\nattribute of the Join element\n"
  example: []
  syntax:
    content: public string List { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property List As String
  overload: CamlBuilder.FieldReference.List*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.LookupId
  commentId: P:CamlBuilder.FieldReference.LookupId
  id: LookupId
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: LookupId
  nameWithType: FieldReference.LookupId
  fullName: CamlBuilder.FieldReference.LookupId
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: LookupId
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 71
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nWhen the field is a Lookup type, specifies that queries should look for the item by its\nunique item ID rather than the field value. This can be useful, for example, when multiple\nitems have identical values in the field and you want to query for a specific item.\n"
  remarks: "\nQuery default this to false when no value is specified\n"
  example: []
  syntax:
    content: public bool? LookupId { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property LookupId As Boolean?
  overload: CamlBuilder.FieldReference.LookupId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.Name
  commentId: P:CamlBuilder.FieldReference.Name
  id: Name
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: FieldReference.Name
  fullName: CamlBuilder.FieldReference.Name
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Name
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 76
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nThis attribute provides the internal name of the field that is referenced.\n"
  example: []
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: CamlBuilder.FieldReference.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.RefType
  commentId: P:CamlBuilder.FieldReference.RefType
  id: RefType
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: RefType
  nameWithType: FieldReference.RefType
  fullName: CamlBuilder.FieldReference.RefType
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RefType
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 81
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nSpecifies the type of reference for a field in an events list.\n"
  example: []
  syntax:
    content: public string RefType { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property RefType As String
  overload: CamlBuilder.FieldReference.RefType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.ShowField
  commentId: P:CamlBuilder.FieldReference.ShowField
  id: ShowField
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: ShowField
  nameWithType: FieldReference.ShowField
  fullName: CamlBuilder.FieldReference.ShowField
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ShowField
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 91
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nThe ShowField attribute can be set to the field name to display. By default, a hyperlinked text\nfrom the Title field of the record in the external list is displayed. But the ShowField attribute\ncan be used to override that and display another field from the external list.\n"
  remarks: "\nThe following data types are allowed as targets of a ShowField attribute: Text, Choice, and Counter.\n"
  example: []
  syntax:
    content: public string ShowField { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ShowField As String
  overload: CamlBuilder.FieldReference.ShowField*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.TextOnly
  commentId: P:CamlBuilder.FieldReference.TextOnly
  id: TextOnly
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: TextOnly
  nameWithType: FieldReference.TextOnly
  fullName: CamlBuilder.FieldReference.TextOnly
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: TextOnly
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 96
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nSpecifies that the field contains only text values.\n"
  example: []
  syntax:
    content: public bool? TextOnly { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property TextOnly As Boolean?
  overload: CamlBuilder.FieldReference.TextOnly*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.Type
  commentId: P:CamlBuilder.FieldReference.Type
  id: Type
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: FieldReference.Type
  fullName: CamlBuilder.FieldReference.Type
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Type
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 101
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nSpecifies the function that is applied to a totals column or a calculated column.\n"
  example: []
  syntax:
    content: public FieldReferenceFunctionType? Type { get; set; }
    parameters: []
    return:
      type: System.Nullable{CamlBuilder.FieldReferenceFunctionType}
    content.vb: Public Property Type As FieldReferenceFunctionType?
  overload: CamlBuilder.FieldReference.Type*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.#ctor
  commentId: M:CamlBuilder.FieldReference.#ctor
  id: '#ctor'
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: FieldReference()
  nameWithType: FieldReference.FieldReference()
  fullName: CamlBuilder.FieldReference.FieldReference()
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 106
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nCreates an instance of FieldReference with all it&apos;s properties set to default.\n"
  example: []
  syntax:
    content: public FieldReference()
    content.vb: Public Sub New
  overload: CamlBuilder.FieldReference.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.#ctor(System.String)
  commentId: M:CamlBuilder.FieldReference.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: FieldReference(String)
  nameWithType: FieldReference.FieldReference(String)
  fullName: CamlBuilder.FieldReference.FieldReference(System.String)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 114
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nCreates an instance of FieldReference with the initial specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">name</code>. \n"
  example: []
  syntax:
    content: public FieldReference(string name)
    parameters:
    - id: name
      type: System.String
      description: Internal name of the field.
    content.vb: Public Sub New(name As String)
  overload: CamlBuilder.FieldReference.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CamlBuilder.FieldReference.op_Implicit(System.String)~CamlBuilder.FieldReference
  commentId: M:CamlBuilder.FieldReference.op_Implicit(System.String)~CamlBuilder.FieldReference
  id: op_Implicit(System.String)~CamlBuilder.FieldReference
  parent: CamlBuilder.FieldReference
  langs:
  - csharp
  - vb
  name: Implicit(String to FieldReference)
  nameWithType: FieldReference.Implicit(String to FieldReference)
  fullName: CamlBuilder.FieldReference.Implicit(System.String to CamlBuilder.FieldReference)
  type: Operator
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: op_Implicit
    path: ../src/lib/PnP.Framework/Modernization/Caml/FieldReference.cs
    startLine: 124
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nUses <code data-dev-comment-type=\"paramref\" class=\"paramref\">fieldName</code> as a field reference internal name and returns\na new <xref href=\"CamlBuilder.FieldReference\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static implicit operator FieldReference(string fieldName)
    parameters:
    - id: fieldName
      type: System.String
      description: String to be used as FieldReference internal name.
    return:
      type: CamlBuilder.FieldReference
    content.vb: Public Shared Widening Operator CType(fieldName As String) As FieldReference
  overload: CamlBuilder.FieldReference.op_Implicit*
  nameWithType.vb: FieldReference.Widening(String to FieldReference)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CamlBuilder.FieldReference.Widening(System.String to CamlBuilder.FieldReference)
  name.vb: Widening(String to FieldReference)
references:
- uid: CamlBuilder
  commentId: N:CamlBuilder
  name: CamlBuilder
  nameWithType: CamlBuilder
  fullName: CamlBuilder
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CamlBuilder.FieldReference.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  parent: System.ValidationExtensions
  definition: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  name: ValidateNotNullOrEmpty<FieldReference>(String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<FieldReference>(String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<CamlBuilder.FieldReference>(System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of FieldReference)(String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of CamlBuilder.FieldReference)(System.String)
  name.vb: ValidateNotNullOrEmpty(Of FieldReference)(String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty<FieldReference>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<FieldReference>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<CamlBuilder.FieldReference>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty(Of FieldReference)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of FieldReference)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of CamlBuilder.FieldReference)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CamlBuilder.FieldReference.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{CamlBuilder.FieldReference,{T}}},{T},System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  name: Set<FieldReference, T>(Expression<Func<FieldReference, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<FieldReference, T>(Expression<Func<FieldReference, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<CamlBuilder.FieldReference, T>(System.Linq.Expressions.Expression<System.Func<CamlBuilder.FieldReference, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of FieldReference, T)(Expression(Of Func(Of FieldReference, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of CamlBuilder.FieldReference, T)(System.Linq.Expressions.Expression(Of System.Func(Of CamlBuilder.FieldReference, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of FieldReference, T)(Expression(Of Func(Of FieldReference, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<FieldReference, T>
    nameWithType: ObjectExtensions.Set<FieldReference, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<CamlBuilder.FieldReference, T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CamlBuilder.FieldReference
    name: FieldReference
    nameWithType: FieldReference
    fullName: CamlBuilder.FieldReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of FieldReference, T)
    nameWithType: ObjectExtensions.Set(Of FieldReference, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of CamlBuilder.FieldReference, T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CamlBuilder.FieldReference
    name: FieldReference
    nameWithType: FieldReference
    fullName: CamlBuilder.FieldReference
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  name: GetPublicInstancePropertyValue(String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  name: GetPublicInstanceProperty(String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  name: SetPublicInstancePropertyValue(String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  parent: PnP.Framework.Modernization.Cache.Extensions
  definition: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  name: ToByteArray()
  nameWithType: Extensions.ToByteArray()
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray()
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  isExternal: true
  name: ValidateNotNullOrEmpty<T>(T, String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>(T, String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>(T, System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, System.String)
  name.vb: ValidateNotNullOrEmpty(Of T)(T, String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty<T>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty(Of T)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of T)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions
  commentId: T:System.ValidationExtensions
  parent: System
  name: ValidationExtensions
  nameWithType: ValidationExtensions
  fullName: System.ValidationExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  isExternal: true
  name: Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>(TObject, System.Linq.Expressions.Expression<System.Func<TObject, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)(TObject, System.Linq.Expressions.Expression(Of System.Func(Of TObject, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<TObject, T>
    nameWithType: ObjectExtensions.Set<TObject, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of TObject, T)
    nameWithType: ObjectExtensions.Set(Of TObject, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions
  commentId: T:PnP.Framework.Extensions.ObjectExtensions
  parent: PnP.Framework.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: PnP.Framework.Extensions.ObjectExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  isExternal: true
  name: GetPublicInstancePropertyValue(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  isExternal: true
  name: GetPublicInstanceProperty(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  isExternal: true
  name: SetPublicInstancePropertyValue(Object, String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(Object, String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object, System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  isExternal: true
  name: ToByteArray(Object)
  nameWithType: Extensions.ToByteArray(Object)
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions
  commentId: T:PnP.Framework.Modernization.Cache.Extensions
  parent: PnP.Framework.Modernization.Cache
  name: Extensions
  nameWithType: Extensions
  fullName: PnP.Framework.Modernization.Cache.Extensions
- uid: PnP.Framework.Extensions
  commentId: N:PnP.Framework.Extensions
  name: PnP.Framework.Extensions
  nameWithType: PnP.Framework.Extensions
  fullName: PnP.Framework.Extensions
- uid: PnP.Framework.Modernization.Cache
  commentId: N:PnP.Framework.Modernization.Cache
  name: PnP.Framework.Modernization.Cache
  nameWithType: PnP.Framework.Modernization.Cache
  fullName: PnP.Framework.Modernization.Cache
- uid: CamlBuilder.FieldReference.Alias*
  commentId: Overload:CamlBuilder.FieldReference.Alias
  name: Alias
  nameWithType: FieldReference.Alias
  fullName: CamlBuilder.FieldReference.Alias
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CamlBuilder.FieldReference.Ascending*
  commentId: Overload:CamlBuilder.FieldReference.Ascending
  name: Ascending
  nameWithType: FieldReference.Ascending
  fullName: CamlBuilder.FieldReference.Ascending
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CamlBuilder.FieldReference.CreateUrl*
  commentId: Overload:CamlBuilder.FieldReference.CreateUrl
  name: CreateUrl
  nameWithType: FieldReference.CreateUrl
  fullName: CamlBuilder.FieldReference.CreateUrl
- uid: CamlBuilder.FieldReference.DisplayName*
  commentId: Overload:CamlBuilder.FieldReference.DisplayName
  name: DisplayName
  nameWithType: FieldReference.DisplayName
  fullName: CamlBuilder.FieldReference.DisplayName
- uid: CamlBuilder.FieldReference.Explicit*
  commentId: Overload:CamlBuilder.FieldReference.Explicit
  name: Explicit
  nameWithType: FieldReference.Explicit
  fullName: CamlBuilder.FieldReference.Explicit
- uid: CamlBuilder.FieldReference.Format*
  commentId: Overload:CamlBuilder.FieldReference.Format
  name: Format
  nameWithType: FieldReference.Format
  fullName: CamlBuilder.FieldReference.Format
- uid: CamlBuilder.FieldReference.Id*
  commentId: Overload:CamlBuilder.FieldReference.Id
  name: Id
  nameWithType: FieldReference.Id
  fullName: CamlBuilder.FieldReference.Id
- uid: CamlBuilder.FieldReference.Key*
  commentId: Overload:CamlBuilder.FieldReference.Key
  name: Key
  nameWithType: FieldReference.Key
  fullName: CamlBuilder.FieldReference.Key
- uid: CamlBuilder.FieldReference.List*
  commentId: Overload:CamlBuilder.FieldReference.List
  name: List
  nameWithType: FieldReference.List
  fullName: CamlBuilder.FieldReference.List
- uid: CamlBuilder.FieldReference.LookupId*
  commentId: Overload:CamlBuilder.FieldReference.LookupId
  name: LookupId
  nameWithType: FieldReference.LookupId
  fullName: CamlBuilder.FieldReference.LookupId
- uid: CamlBuilder.FieldReference.Name*
  commentId: Overload:CamlBuilder.FieldReference.Name
  name: Name
  nameWithType: FieldReference.Name
  fullName: CamlBuilder.FieldReference.Name
- uid: CamlBuilder.FieldReference.RefType*
  commentId: Overload:CamlBuilder.FieldReference.RefType
  name: RefType
  nameWithType: FieldReference.RefType
  fullName: CamlBuilder.FieldReference.RefType
- uid: CamlBuilder.FieldReference.ShowField*
  commentId: Overload:CamlBuilder.FieldReference.ShowField
  name: ShowField
  nameWithType: FieldReference.ShowField
  fullName: CamlBuilder.FieldReference.ShowField
- uid: CamlBuilder.FieldReference.TextOnly*
  commentId: Overload:CamlBuilder.FieldReference.TextOnly
  name: TextOnly
  nameWithType: FieldReference.TextOnly
  fullName: CamlBuilder.FieldReference.TextOnly
- uid: CamlBuilder.FieldReference.Type*
  commentId: Overload:CamlBuilder.FieldReference.Type
  name: Type
  nameWithType: FieldReference.Type
  fullName: CamlBuilder.FieldReference.Type
- uid: System.Nullable{CamlBuilder.FieldReferenceFunctionType}
  commentId: T:System.Nullable{CamlBuilder.FieldReferenceFunctionType}
  parent: System
  definition: System.Nullable`1
  name: Nullable<FieldReferenceFunctionType>
  nameWithType: Nullable<FieldReferenceFunctionType>
  fullName: System.Nullable<CamlBuilder.FieldReferenceFunctionType>
  nameWithType.vb: Nullable(Of FieldReferenceFunctionType)
  fullName.vb: System.Nullable(Of CamlBuilder.FieldReferenceFunctionType)
  name.vb: Nullable(Of FieldReferenceFunctionType)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CamlBuilder.FieldReferenceFunctionType
    name: FieldReferenceFunctionType
    nameWithType: FieldReferenceFunctionType
    fullName: CamlBuilder.FieldReferenceFunctionType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CamlBuilder.FieldReferenceFunctionType
    name: FieldReferenceFunctionType
    nameWithType: FieldReferenceFunctionType
    fullName: CamlBuilder.FieldReferenceFunctionType
  - name: )
    nameWithType: )
    fullName: )
- uid: CamlBuilder.FieldReference.#ctor*
  commentId: Overload:CamlBuilder.FieldReference.#ctor
  name: FieldReference
  nameWithType: FieldReference.FieldReference
  fullName: CamlBuilder.FieldReference.FieldReference
- uid: CamlBuilder.FieldReference
  commentId: T:CamlBuilder.FieldReference
  parent: CamlBuilder
  name: FieldReference
  nameWithType: FieldReference
  fullName: CamlBuilder.FieldReference
- uid: CamlBuilder.FieldReference.op_Implicit*
  commentId: Overload:CamlBuilder.FieldReference.op_Implicit
  name: Implicit
  nameWithType: FieldReference.Implicit
  fullName: CamlBuilder.FieldReference.Implicit
  nameWithType.vb: FieldReference.Widening
  fullName.vb: CamlBuilder.FieldReference.Widening
  name.vb: Widening

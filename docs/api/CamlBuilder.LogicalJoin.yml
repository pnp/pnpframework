### YamlMime:ManagedReference
items:
- uid: CamlBuilder.LogicalJoin
  commentId: T:CamlBuilder.LogicalJoin
  id: LogicalJoin
  parent: CamlBuilder
  children:
  - CamlBuilder.LogicalJoin.AddStatement(CamlBuilder.Statement)
  - CamlBuilder.LogicalJoin.AddStatements(System.Collections.Generic.IEnumerable{CamlBuilder.Statement})
  - CamlBuilder.LogicalJoin.And(CamlBuilder.Statement[])
  - CamlBuilder.LogicalJoin.And(System.Collections.Generic.IEnumerable{CamlBuilder.Statement})
  - CamlBuilder.LogicalJoin.GetCaml
  - CamlBuilder.LogicalJoin.HasStatements
  - CamlBuilder.LogicalJoin.LogicalJoinType
  - CamlBuilder.LogicalJoin.Or(CamlBuilder.Statement[])
  - CamlBuilder.LogicalJoin.Or(System.Collections.Generic.IEnumerable{CamlBuilder.Statement})
  langs:
  - csharp
  - vb
  name: LogicalJoin
  nameWithType: LogicalJoin
  fullName: CamlBuilder.LogicalJoin
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: LogicalJoin
    path: ../src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
    startLine: 9
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nDefines a CAML logical join. This class has no constructors available. To instanciate a\nnew logical join use public static methods.\n"
  example: []
  syntax:
    content: 'public class LogicalJoin : Statement'
    content.vb: >-
      Public Class LogicalJoin
          Inherits Statement
  inheritance:
  - System.Object
  - CamlBuilder.Statement
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - CamlBuilder.LogicalJoin.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  - CamlBuilder.LogicalJoin.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{CamlBuilder.LogicalJoin,{T}}},{T},System.Boolean,System.Boolean)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  - System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CamlBuilder.LogicalJoin.LogicalJoinType
  commentId: P:CamlBuilder.LogicalJoin.LogicalJoinType
  id: LogicalJoinType
  parent: CamlBuilder.LogicalJoin
  langs:
  - csharp
  - vb
  name: LogicalJoinType
  nameWithType: LogicalJoin.LogicalJoinType
  fullName: CamlBuilder.LogicalJoin.LogicalJoinType
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: LogicalJoinType
    path: ../src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
    startLine: 14
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nGets the logical join type.\n"
  example: []
  syntax:
    content: public LogicalJoinType LogicalJoinType { get; }
    parameters: []
    return:
      type: CamlBuilder.LogicalJoinType
    content.vb: Public ReadOnly Property LogicalJoinType As LogicalJoinType
  overload: CamlBuilder.LogicalJoin.LogicalJoinType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CamlBuilder.LogicalJoin.AddStatement(CamlBuilder.Statement)
  commentId: M:CamlBuilder.LogicalJoin.AddStatement(CamlBuilder.Statement)
  id: AddStatement(CamlBuilder.Statement)
  parent: CamlBuilder.LogicalJoin
  langs:
  - csharp
  - vb
  name: AddStatement(Statement)
  nameWithType: LogicalJoin.AddStatement(Statement)
  fullName: CamlBuilder.LogicalJoin.AddStatement(CamlBuilder.Statement)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddStatement
    path: ../src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
    startLine: 31
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nAdds a new statement to this logical join\n"
  example: []
  syntax:
    content: public void AddStatement(Statement statement)
    parameters:
    - id: statement
      type: CamlBuilder.Statement
      description: Statement to be added.
    content.vb: Public Sub AddStatement(statement As Statement)
  overload: CamlBuilder.LogicalJoin.AddStatement*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CamlBuilder.LogicalJoin.AddStatements(System.Collections.Generic.IEnumerable{CamlBuilder.Statement})
  commentId: M:CamlBuilder.LogicalJoin.AddStatements(System.Collections.Generic.IEnumerable{CamlBuilder.Statement})
  id: AddStatements(System.Collections.Generic.IEnumerable{CamlBuilder.Statement})
  parent: CamlBuilder.LogicalJoin
  langs:
  - csharp
  - vb
  name: AddStatements(IEnumerable<Statement>)
  nameWithType: LogicalJoin.AddStatements(IEnumerable<Statement>)
  fullName: CamlBuilder.LogicalJoin.AddStatements(System.Collections.Generic.IEnumerable<CamlBuilder.Statement>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddStatements
    path: ../src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
    startLine: 40
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nAdds new statements to this logical join.\n"
  example: []
  syntax:
    content: public void AddStatements(IEnumerable<Statement> statements)
    parameters:
    - id: statements
      type: System.Collections.Generic.IEnumerable{CamlBuilder.Statement}
      description: Statements to be added to logical join.
    content.vb: Public Sub AddStatements(statements As IEnumerable(Of Statement))
  overload: CamlBuilder.LogicalJoin.AddStatements*
  nameWithType.vb: LogicalJoin.AddStatements(IEnumerable(Of Statement))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CamlBuilder.LogicalJoin.AddStatements(System.Collections.Generic.IEnumerable(Of CamlBuilder.Statement))
  name.vb: AddStatements(IEnumerable(Of Statement))
- uid: CamlBuilder.LogicalJoin.HasStatements
  commentId: M:CamlBuilder.LogicalJoin.HasStatements
  id: HasStatements
  parent: CamlBuilder.LogicalJoin
  langs:
  - csharp
  - vb
  name: HasStatements()
  nameWithType: LogicalJoin.HasStatements()
  fullName: CamlBuilder.LogicalJoin.HasStatements()
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: HasStatements
    path: ../src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
    startLine: 45
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  syntax:
    content: public bool HasStatements()
    return:
      type: System.Boolean
    content.vb: Public Function HasStatements As Boolean
  overload: CamlBuilder.LogicalJoin.HasStatements*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CamlBuilder.LogicalJoin.GetCaml
  commentId: M:CamlBuilder.LogicalJoin.GetCaml
  id: GetCaml
  parent: CamlBuilder.LogicalJoin
  langs:
  - csharp
  - vb
  name: GetCaml()
  nameWithType: LogicalJoin.GetCaml()
  fullName: CamlBuilder.LogicalJoin.GetCaml()
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetCaml
    path: ../src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
    startLine: 55
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nReturns CAML string representation of this\nlogical join statement.\n"
  example: []
  syntax:
    content: public override string GetCaml()
    return:
      type: System.String
      description: CAML string.
    content.vb: Public Overrides Function GetCaml As String
  overridden: CamlBuilder.Statement.GetCaml
  overload: CamlBuilder.LogicalJoin.GetCaml*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: CamlBuilder.LogicalJoin.And(CamlBuilder.Statement[])
  commentId: M:CamlBuilder.LogicalJoin.And(CamlBuilder.Statement[])
  id: And(CamlBuilder.Statement[])
  parent: CamlBuilder.LogicalJoin
  langs:
  - csharp
  - vb
  name: And(Statement[])
  nameWithType: LogicalJoin.And(Statement[])
  fullName: CamlBuilder.LogicalJoin.And(CamlBuilder.Statement[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: And
    path: ../src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
    startLine: 87
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nInstanciates a new <em>And</em> logical join with specified inner <code data-dev-comment-type=\"paramref\" class=\"paramref\">statements</code>.\n"
  example: []
  syntax:
    content: public static LogicalJoin And(params Statement[] statements)
    parameters:
    - id: statements
      type: CamlBuilder.Statement[]
      description: And statements.
    return:
      type: CamlBuilder.LogicalJoin
      description: And logical join instance.
    content.vb: Public Shared Function And(ParamArray statements As Statement()) As LogicalJoin
  overload: CamlBuilder.LogicalJoin.And*
  nameWithType.vb: LogicalJoin.And(Statement())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CamlBuilder.LogicalJoin.And(CamlBuilder.Statement())
  name.vb: And(Statement())
- uid: CamlBuilder.LogicalJoin.And(System.Collections.Generic.IEnumerable{CamlBuilder.Statement})
  commentId: M:CamlBuilder.LogicalJoin.And(System.Collections.Generic.IEnumerable{CamlBuilder.Statement})
  id: And(System.Collections.Generic.IEnumerable{CamlBuilder.Statement})
  parent: CamlBuilder.LogicalJoin
  langs:
  - csharp
  - vb
  name: And(IEnumerable<Statement>)
  nameWithType: LogicalJoin.And(IEnumerable<Statement>)
  fullName: CamlBuilder.LogicalJoin.And(System.Collections.Generic.IEnumerable<CamlBuilder.Statement>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: And
    path: ../src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
    startLine: 97
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nInstanciates a new <em>And</em> logical join with specified inner <code data-dev-comment-type=\"paramref\" class=\"paramref\">statements</code>.\n"
  example: []
  syntax:
    content: public static LogicalJoin And(IEnumerable<Statement> statements)
    parameters:
    - id: statements
      type: System.Collections.Generic.IEnumerable{CamlBuilder.Statement}
      description: And statements.
    return:
      type: CamlBuilder.LogicalJoin
      description: And logical join instance.
    content.vb: Public Shared Function And(statements As IEnumerable(Of Statement)) As LogicalJoin
  overload: CamlBuilder.LogicalJoin.And*
  nameWithType.vb: LogicalJoin.And(IEnumerable(Of Statement))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CamlBuilder.LogicalJoin.And(System.Collections.Generic.IEnumerable(Of CamlBuilder.Statement))
  name.vb: And(IEnumerable(Of Statement))
- uid: CamlBuilder.LogicalJoin.Or(CamlBuilder.Statement[])
  commentId: M:CamlBuilder.LogicalJoin.Or(CamlBuilder.Statement[])
  id: Or(CamlBuilder.Statement[])
  parent: CamlBuilder.LogicalJoin
  langs:
  - csharp
  - vb
  name: Or(Statement[])
  nameWithType: LogicalJoin.Or(Statement[])
  fullName: CamlBuilder.LogicalJoin.Or(CamlBuilder.Statement[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Or
    path: ../src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
    startLine: 107
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nInstanciates a new <em>Or</em> logical join with specified inner <code data-dev-comment-type=\"paramref\" class=\"paramref\">statements</code>.\n"
  example: []
  syntax:
    content: public static LogicalJoin Or(params Statement[] statements)
    parameters:
    - id: statements
      type: CamlBuilder.Statement[]
      description: Or statements.
    return:
      type: CamlBuilder.LogicalJoin
      description: Or logical join instance.
    content.vb: Public Shared Function Or(ParamArray statements As Statement()) As LogicalJoin
  overload: CamlBuilder.LogicalJoin.Or*
  nameWithType.vb: LogicalJoin.Or(Statement())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CamlBuilder.LogicalJoin.Or(CamlBuilder.Statement())
  name.vb: Or(Statement())
- uid: CamlBuilder.LogicalJoin.Or(System.Collections.Generic.IEnumerable{CamlBuilder.Statement})
  commentId: M:CamlBuilder.LogicalJoin.Or(System.Collections.Generic.IEnumerable{CamlBuilder.Statement})
  id: Or(System.Collections.Generic.IEnumerable{CamlBuilder.Statement})
  parent: CamlBuilder.LogicalJoin
  langs:
  - csharp
  - vb
  name: Or(IEnumerable<Statement>)
  nameWithType: LogicalJoin.Or(IEnumerable<Statement>)
  fullName: CamlBuilder.LogicalJoin.Or(System.Collections.Generic.IEnumerable<CamlBuilder.Statement>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Or
    path: ../src/lib/PnP.Framework/Modernization/Caml/LogicalJoin.cs
    startLine: 117
  assemblies:
  - PnP.Framework
  namespace: CamlBuilder
  summary: "\nInstanciates a new <em>Or</em> logical join with specified inner <code data-dev-comment-type=\"paramref\" class=\"paramref\">statements</code>.\n"
  example: []
  syntax:
    content: public static LogicalJoin Or(IEnumerable<Statement> statements)
    parameters:
    - id: statements
      type: System.Collections.Generic.IEnumerable{CamlBuilder.Statement}
      description: Or statements.
    return:
      type: CamlBuilder.LogicalJoin
      description: Or logical join instance.
    content.vb: Public Shared Function Or(statements As IEnumerable(Of Statement)) As LogicalJoin
  overload: CamlBuilder.LogicalJoin.Or*
  nameWithType.vb: LogicalJoin.Or(IEnumerable(Of Statement))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CamlBuilder.LogicalJoin.Or(System.Collections.Generic.IEnumerable(Of CamlBuilder.Statement))
  name.vb: Or(IEnumerable(Of Statement))
references:
- uid: CamlBuilder
  commentId: N:CamlBuilder
  name: CamlBuilder
  nameWithType: CamlBuilder
  fullName: CamlBuilder
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CamlBuilder.Statement
  commentId: T:CamlBuilder.Statement
  parent: CamlBuilder
  name: Statement
  nameWithType: Statement
  fullName: CamlBuilder.Statement
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CamlBuilder.LogicalJoin.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  parent: System.ValidationExtensions
  definition: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  name: ValidateNotNullOrEmpty<LogicalJoin>(String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<LogicalJoin>(String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<CamlBuilder.LogicalJoin>(System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of LogicalJoin)(String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of CamlBuilder.LogicalJoin)(System.String)
  name.vb: ValidateNotNullOrEmpty(Of LogicalJoin)(String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty<LogicalJoin>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<LogicalJoin>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<CamlBuilder.LogicalJoin>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty(Of LogicalJoin)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of LogicalJoin)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of CamlBuilder.LogicalJoin)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CamlBuilder.LogicalJoin.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{CamlBuilder.LogicalJoin,{T}}},{T},System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  name: Set<LogicalJoin, T>(Expression<Func<LogicalJoin, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<LogicalJoin, T>(Expression<Func<LogicalJoin, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<CamlBuilder.LogicalJoin, T>(System.Linq.Expressions.Expression<System.Func<CamlBuilder.LogicalJoin, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of LogicalJoin, T)(Expression(Of Func(Of LogicalJoin, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of CamlBuilder.LogicalJoin, T)(System.Linq.Expressions.Expression(Of System.Func(Of CamlBuilder.LogicalJoin, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of LogicalJoin, T)(Expression(Of Func(Of LogicalJoin, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<LogicalJoin, T>
    nameWithType: ObjectExtensions.Set<LogicalJoin, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<CamlBuilder.LogicalJoin, T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CamlBuilder.LogicalJoin
    name: LogicalJoin
    nameWithType: LogicalJoin
    fullName: CamlBuilder.LogicalJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of LogicalJoin, T)
    nameWithType: ObjectExtensions.Set(Of LogicalJoin, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of CamlBuilder.LogicalJoin, T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CamlBuilder.LogicalJoin
    name: LogicalJoin
    nameWithType: LogicalJoin
    fullName: CamlBuilder.LogicalJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  name: GetPublicInstancePropertyValue(String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  name: GetPublicInstanceProperty(String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  name: SetPublicInstancePropertyValue(String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  parent: PnP.Framework.Modernization.Cache.Extensions
  definition: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  name: ToByteArray()
  nameWithType: Extensions.ToByteArray()
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray()
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  isExternal: true
  name: ValidateNotNullOrEmpty<T>(T, String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>(T, String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>(T, System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, System.String)
  name.vb: ValidateNotNullOrEmpty(Of T)(T, String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty<T>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty(Of T)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of T)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions
  commentId: T:System.ValidationExtensions
  parent: System
  name: ValidationExtensions
  nameWithType: ValidationExtensions
  fullName: System.ValidationExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  isExternal: true
  name: Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>(TObject, System.Linq.Expressions.Expression<System.Func<TObject, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)(TObject, System.Linq.Expressions.Expression(Of System.Func(Of TObject, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<TObject, T>
    nameWithType: ObjectExtensions.Set<TObject, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of TObject, T)
    nameWithType: ObjectExtensions.Set(Of TObject, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions
  commentId: T:PnP.Framework.Extensions.ObjectExtensions
  parent: PnP.Framework.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: PnP.Framework.Extensions.ObjectExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  isExternal: true
  name: GetPublicInstancePropertyValue(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  isExternal: true
  name: GetPublicInstanceProperty(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  isExternal: true
  name: SetPublicInstancePropertyValue(Object, String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(Object, String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object, System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  isExternal: true
  name: ToByteArray(Object)
  nameWithType: Extensions.ToByteArray(Object)
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions
  commentId: T:PnP.Framework.Modernization.Cache.Extensions
  parent: PnP.Framework.Modernization.Cache
  name: Extensions
  nameWithType: Extensions
  fullName: PnP.Framework.Modernization.Cache.Extensions
- uid: PnP.Framework.Extensions
  commentId: N:PnP.Framework.Extensions
  name: PnP.Framework.Extensions
  nameWithType: PnP.Framework.Extensions
  fullName: PnP.Framework.Extensions
- uid: PnP.Framework.Modernization.Cache
  commentId: N:PnP.Framework.Modernization.Cache
  name: PnP.Framework.Modernization.Cache
  nameWithType: PnP.Framework.Modernization.Cache
  fullName: PnP.Framework.Modernization.Cache
- uid: CamlBuilder.LogicalJoin.LogicalJoinType*
  commentId: Overload:CamlBuilder.LogicalJoin.LogicalJoinType
  name: LogicalJoinType
  nameWithType: LogicalJoin.LogicalJoinType
  fullName: CamlBuilder.LogicalJoin.LogicalJoinType
- uid: CamlBuilder.LogicalJoinType
  commentId: T:CamlBuilder.LogicalJoinType
  parent: CamlBuilder
  name: LogicalJoinType
  nameWithType: LogicalJoinType
  fullName: CamlBuilder.LogicalJoinType
- uid: CamlBuilder.LogicalJoin.AddStatement*
  commentId: Overload:CamlBuilder.LogicalJoin.AddStatement
  name: AddStatement
  nameWithType: LogicalJoin.AddStatement
  fullName: CamlBuilder.LogicalJoin.AddStatement
- uid: CamlBuilder.LogicalJoin.AddStatements*
  commentId: Overload:CamlBuilder.LogicalJoin.AddStatements
  name: AddStatements
  nameWithType: LogicalJoin.AddStatements
  fullName: CamlBuilder.LogicalJoin.AddStatements
- uid: System.Collections.Generic.IEnumerable{CamlBuilder.Statement}
  commentId: T:System.Collections.Generic.IEnumerable{CamlBuilder.Statement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Statement>
  nameWithType: IEnumerable<Statement>
  fullName: System.Collections.Generic.IEnumerable<CamlBuilder.Statement>
  nameWithType.vb: IEnumerable(Of Statement)
  fullName.vb: System.Collections.Generic.IEnumerable(Of CamlBuilder.Statement)
  name.vb: IEnumerable(Of Statement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CamlBuilder.Statement
    name: Statement
    nameWithType: Statement
    fullName: CamlBuilder.Statement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CamlBuilder.Statement
    name: Statement
    nameWithType: Statement
    fullName: CamlBuilder.Statement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CamlBuilder.LogicalJoin.HasStatements*
  commentId: Overload:CamlBuilder.LogicalJoin.HasStatements
  name: HasStatements
  nameWithType: LogicalJoin.HasStatements
  fullName: CamlBuilder.LogicalJoin.HasStatements
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CamlBuilder.Statement.GetCaml
  commentId: M:CamlBuilder.Statement.GetCaml
  parent: CamlBuilder.Statement
  name: GetCaml()
  nameWithType: Statement.GetCaml()
  fullName: CamlBuilder.Statement.GetCaml()
  spec.csharp:
  - uid: CamlBuilder.Statement.GetCaml
    name: GetCaml
    nameWithType: Statement.GetCaml
    fullName: CamlBuilder.Statement.GetCaml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CamlBuilder.Statement.GetCaml
    name: GetCaml
    nameWithType: Statement.GetCaml
    fullName: CamlBuilder.Statement.GetCaml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CamlBuilder.LogicalJoin.GetCaml*
  commentId: Overload:CamlBuilder.LogicalJoin.GetCaml
  name: GetCaml
  nameWithType: LogicalJoin.GetCaml
  fullName: CamlBuilder.LogicalJoin.GetCaml
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CamlBuilder.LogicalJoin.And*
  commentId: Overload:CamlBuilder.LogicalJoin.And
  name: And
  nameWithType: LogicalJoin.And
  fullName: CamlBuilder.LogicalJoin.And
- uid: CamlBuilder.Statement[]
  isExternal: true
  name: Statement[]
  nameWithType: Statement[]
  fullName: CamlBuilder.Statement[]
  nameWithType.vb: Statement()
  fullName.vb: CamlBuilder.Statement()
  name.vb: Statement()
  spec.csharp:
  - uid: CamlBuilder.Statement
    name: Statement
    nameWithType: Statement
    fullName: CamlBuilder.Statement
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: CamlBuilder.Statement
    name: Statement
    nameWithType: Statement
    fullName: CamlBuilder.Statement
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CamlBuilder.LogicalJoin
  commentId: T:CamlBuilder.LogicalJoin
  parent: CamlBuilder
  name: LogicalJoin
  nameWithType: LogicalJoin
  fullName: CamlBuilder.LogicalJoin
- uid: CamlBuilder.LogicalJoin.Or*
  commentId: Overload:CamlBuilder.LogicalJoin.Or
  name: Or
  nameWithType: LogicalJoin.Or
  fullName: CamlBuilder.LogicalJoin.Or

### YamlMime:ManagedReference
items:
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions
  commentId: T:Microsoft.SharePoint.Client.ClientObjectExtensions
  id: ClientObjectExtensions
  parent: Microsoft.SharePoint.Client
  children:
  - Microsoft.SharePoint.Client.ClientObjectExtensions.ClearObjectData(Microsoft.SharePoint.Client.ClientObject)
  - Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperties``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertiesAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertyAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - Microsoft.SharePoint.Client.ClientObjectExtensions.IsObjectPropertyInstantiated``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  - Microsoft.SharePoint.Client.ClientObjectExtensions.IsPropertyAvailable``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  - Microsoft.SharePoint.Client.ClientObjectExtensions.ServerObjectIsNull``1(``0)
  - Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedPropertyExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedStaticMethodCallExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  langs:
  - csharp
  - vb
  name: ClientObjectExtensions
  nameWithType: ClientObjectExtensions
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ClientObjectExtensions
    path: ../src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
    startLine: 11
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nClass for client object extension methods\n"
  example: []
  syntax:
    content: public static class ClientObjectExtensions
    content.vb: Public Module ClientObjectExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.ServerObjectIsNull``1(``0)
  commentId: M:Microsoft.SharePoint.Client.ClientObjectExtensions.ServerObjectIsNull``1(``0)
  id: ServerObjectIsNull``1(``0)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ClientObjectExtensions
  langs:
  - csharp
  - vb
  name: ServerObjectIsNull<T>(T)
  nameWithType: ClientObjectExtensions.ServerObjectIsNull<T>(T)
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.ServerObjectIsNull<T>(T)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ServerObjectIsNull
    path: ../src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
    startLine: 19
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if the ClientObject is null\n"
  example: []
  syntax:
    content: >-
      public static bool ServerObjectIsNull<T>(this T clientObject)
          where T : ClientObject
    parameters:
    - id: clientObject
      type: '{T}'
      description: Object to operate on
    typeParameters:
    - id: T
      description: Type of object to operate on
    return:
      type: System.Boolean
      description: True if the server object is null, otherwise false
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ServerObjectIsNull(Of T As ClientObject)(clientObject As T) As Boolean
  overload: Microsoft.SharePoint.Client.ClientObjectExtensions.ServerObjectIsNull*
  nameWithType.vb: ClientObjectExtensions.ServerObjectIsNull(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ClientObjectExtensions.ServerObjectIsNull(Of T)(T)
  name.vb: ServerObjectIsNull(Of T)(T)
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.IsPropertyAvailable``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:Microsoft.SharePoint.Client.ClientObjectExtensions.IsPropertyAvailable``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: IsPropertyAvailable``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ClientObjectExtensions
  langs:
  - csharp
  - vb
  name: IsPropertyAvailable<T>(T, Expression<Func<T, Object>>)
  nameWithType: ClientObjectExtensions.IsPropertyAvailable<T>(T, Expression<Func<T, Object>>)
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.IsPropertyAvailable<T>(T, System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: IsPropertyAvailable
    path: ../src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
    startLine: 37
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCheck if a property is available on a object\n"
  example: []
  syntax:
    content: >-
      public static bool IsPropertyAvailable<T>(this T clientObject, Expression<Func<T, object>> propertySelector)
          where T : ClientObject
    parameters:
    - id: clientObject
      type: '{T}'
      description: Object to operate on
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: Lamda expression containing the properties to check (e.g. w => w.HasUniqueRoleAssignments)
    typeParameters:
    - id: T
      description: Type of object to operate on
    return:
      type: System.Boolean
      description: True if the property is available, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsPropertyAvailable(Of T As ClientObject)(clientObject As T, propertySelector As Expression(Of Func(Of T, Object))) As Boolean
  overload: Microsoft.SharePoint.Client.ClientObjectExtensions.IsPropertyAvailable*
  nameWithType.vb: ClientObjectExtensions.IsPropertyAvailable(Of T)(T, Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ClientObjectExtensions.IsPropertyAvailable(Of T)(T, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: IsPropertyAvailable(Of T)(T, Expression(Of Func(Of T, Object)))
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.IsObjectPropertyInstantiated``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:Microsoft.SharePoint.Client.ClientObjectExtensions.IsObjectPropertyInstantiated``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: IsObjectPropertyInstantiated``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ClientObjectExtensions
  langs:
  - csharp
  - vb
  name: IsObjectPropertyInstantiated<T>(T, Expression<Func<T, Object>>)
  nameWithType: ClientObjectExtensions.IsObjectPropertyInstantiated<T>(T, Expression<Func<T, Object>>)
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.IsObjectPropertyInstantiated<T>(T, System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: IsObjectPropertyInstantiated
    path: ../src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
    startLine: 51
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCheck if a property is instantiated on a object\n"
  example: []
  syntax:
    content: >-
      public static bool IsObjectPropertyInstantiated<T>(this T clientObject, Expression<Func<T, object>> propertySelector)
          where T : ClientObject
    parameters:
    - id: clientObject
      type: '{T}'
      description: Object to operate on
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: Lamda expression containing the properties to check (e.g. w => w.HasUniqueRoleAssignments)
    typeParameters:
    - id: T
      description: Type of object to operate on
    return:
      type: System.Boolean
      description: True if the property is instantiated, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsObjectPropertyInstantiated(Of T As ClientObject)(clientObject As T, propertySelector As Expression(Of Func(Of T, Object))) As Boolean
  overload: Microsoft.SharePoint.Client.ClientObjectExtensions.IsObjectPropertyInstantiated*
  nameWithType.vb: ClientObjectExtensions.IsObjectPropertyInstantiated(Of T)(T, Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ClientObjectExtensions.IsObjectPropertyInstantiated(Of T)(T, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: IsObjectPropertyInstantiated(Of T)(T, Expression(Of Func(Of T, Object)))
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: EnsureProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ClientObjectExtensions
  langs:
  - csharp
  - vb
  name: EnsureProperty<T, TResult>(T, Expression<Func<T, TResult>>)
  nameWithType: ClientObjectExtensions.EnsureProperty<T, TResult>(T, Expression<Func<T, TResult>>)
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperty<T, TResult>(T, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnsureProperty
    path: ../src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
    startLine: 66
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nEnsures that particular property is loaded on the <xref href=\"Microsoft.SharePoint.Client.ClientObject\" data-throw-if-not-resolved=\"false\"></xref> and immediately returns this property\n"
  example: []
  syntax:
    content: >-
      public static TResult EnsureProperty<T, TResult>(this T clientObject, Expression<Func<T, TResult>> propertySelector)
          where T : ClientObject
    parameters:
    - id: clientObject
      type: '{T}'
      description: <xref href="Microsoft.SharePoint.Client.ClientObject" data-throw-if-not-resolved="false"></xref>
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
      description: Lamda expression containing the property to ensure (e.g. w => w.HasUniqueRoleAssignments)
    typeParameters:
    - id: T
      description: <xref href="Microsoft.SharePoint.Client.ClientObject" data-throw-if-not-resolved="false"></xref> type
    - id: TResult
      description: Property type
    return:
      type: '{TResult}'
      description: Property value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsureProperty(Of T As ClientObject, TResult)(clientObject As T, propertySelector As Expression(Of Func(Of T, TResult))) As TResult
  overload: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperty*
  nameWithType.vb: ClientObjectExtensions.EnsureProperty(Of T, TResult)(T, Expression(Of Func(Of T, TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperty(Of T, TResult)(T, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: EnsureProperty(Of T, TResult)(T, Expression(Of Func(Of T, TResult)))
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertyAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertyAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: EnsurePropertyAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ClientObjectExtensions
  langs:
  - csharp
  - vb
  name: EnsurePropertyAsync<T, TResult>(T, Expression<Func<T, TResult>>)
  nameWithType: ClientObjectExtensions.EnsurePropertyAsync<T, TResult>(T, Expression<Func<T, TResult>>)
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertyAsync<T, TResult>(T, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnsurePropertyAsync
    path: ../src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
    startLine: 79
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nEnsures that particular property is loaded on the <xref href=\"Microsoft.SharePoint.Client.ClientObject\" data-throw-if-not-resolved=\"false\"></xref> and immediately returns this property\n"
  example: []
  syntax:
    content: >-
      public static async Task<TResult> EnsurePropertyAsync<T, TResult>(this T clientObject, Expression<Func<T, TResult>> propertySelector)
          where T : ClientObject
    parameters:
    - id: clientObject
      type: '{T}'
      description: <xref href="Microsoft.SharePoint.Client.ClientObject" data-throw-if-not-resolved="false"></xref>
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
      description: Lamda expression containing the property to ensure (e.g. w => w.HasUniqueRoleAssignments)
    typeParameters:
    - id: T
      description: <xref href="Microsoft.SharePoint.Client.ClientObject" data-throw-if-not-resolved="false"></xref> type
    - id: TResult
      description: Property type
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: Property value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsurePropertyAsync(Of T As ClientObject, TResult)(clientObject As T, propertySelector As Expression(Of Func(Of T, TResult))) As Task(Of TResult)
  overload: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertyAsync*
  nameWithType.vb: ClientObjectExtensions.EnsurePropertyAsync(Of T, TResult)(T, Expression(Of Func(Of T, TResult)))
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertyAsync(Of T, TResult)(T, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: EnsurePropertyAsync(Of T, TResult)(T, Expression(Of Func(Of T, TResult)))
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperties``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperties``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: EnsureProperties``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ClientObjectExtensions
  langs:
  - csharp
  - vb
  name: EnsureProperties<T>(T, Expression<Func<T, Object>>[])
  nameWithType: ClientObjectExtensions.EnsureProperties<T>(T, Expression<Func<T, Object>>[])
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperties<T>(T, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnsureProperties
    path: ../src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
    startLine: 134
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nEnsures that particular properties are loaded on the <xref href=\"Microsoft.SharePoint.Client.ClientObject\" data-throw-if-not-resolved=\"false\"></xref> \n"
  example: []
  syntax:
    content: >-
      public static void EnsureProperties<T>(this T clientObject, params Expression<Func<T, object>>[] propertySelector)
          where T : ClientObject
    parameters:
    - id: clientObject
      type: '{T}'
      description: <xref href="Microsoft.SharePoint.Client.ClientObject" data-throw-if-not-resolved="false"></xref>
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: Lamda expressions containing the properties to ensure (e.g. w => w.HasUniqueRoleAssignments, w => w.ServerRelativeUrl)
    typeParameters:
    - id: T
      description: <xref href="Microsoft.SharePoint.Client.ClientObject" data-throw-if-not-resolved="false"></xref> type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub EnsureProperties(Of T As ClientObject)(clientObject As T, ParamArray propertySelector As Expression(Of Func(Of T, Object))())
  overload: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperties*
  nameWithType.vb: ClientObjectExtensions.EnsureProperties(Of T)(T, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperties(Of T)(T, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: EnsureProperties(Of T)(T, Expression(Of Func(Of T, Object))())
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertiesAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertiesAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: EnsurePropertiesAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ClientObjectExtensions
  langs:
  - csharp
  - vb
  name: EnsurePropertiesAsync<T>(T, Expression<Func<T, Object>>[])
  nameWithType: ClientObjectExtensions.EnsurePropertiesAsync<T>(T, Expression<Func<T, Object>>[])
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertiesAsync<T>(T, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnsurePropertiesAsync
    path: ../src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
    startLine: 146
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nEnsures that particular properties are loaded on the <xref href=\"Microsoft.SharePoint.Client.ClientObject\" data-throw-if-not-resolved=\"false\"></xref> \n"
  example: []
  syntax:
    content: >-
      public static async Task EnsurePropertiesAsync<T>(this T clientObject, params Expression<Func<T, object>>[] propertySelector)
          where T : ClientObject
    parameters:
    - id: clientObject
      type: '{T}'
      description: <xref href="Microsoft.SharePoint.Client.ClientObject" data-throw-if-not-resolved="false"></xref>
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: Lamda expressions containing the properties to ensure (e.g. w => w.HasUniqueRoleAssignments, w => w.ServerRelativeUrl)
    typeParameters:
    - id: T
      description: <xref href="Microsoft.SharePoint.Client.ClientObject" data-throw-if-not-resolved="false"></xref> type
    return:
      type: System.Threading.Tasks.Task
      description: Property value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsurePropertiesAsync(Of T As ClientObject)(clientObject As T, ParamArray propertySelector As Expression(Of Func(Of T, Object))()) As Task
  overload: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertiesAsync*
  nameWithType.vb: ClientObjectExtensions.EnsurePropertiesAsync(Of T)(T, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertiesAsync(Of T)(T, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: EnsurePropertiesAsync(Of T)(T, Expression(Of Func(Of T, Object))())
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedStaticMethodCallExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedStaticMethodCallExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ToUntypedStaticMethodCallExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ClientObjectExtensions
  langs:
  - csharp
  - vb
  name: ToUntypedStaticMethodCallExpression<TInput, TOutput>(Expression<Func<TInput, TOutput>>)
  nameWithType: ClientObjectExtensions.ToUntypedStaticMethodCallExpression<TInput, TOutput>(Expression<Func<TInput, TOutput>>)
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedStaticMethodCallExpression<TInput, TOutput>(System.Linq.Expressions.Expression<System.Func<TInput, TOutput>>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToUntypedStaticMethodCallExpression
    path: ../src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
    startLine: 203
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nConverts generic  Expression&lt;Func&lt;TInput, TOutput>>  to Expression with object return type -  Expression&lt;Func&lt;TInput, object>> \n"
  example: []
  syntax:
    content: public static Expression<Func<TInput, object>> ToUntypedStaticMethodCallExpression<TInput, TOutput>(this Expression<Func<TInput, TOutput>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{TInput},{TOutput}}}
      description: '<xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to convert '
    typeParameters:
    - id: TInput
      description: Input type
    - id: TOutput
      description: Returns type
    return:
      type: System.Linq.Expressions.Expression{System.Func{{TInput},System.Object}}
      description: New Expression where return type is object and not generic
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToUntypedStaticMethodCallExpression(Of TInput, TOutput)(expression As Expression(Of Func(Of TInput, TOutput))) As Expression(Of Func(Of TInput, Object))
  overload: Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedStaticMethodCallExpression*
  nameWithType.vb: ClientObjectExtensions.ToUntypedStaticMethodCallExpression(Of TInput, TOutput)(Expression(Of Func(Of TInput, TOutput)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedStaticMethodCallExpression(Of TInput, TOutput)(System.Linq.Expressions.Expression(Of System.Func(Of TInput, TOutput)))
  name.vb: ToUntypedStaticMethodCallExpression(Of TInput, TOutput)(Expression(Of Func(Of TInput, TOutput)))
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedPropertyExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedPropertyExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ToUntypedPropertyExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ClientObjectExtensions
  langs:
  - csharp
  - vb
  name: ToUntypedPropertyExpression<TInput, TOutput>(Expression<Func<TInput, TOutput>>)
  nameWithType: ClientObjectExtensions.ToUntypedPropertyExpression<TInput, TOutput>(Expression<Func<TInput, TOutput>>)
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedPropertyExpression<TInput, TOutput>(System.Linq.Expressions.Expression<System.Func<TInput, TOutput>>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToUntypedPropertyExpression
    path: ../src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
    startLine: 222
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nConverts generic  Expression&lt;Func&lt;TInput, TOutput>>  to Expression with object return type -  Expression&lt;Func&lt;TInput, object>> \n"
  example: []
  syntax:
    content: public static Expression<Func<TInput, object>> ToUntypedPropertyExpression<TInput, TOutput>(this Expression<Func<TInput, TOutput>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{TInput},{TOutput}}}
      description: '<xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to convert '
    typeParameters:
    - id: TInput
      description: Input type
    - id: TOutput
      description: Returns type
    return:
      type: System.Linq.Expressions.Expression{System.Func{{TInput},System.Object}}
      description: New Expression where return type is object and not generic
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToUntypedPropertyExpression(Of TInput, TOutput)(expression As Expression(Of Func(Of TInput, TOutput))) As Expression(Of Func(Of TInput, Object))
  overload: Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedPropertyExpression*
  nameWithType.vb: ClientObjectExtensions.ToUntypedPropertyExpression(Of TInput, TOutput)(Expression(Of Func(Of TInput, TOutput)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedPropertyExpression(Of TInput, TOutput)(System.Linq.Expressions.Expression(Of System.Func(Of TInput, TOutput)))
  name.vb: ToUntypedPropertyExpression(Of TInput, TOutput)(Expression(Of Func(Of TInput, TOutput)))
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.ClearObjectData(Microsoft.SharePoint.Client.ClientObject)
  commentId: M:Microsoft.SharePoint.Client.ClientObjectExtensions.ClearObjectData(Microsoft.SharePoint.Client.ClientObject)
  id: ClearObjectData(Microsoft.SharePoint.Client.ClientObject)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ClientObjectExtensions
  langs:
  - csharp
  - vb
  name: ClearObjectData(ClientObject)
  nameWithType: ClientObjectExtensions.ClearObjectData(ClientObject)
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.ClearObjectData(Microsoft.SharePoint.Client.ClientObject)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ClearObjectData
    path: ../src/lib/PnP.Framework/Extensions/ClientObjectExtensions.cs
    startLine: 255
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  syntax:
    content: public static void ClearObjectData(this ClientObject clientObject)
    parameters:
    - id: clientObject
      type: Microsoft.SharePoint.Client.ClientObject
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ClearObjectData(clientObject As ClientObject)
  overload: Microsoft.SharePoint.Client.ClientObjectExtensions.ClearObjectData*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.SharePoint.Client
  commentId: N:Microsoft.SharePoint.Client
  name: Microsoft.SharePoint.Client
  nameWithType: Microsoft.SharePoint.Client
  fullName: Microsoft.SharePoint.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.ServerObjectIsNull*
  commentId: Overload:Microsoft.SharePoint.Client.ClientObjectExtensions.ServerObjectIsNull
  name: ServerObjectIsNull
  nameWithType: ClientObjectExtensions.ServerObjectIsNull
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.ServerObjectIsNull
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.IsPropertyAvailable*
  commentId: Overload:Microsoft.SharePoint.Client.ClientObjectExtensions.IsPropertyAvailable
  name: IsPropertyAvailable
  nameWithType: ClientObjectExtensions.IsPropertyAvailable
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.IsPropertyAvailable
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Object}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Object>>
  nameWithType: Expression<Func<T, Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>
  nameWithType.vb: Expression(Of Func(Of T, Object))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))
  name.vb: Expression(Of Func(Of T, Object))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.IsObjectPropertyInstantiated*
  commentId: Overload:Microsoft.SharePoint.Client.ClientObjectExtensions.IsObjectPropertyInstantiated
  name: IsObjectPropertyInstantiated
  nameWithType: ClientObjectExtensions.IsObjectPropertyInstantiated
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.IsObjectPropertyInstantiated
- uid: Microsoft.SharePoint.Client.ClientObject
  commentId: T:Microsoft.SharePoint.Client.ClientObject
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: ClientObject
  nameWithType: ClientObject
  fullName: Microsoft.SharePoint.Client.ClientObject
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperty*
  commentId: Overload:Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperty
  name: EnsureProperty
  nameWithType: ClientObjectExtensions.EnsureProperty
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperty
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TResult>>
  nameWithType: Expression<Func<T, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TResult>>
  nameWithType.vb: Expression(Of Func(Of T, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TResult))
  name.vb: Expression(Of Func(Of T, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: TResult
  commentId: '!:TResult'
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertyAsync*
  commentId: Overload:Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertyAsync
  name: EnsurePropertyAsync
  nameWithType: ClientObjectExtensions.EnsurePropertyAsync
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertyAsync
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperties*
  commentId: Overload:Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperties
  name: EnsureProperties
  nameWithType: ClientObjectExtensions.EnsureProperties
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsureProperties
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
  isExternal: true
  name: Expression<Func<T, Object>>[]
  nameWithType: Expression<Func<T, Object>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>[]
  nameWithType.vb: Expression(Of Func(Of T, Object))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))()
  name.vb: Expression(Of Func(Of T, Object))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertiesAsync*
  commentId: Overload:Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertiesAsync
  name: EnsurePropertiesAsync
  nameWithType: ClientObjectExtensions.EnsurePropertiesAsync
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.EnsurePropertiesAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  isExternal: true
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedStaticMethodCallExpression*
  commentId: Overload:Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedStaticMethodCallExpression
  name: ToUntypedStaticMethodCallExpression
  nameWithType: ClientObjectExtensions.ToUntypedStaticMethodCallExpression
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedStaticMethodCallExpression
- uid: System.Linq.Expressions.Expression{System.Func{{TInput},{TOutput}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TInput, TOutput>>
  nameWithType: Expression<Func<TInput, TOutput>>
  fullName: System.Linq.Expressions.Expression<System.Func<TInput, TOutput>>
  nameWithType.vb: Expression(Of Func(Of TInput, TOutput))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TInput, TOutput))
  name.vb: Expression(Of Func(Of TInput, TOutput))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TInput},System.Object}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Object}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TInput, Object>>
  nameWithType: Expression<Func<TInput, Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<TInput, System.Object>>
  nameWithType.vb: Expression(Of Func(Of TInput, Object))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TInput, System.Object))
  name.vb: Expression(Of Func(Of TInput, Object))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedPropertyExpression*
  commentId: Overload:Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedPropertyExpression
  name: ToUntypedPropertyExpression
  nameWithType: ClientObjectExtensions.ToUntypedPropertyExpression
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.ToUntypedPropertyExpression
- uid: Microsoft.SharePoint.Client.ClientObjectExtensions.ClearObjectData*
  commentId: Overload:Microsoft.SharePoint.Client.ClientObjectExtensions.ClearObjectData
  name: ClearObjectData
  nameWithType: ClientObjectExtensions.ClearObjectData
  fullName: Microsoft.SharePoint.Client.ClientObjectExtensions.ClearObjectData

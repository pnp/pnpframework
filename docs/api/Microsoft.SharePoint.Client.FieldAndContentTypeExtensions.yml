### YamlMime:ManagedReference
items:
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  commentId: T:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  id: FieldAndContentTypeExtensions
  parent: Microsoft.SharePoint.Client
  children:
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToList(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToList(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.ContentType,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListById(Microsoft.SharePoint.Client.List,System.String,System.Boolean,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListById(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Boolean,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListByName(Microsoft.SharePoint.Client.List,System.String,System.Boolean,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListByName(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Boolean,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldById(Microsoft.SharePoint.Client.ContentType,System.Guid,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldById(Microsoft.SharePoint.Client.ContentType,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldByName(Microsoft.SharePoint.Client.ContentType,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentType(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.ContentType,Microsoft.SharePoint.Client.Field,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeByName(Microsoft.SharePoint.Client.Web,System.String,System.Guid,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch(Microsoft.SharePoint.Client.ContentTypeCollection,Microsoft.SharePoint.Client.ContentTypeId)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch(Microsoft.SharePoint.Client.ContentTypeCollection,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch(Microsoft.SharePoint.Client.ContentTypeId,System.Collections.Generic.IEnumerable{Microsoft.SharePoint.Client.ContentType})
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatchContentTypeId(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById(Microsoft.SharePoint.Client.Web,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName(Microsoft.SharePoint.Client.Web,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentType(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentType(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String,Microsoft.SharePoint.Client.ContentType)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXML(Microsoft.SharePoint.Client.Web,System.Xml.Linq.XDocument)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLFile(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLString(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.List,System.String,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.Web,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField``1(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField``1(Microsoft.SharePoint.Client.Web,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXML(Microsoft.SharePoint.Client.Web,System.Xml.Linq.XDocument)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLFile(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLString(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeById(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeByName(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.List,System.Guid)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.Web,System.Guid,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByName(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByNameInContentType(Microsoft.SharePoint.Client.ContentType,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByNameInContentType(Microsoft.SharePoint.Client.Web,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FormatFieldXml(PnP.Framework.Entities.FieldCreationInformation)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetAllowDeletion(Microsoft.SharePoint.Client.Field)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.ContentTypeCollection,System.Object}},System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeByName(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeByName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetDefaultColumnValueFromField(Microsoft.SharePoint.Client.Field,Microsoft.SharePoint.Client.ClientContext,System.String,System.String[])
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById(Microsoft.SharePoint.Client.List,System.Guid)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById(Microsoft.SharePoint.Client.Web,System.Guid,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById``1(Microsoft.SharePoint.Client.List,System.Guid)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById``1(Microsoft.SharePoint.Client.Web,System.Guid,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName(Microsoft.SharePoint.Client.FieldCollection,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName``1(Microsoft.SharePoint.Client.FieldCollection,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName(Microsoft.SharePoint.Client.FieldCollection,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName``1(Microsoft.SharePoint.Client.FieldCollection,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFields(Microsoft.SharePoint.Client.List,System.String[])
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetIsAllowedInContentTypeOrder(Microsoft.SharePoint.Client.ContentType)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetParentIdValue(Microsoft.SharePoint.Client.ContentTypeId)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.HideContentTypesInNewButton(Microsoft.SharePoint.Client.List,System.Collections.Generic.IList{Microsoft.SharePoint.Client.ContentType})
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsChildOf(Microsoft.SharePoint.Client.ContentTypeId,Microsoft.SharePoint.Client.ContentTypeId)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsParentOf(Microsoft.SharePoint.Client.ContentTypeId,Microsoft.SharePoint.Client.ContentTypeId)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListById(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListById(Microsoft.SharePoint.Client.Web,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListByName(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListByName(Microsoft.SharePoint.Client.Web,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldById(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldByInternalName(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ReorderContentTypes(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetAllowDeletion(Microsoft.SharePoint.Client.Field,System.Nullable{System.Boolean})
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentType(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentTypeId)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentType(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.ContentType)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetJsLinkCustomizations(Microsoft.SharePoint.Client.Field,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetJsLinkCustomizations(Microsoft.SharePoint.Client.List,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType(Microsoft.SharePoint.Client.ContentType,System.String,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType(Microsoft.SharePoint.Client.List,System.String,System.String,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Field,System.String,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Field,System.String,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.List,System.Guid,System.String,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.List,System.String,System.String,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Field,System.String,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Web,System.Guid,System.String,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String)
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ShowContentTypesInNewButton(Microsoft.SharePoint.Client.List,System.Collections.Generic.IList{Microsoft.SharePoint.Client.ContentType})
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})
  - Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeByName(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})
  langs:
  - csharp
  - vb
  name: FieldAndContentTypeExtensions
  nameWithType: FieldAndContentTypeExtensions
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FieldAndContentTypeExtensions
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 16
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nThis class provides extension methods that will help you work with fields and content types.\n"
  example: []
  syntax:
    content: public static class FieldAndContentTypeExtensions
    content.vb: Public Module FieldAndContentTypeExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.List,System.String)
  id: SetDefaultContentTypeToList(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetDefaultContentTypeToList(List, String)
  nameWithType: FieldAndContentTypeExtensions.SetDefaultContentTypeToList(List, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/Deprecated/FieldAndContentTypeExtensions.deprecated.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetDefaultContentTypeToList
    path: ../src/lib/PnP.Framework/Extensions/Deprecated/FieldAndContentTypeExtensions.deprecated.cs
    startLine: 16
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet&apos;s default content type list. \n"
  remarks: Notice. Currently removes other content types from the list. Known issue
  example: []
  syntax:
    content: >-
      [Obsolete("Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.")]

      public static void SetDefaultContentTypeToList(this List list, string contentTypeId)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to update
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type
    content.vb: >-
      <Obsolete("Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.")>

      <ExtensionAttribute>

      Public Shared Sub SetDefaultContentTypeToList(list As List, contentTypeId As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType)
  id: SetDefaultContentTypeToList(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetDefaultContentTypeToList(List, ContentType)
  nameWithType: FieldAndContentTypeExtensions.SetDefaultContentTypeToList(List, ContentType)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.List, Microsoft.SharePoint.Client.ContentType)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/Deprecated/FieldAndContentTypeExtensions.deprecated.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetDefaultContentTypeToList
    path: ../src/lib/PnP.Framework/Extensions/Deprecated/FieldAndContentTypeExtensions.deprecated.cs
    startLine: 41
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet default content type to list\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.")]

      public static void SetDefaultContentTypeToList(this List list, ContentType contentType)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to update
    - id: contentType
      type: Microsoft.SharePoint.Client.ContentType
      description: Content type to make default
    content.vb: >-
      <Obsolete("Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.")>

      <ExtensionAttribute>

      Public Shared Sub SetDefaultContentTypeToList(list As List, contentType As ContentType)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType)
  id: SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetDefaultContentTypeToList(Web, List, ContentType)
  nameWithType: FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Web, List, ContentType)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.List, Microsoft.SharePoint.Client.ContentType)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/Deprecated/FieldAndContentTypeExtensions.deprecated.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetDefaultContentTypeToList
    path: ../src/lib/PnP.Framework/Extensions/Deprecated/FieldAndContentTypeExtensions.deprecated.cs
    startLine: 53
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet default content type to list\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.")]

      public static void SetDefaultContentTypeToList(this Web web, List list, ContentType contentType)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to update
    - id: contentType
      type: Microsoft.SharePoint.Client.ContentType
      description: Content type to make default
    content.vb: >-
      <Obsolete("Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.")>

      <ExtensionAttribute>

      Public Shared Sub SetDefaultContentTypeToList(web As Web, list As List, contentType As ContentType)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,System.String)
  id: SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetDefaultContentTypeToList(Web, List, String)
  nameWithType: FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Web, List, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/Deprecated/FieldAndContentTypeExtensions.deprecated.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetDefaultContentTypeToList
    path: ../src/lib/PnP.Framework/Extensions/Deprecated/FieldAndContentTypeExtensions.deprecated.cs
    startLine: 65
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet default content type to list\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.")]

      public static void SetDefaultContentTypeToList(this Web web, List list, string contentTypeId)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to update
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type
    content.vb: >-
      <Obsolete("Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.")>

      <ExtensionAttribute>

      Public Shared Sub SetDefaultContentTypeToList(web As Web, list As List, contentTypeId As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,System.String,System.String)
  id: SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetDefaultContentTypeToList(Web, String, String)
  nameWithType: FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Web, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/Deprecated/FieldAndContentTypeExtensions.deprecated.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetDefaultContentTypeToList
    path: ../src/lib/PnP.Framework/Extensions/Deprecated/FieldAndContentTypeExtensions.deprecated.cs
    startLine: 77
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet default content type to list\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.")]

      public static void SetDefaultContentTypeToList(this Web web, string listTitle, string contentTypeId)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listTitle
      type: System.String
      description: Title of the list to be updated
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type
    content.vb: >-
      <Obsolete("Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.")>

      <ExtensionAttribute>

      Public Shared Sub SetDefaultContentTypeToList(web As Web, listTitle As String, contentTypeId As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.ContentType)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.ContentType)
  id: SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.ContentType)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetDefaultContentTypeToList(Web, String, ContentType)
  nameWithType: FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Web, String, ContentType)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList(Microsoft.SharePoint.Client.Web, System.String, Microsoft.SharePoint.Client.ContentType)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/Deprecated/FieldAndContentTypeExtensions.deprecated.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetDefaultContentTypeToList
    path: ../src/lib/PnP.Framework/Extensions/Deprecated/FieldAndContentTypeExtensions.deprecated.cs
    startLine: 92
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet&apos;s default content type list. \n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.")]

      public static void SetDefaultContentTypeToList(this Web web, string listTitle, ContentType contentType)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listTitle
      type: System.String
      description: Title of the list to be updated
    - id: contentType
      type: Microsoft.SharePoint.Client.ContentType
      description: Content type to make default
    content.vb: >-
      <Obsolete("Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.")>

      <ExtensionAttribute>

      Public Shared Sub SetDefaultContentTypeToList(web As Web, listTitle As String, contentType As ContentType)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use List.SetDefaultContentType method. This method will be removed in the August 2018 release.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetAllowDeletion(Microsoft.SharePoint.Client.Field,System.Nullable{System.Boolean})
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetAllowDeletion(Microsoft.SharePoint.Client.Field,System.Nullable{System.Boolean})
  id: SetAllowDeletion(Microsoft.SharePoint.Client.Field,System.Nullable{System.Boolean})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetAllowDeletion(Field, Nullable<Boolean>)
  nameWithType: FieldAndContentTypeExtensions.SetAllowDeletion(Field, Nullable<Boolean>)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetAllowDeletion(Microsoft.SharePoint.Client.Field, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetAllowDeletion
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 27
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSets the AllowDeletion property on a field.\nNote 1: This method will load <code data-dev-comment-type=\"paramref\" class=\"paramref\">field</code>.SchemaXmlWithResourceTokens if it&apos;s not already loaded by the caller.\nNote 2: This method does not update the field nor execute the query.\n"
  example: []
  syntax:
    content: public static void SetAllowDeletion(this Field field, bool? AllowDeletion)
    parameters:
    - id: field
      type: Microsoft.SharePoint.Client.Field
      description: Field to be processed
    - id: AllowDeletion
      type: System.Nullable{System.Boolean}
      description: False blocks field deletion, True enables field deletion. Null uses field default behavior.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetAllowDeletion(field As Field, AllowDeletion As Boolean?)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetAllowDeletion*
  nameWithType.vb: FieldAndContentTypeExtensions.SetAllowDeletion(Field, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetAllowDeletion(Microsoft.SharePoint.Client.Field, System.Nullable(Of System.Boolean))
  name.vb: SetAllowDeletion(Field, Nullable(Of Boolean))
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetAllowDeletion(Microsoft.SharePoint.Client.Field)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetAllowDeletion(Microsoft.SharePoint.Client.Field)
  id: GetAllowDeletion(Microsoft.SharePoint.Client.Field)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetAllowDeletion(Field)
  nameWithType: FieldAndContentTypeExtensions.GetAllowDeletion(Field)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetAllowDeletion(Microsoft.SharePoint.Client.Field)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetAllowDeletion
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 41
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGets the AllowDeletion property from a field.\nNote 1: This method will load <code data-dev-comment-type=\"paramref\" class=\"paramref\">field</code>.SchemaXmlWithResourceTokens if not any of the properties <code data-dev-comment-type=\"paramref\" class=\"paramref\">field</code>.SchemaXmlWithResourceTokens or <code data-dev-comment-type=\"paramref\" class=\"paramref\">field</code>.SchemaXml is already loaded by the caller.\n"
  example: []
  syntax:
    content: public static bool? GetAllowDeletion(this Field field)
    parameters:
    - id: field
      type: Microsoft.SharePoint.Client.Field
      description: Field to be processed
    return:
      type: System.Nullable{System.Boolean}
      description: Returns false if field deletion is not allowed, true if field deletion is allowed, and null if the field default behavior is used to determine if field deletion is allowed.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAllowDeletion(field As Field) As Boolean?
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetAllowDeletion*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.Web,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.Web,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  id: CreateField(Microsoft.SharePoint.Client.Web,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateField(Web, FieldCreationInformation, Boolean)
  nameWithType: FieldAndContentTypeExtensions.CreateField(Web, FieldCreationInformation, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.Web, PnP.Framework.Entities.FieldCreationInformation, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 74
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreate field to web remotely\n"
  example: []
  syntax:
    content: public static Field CreateField(this Web web, FieldCreationInformation fieldCreationInformation, bool executeQuery = true)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: fieldCreationInformation
      type: PnP.Framework.Entities.FieldCreationInformation
      description: Creation Information for the field.
    - id: executeQuery
      type: System.Boolean
      description: Optionally skip the executeQuery action
    return:
      type: Microsoft.SharePoint.Client.Field
      description: The newly created field or existing field.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateField(web As Web, fieldCreationInformation As FieldCreationInformation, executeQuery As Boolean = True) As Field
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField``1(Microsoft.SharePoint.Client.Web,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField``1(Microsoft.SharePoint.Client.Web,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  id: CreateField``1(Microsoft.SharePoint.Client.Web,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateField<TField>(Web, FieldCreationInformation, Boolean)
  nameWithType: FieldAndContentTypeExtensions.CreateField<TField>(Web, FieldCreationInformation, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField<TField>(Microsoft.SharePoint.Client.Web, PnP.Framework.Entities.FieldCreationInformation, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 87
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreate field to web remotely\n"
  example: []
  syntax:
    content: >-
      public static TField CreateField<TField>(this Web web, FieldCreationInformation fieldCreationInformation, bool executeQuery = true)
          where TField : Field
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: fieldCreationInformation
      type: PnP.Framework.Entities.FieldCreationInformation
      description: Field creation information
    - id: executeQuery
      type: System.Boolean
      description: Optionally skip the executeQuery action
    typeParameters:
    - id: TField
      description: The created field type to return.
    return:
      type: '{TField}'
      description: The newly created field or existing field.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateField(Of TField As Field)(web As Web, fieldCreationInformation As FieldCreationInformation, executeQuery As Boolean = True) As TField
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField*
  nameWithType.vb: FieldAndContentTypeExtensions.CreateField(Of TField)(Web, FieldCreationInformation, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Of TField)(Microsoft.SharePoint.Client.Web, PnP.Framework.Entities.FieldCreationInformation, System.Boolean)
  name.vb: CreateField(Of TField)(Web, FieldCreationInformation, Boolean)
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  id: CreateField(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateField(Web, String, Boolean)
  nameWithType: FieldAndContentTypeExtensions.CreateField(Web, String, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.Web, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 114
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreate field to web remotely\n"
  example: []
  syntax:
    content: public static Field CreateField(this Web web, string fieldAsXml, bool executeQuery = true)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: fieldAsXml
      type: System.String
      description: The XML declaration of SiteColumn definition
    - id: executeQuery
      type: System.Boolean
      description: Executes query if true
    return:
      type: Microsoft.SharePoint.Client.Field
      description: The newly created field or existing field.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateField(web As Web, fieldAsXml As String, executeQuery As Boolean = True) As Field
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldByInternalName(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldByInternalName(Microsoft.SharePoint.Client.Web,System.String)
  id: RemoveFieldByInternalName(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: RemoveFieldByInternalName(Web, String)
  nameWithType: FieldAndContentTypeExtensions.RemoveFieldByInternalName(Web, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldByInternalName(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RemoveFieldByInternalName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 156
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemoves a field by specifying its internal name\n"
  example: []
  syntax:
    content: public static void RemoveFieldByInternalName(this Web web, string internalName)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to process
    - id: internalName
      type: System.String
      description: Internal name of the field
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RemoveFieldByInternalName(web As Web, internalName As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldByInternalName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldById(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldById(Microsoft.SharePoint.Client.Web,System.String)
  id: RemoveFieldById(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: RemoveFieldById(Web, String)
  nameWithType: FieldAndContentTypeExtensions.RemoveFieldById(Web, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldById(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RemoveFieldById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 175
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemoves a field by specifying its ID\n"
  example: []
  syntax:
    content: public static void RemoveFieldById(this Web web, string fieldId)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to process
    - id: fieldId
      type: System.String
      description: The id of the field to remove
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RemoveFieldById(web As Web, fieldId As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLFile(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLFile(Microsoft.SharePoint.Client.Web,System.String)
  id: CreateFieldsFromXMLFile(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateFieldsFromXMLFile(Web, String)
  nameWithType: FieldAndContentTypeExtensions.CreateFieldsFromXMLFile(Web, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLFile(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateFieldsFromXMLFile
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 195
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreates fields from feature element xml file schema. XML file can contain one or many field definitions created using classic feature framework structure.\n"
  example: []
  syntax:
    content: public static void CreateFieldsFromXMLFile(this Web web, string xmlFilePath)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site. Site columns should be created to root site.
    - id: xmlFilePath
      type: System.String
      description: Absolute path to the xml location
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CreateFieldsFromXMLFile(web As Web, xmlFilePath As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLString(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLString(Microsoft.SharePoint.Client.Web,System.String)
  id: CreateFieldsFromXMLString(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateFieldsFromXMLString(Web, String)
  nameWithType: FieldAndContentTypeExtensions.CreateFieldsFromXMLString(Web, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLString(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateFieldsFromXMLString
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 208
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreates fields from feature element xml file schema. XML file can contain one or many field definitions created using classic feature framework structure.\n"
  example: []
  syntax:
    content: public static void CreateFieldsFromXMLString(this Web web, string xmlStructure)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site. Site columns should be created to root site.
    - id: xmlStructure
      type: System.String
      description: XML structure in string format
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CreateFieldsFromXMLString(web As Web, xmlStructure As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXML(Microsoft.SharePoint.Client.Web,System.Xml.Linq.XDocument)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXML(Microsoft.SharePoint.Client.Web,System.Xml.Linq.XDocument)
  id: CreateFieldsFromXML(Microsoft.SharePoint.Client.Web,System.Xml.Linq.XDocument)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateFieldsFromXML(Web, XDocument)
  nameWithType: FieldAndContentTypeExtensions.CreateFieldsFromXML(Web, XDocument)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXML(Microsoft.SharePoint.Client.Web, System.Xml.Linq.XDocument)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateFieldsFromXML
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 221
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreates field from xml structure which follows the classic feature framework structure\n"
  example: []
  syntax:
    content: public static void CreateFieldsFromXML(this Web web, XDocument xDocument)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site. Site columns should be created to root site.
    - id: xDocument
      type: System.Xml.Linq.XDocument
      description: Actual XML document
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CreateFieldsFromXML(web As Web, xDocument As XDocument)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXML*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.Web,System.Guid,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.Web,System.Guid,System.Boolean)
  id: FieldExistsById(Microsoft.SharePoint.Client.Web,System.Guid,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: FieldExistsById(Web, Guid, Boolean)
  nameWithType: FieldAndContentTypeExtensions.FieldExistsById(Web, Guid, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.Web, System.Guid, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FieldExistsById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 251
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns if the field is found\n"
  example: []
  syntax:
    content: public static bool FieldExistsById(this Web web, Guid fieldId, bool searchInSiteHierarchy = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site. Site columns should be created to root site.
    - id: fieldId
      type: System.Guid
      description: Guid for the field ID
    - id: searchInSiteHierarchy
      type: System.Boolean
      description: If true, search parent sites and root site
    return:
      type: System.Boolean
      description: True or false depending on the field existence
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FieldExistsById(web As Web, fieldId As Guid, searchInSiteHierarchy As Boolean = False) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById``1(Microsoft.SharePoint.Client.Web,System.Guid,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById``1(Microsoft.SharePoint.Client.Web,System.Guid,System.Boolean)
  id: GetFieldById``1(Microsoft.SharePoint.Client.Web,System.Guid,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetFieldById<TField>(Web, Guid, Boolean)
  nameWithType: FieldAndContentTypeExtensions.GetFieldById<TField>(Web, Guid, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById<TField>(Microsoft.SharePoint.Client.Web, System.Guid, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFieldById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 265
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns the field if it exists. Null if it does not exist.\n"
  example: []
  syntax:
    content: >-
      public static TField GetFieldById<TField>(this Web web, Guid fieldId, bool searchInSiteHierarchy = false)
          where TField : Field
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site. Site columns should be created to root site.
    - id: fieldId
      type: System.Guid
      description: Guid for the field ID
    - id: searchInSiteHierarchy
      type: System.Boolean
      description: If true, search parent sites and root site
    typeParameters:
    - id: TField
      description: The selected field type to return.
    return:
      type: '{TField}'
      description: Field of type TField
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFieldById(Of TField As Field)(web As Web, fieldId As Guid, searchInSiteHierarchy As Boolean = False) As TField
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById*
  nameWithType.vb: FieldAndContentTypeExtensions.GetFieldById(Of TField)(Web, Guid, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById(Of TField)(Microsoft.SharePoint.Client.Web, System.Guid, System.Boolean)
  name.vb: GetFieldById(Of TField)(Web, Guid, Boolean)
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById(Microsoft.SharePoint.Client.Web,System.Guid,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById(Microsoft.SharePoint.Client.Web,System.Guid,System.Boolean)
  id: GetFieldById(Microsoft.SharePoint.Client.Web,System.Guid,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetFieldById(Web, Guid, Boolean)
  nameWithType: FieldAndContentTypeExtensions.GetFieldById(Web, Guid, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById(Microsoft.SharePoint.Client.Web, System.Guid, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFieldById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 285
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns the field if it exists. Null if it does not exist.\n"
  example: []
  syntax:
    content: public static Field GetFieldById(this Web web, Guid fieldId, bool searchInSiteHierarchy = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site. Site columns should be created to root site.
    - id: fieldId
      type: System.Guid
      description: Guid for the field ID
    - id: searchInSiteHierarchy
      type: System.Boolean
      description: If true, search parent sites and root site
    return:
      type: Microsoft.SharePoint.Client.Field
      description: Field of type TField
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFieldById(web As Web, fieldId As Guid, searchInSiteHierarchy As Boolean = False) As Field
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById``1(Microsoft.SharePoint.Client.List,System.Guid)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById``1(Microsoft.SharePoint.Client.List,System.Guid)
  id: GetFieldById``1(Microsoft.SharePoint.Client.List,System.Guid)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetFieldById<TField>(List, Guid)
  nameWithType: FieldAndContentTypeExtensions.GetFieldById<TField>(List, Guid)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById<TField>(Microsoft.SharePoint.Client.List, System.Guid)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFieldById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 309
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns the field if it exists. Null if it does not exist.\n"
  example: []
  syntax:
    content: >-
      public static TField GetFieldById<TField>(this List list, Guid fieldId)
          where TField : Field
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to be processed. Columns assoc in lists are defined on web or rootweb.
    - id: fieldId
      type: System.Guid
      description: Guid for the field ID
    typeParameters:
    - id: TField
      description: The selected field type to return.
    return:
      type: '{TField}'
      description: Field of type TField
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFieldById(Of TField As Field)(list As List, fieldId As Guid) As TField
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById*
  nameWithType.vb: FieldAndContentTypeExtensions.GetFieldById(Of TField)(List, Guid)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById(Of TField)(Microsoft.SharePoint.Client.List, System.Guid)
  name.vb: GetFieldById(Of TField)(List, Guid)
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById(Microsoft.SharePoint.Client.List,System.Guid)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById(Microsoft.SharePoint.Client.List,System.Guid)
  id: GetFieldById(Microsoft.SharePoint.Client.List,System.Guid)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetFieldById(List, Guid)
  nameWithType: FieldAndContentTypeExtensions.GetFieldById(List, Guid)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById(Microsoft.SharePoint.Client.List, System.Guid)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFieldById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 321
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns the field if it exists. Null if it does not exist.\n"
  example: []
  syntax:
    content: public static Field GetFieldById(this List list, Guid fieldId)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to be processed. Columns assoc in lists are defined on web or rootweb.
    - id: fieldId
      type: System.Guid
      description: Guid for the field ID
    return:
      type: Microsoft.SharePoint.Client.Field
      description: Field
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFieldById(list As List, fieldId As Guid) As Field
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  id: GetFieldByInternalName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetFieldByInternalName(Web, String, Boolean)
  nameWithType: FieldAndContentTypeExtensions.GetFieldByInternalName(Web, String, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName(Microsoft.SharePoint.Client.Web, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFieldByInternalName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 336
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns the field if it exists. Null if does not exist.\n"
  example: []
  syntax:
    content: public static Field GetFieldByInternalName(this Web web, string internalName, bool searchInSiteHierarchy = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to be processed
    - id: internalName
      type: System.String
      description: If true, search parent sites and root site
    - id: searchInSiteHierarchy
      type: System.Boolean
      description: If true, search across all the available fields in the site hierarchy
    return:
      type: Microsoft.SharePoint.Client.Field
      description: Field
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFieldByInternalName(web As Web, internalName As String, searchInSiteHierarchy As Boolean = False) As Field
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName``1(Microsoft.SharePoint.Client.FieldCollection,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName``1(Microsoft.SharePoint.Client.FieldCollection,System.String)
  id: GetFieldByName``1(Microsoft.SharePoint.Client.FieldCollection,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetFieldByName<TField>(FieldCollection, String)
  nameWithType: FieldAndContentTypeExtensions.GetFieldByName<TField>(FieldCollection, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName<TField>(Microsoft.SharePoint.Client.FieldCollection, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFieldByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 360
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns the field if it exists. Null if it does not exist.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetFieldByInternalName instead. This method returns field based on StaticName. This could lead to unexpected results due to StaticName property not necessarily being unique within a field collection. (https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spfield.staticname.aspx)")]

      public static TField GetFieldByName<TField>(this FieldCollection fields, string internalName)
          where TField : Field
    parameters:
    - id: fields
      type: Microsoft.SharePoint.Client.FieldCollection
      description: FieldCollection to be processed.
    - id: internalName
      type: System.String
      description: Guid for the field ID
    typeParameters:
    - id: TField
      description: The selected field type to return.
    return:
      type: '{TField}'
      description: Field of type TField
    content.vb: >-
      <Obsolete("Use GetFieldByInternalName instead. This method returns field based on StaticName. This could lead to unexpected results due to StaticName property not necessarily being unique within a field collection. (https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spfield.staticname.aspx)")>

      <ExtensionAttribute>

      Public Shared Function GetFieldByName(Of TField As Field)(fields As FieldCollection, internalName As String) As TField
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetFieldByInternalName instead. This method returns field based on StaticName. This could lead to unexpected results due to StaticName property not necessarily being unique within a field collection. (https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spfield.staticname.aspx)
  nameWithType.vb: FieldAndContentTypeExtensions.GetFieldByName(Of TField)(FieldCollection, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName(Of TField)(Microsoft.SharePoint.Client.FieldCollection, System.String)
  name.vb: GetFieldByName(Of TField)(FieldCollection, String)
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName(Microsoft.SharePoint.Client.FieldCollection,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName(Microsoft.SharePoint.Client.FieldCollection,System.String)
  id: GetFieldByName(Microsoft.SharePoint.Client.FieldCollection,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetFieldByName(FieldCollection, String)
  nameWithType: FieldAndContentTypeExtensions.GetFieldByName(FieldCollection, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName(Microsoft.SharePoint.Client.FieldCollection, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFieldByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 373
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns the field if it exists. Null if it does not exist.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetFieldByInternalName instead. This method returns field based on StaticName. This could lead to unexpected results due to StaticName property not necessarily being unique within a field collection. (https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spfield.staticname.aspx)")]

      public static Field GetFieldByName(this FieldCollection fields, string internalName)
    parameters:
    - id: fields
      type: Microsoft.SharePoint.Client.FieldCollection
      description: FieldCollection to be processed.
    - id: internalName
      type: System.String
      description: Guid for the field ID
    return:
      type: Microsoft.SharePoint.Client.Field
      description: Field
    content.vb: >-
      <Obsolete("Use GetFieldByInternalName instead. This method returns field based on StaticName. This could lead to unexpected results due to StaticName property not necessarily being unique within a field collection. (https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spfield.staticname.aspx)")>

      <ExtensionAttribute>

      Public Shared Function GetFieldByName(fields As FieldCollection, internalName As String) As Field
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetFieldByInternalName instead. This method returns field based on StaticName. This could lead to unexpected results due to StaticName property not necessarily being unique within a field collection. (https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spfield.staticname.aspx)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName``1(Microsoft.SharePoint.Client.FieldCollection,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName``1(Microsoft.SharePoint.Client.FieldCollection,System.String)
  id: GetFieldByInternalName``1(Microsoft.SharePoint.Client.FieldCollection,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetFieldByInternalName<TField>(FieldCollection, String)
  nameWithType: FieldAndContentTypeExtensions.GetFieldByInternalName<TField>(FieldCollection, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName<TField>(Microsoft.SharePoint.Client.FieldCollection, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFieldByInternalName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 393
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns the field if it exists. Null if it does not exist.\n"
  example: []
  syntax:
    content: >-
      public static TField GetFieldByInternalName<TField>(this FieldCollection fields, string internalName)
          where TField : Field
    parameters:
    - id: fields
      type: Microsoft.SharePoint.Client.FieldCollection
      description: FieldCollection to be processed.
    - id: internalName
      type: System.String
      description: Internal name of the field
    typeParameters:
    - id: TField
      description: The selected field type to return.
    return:
      type: '{TField}'
      description: Field of type TField
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFieldByInternalName(Of TField As Field)(fields As FieldCollection, internalName As String) As TField
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName*
  nameWithType.vb: FieldAndContentTypeExtensions.GetFieldByInternalName(Of TField)(FieldCollection, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName(Of TField)(Microsoft.SharePoint.Client.FieldCollection, System.String)
  name.vb: GetFieldByInternalName(Of TField)(FieldCollection, String)
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName(Microsoft.SharePoint.Client.FieldCollection,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName(Microsoft.SharePoint.Client.FieldCollection,System.String)
  id: GetFieldByInternalName(Microsoft.SharePoint.Client.FieldCollection,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetFieldByInternalName(FieldCollection, String)
  nameWithType: FieldAndContentTypeExtensions.GetFieldByInternalName(FieldCollection, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName(Microsoft.SharePoint.Client.FieldCollection, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFieldByInternalName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 405
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns the field if it exists. Null if it does not exist.\n"
  example: []
  syntax:
    content: public static Field GetFieldByInternalName(this FieldCollection fields, string internalName)
    parameters:
    - id: fields
      type: Microsoft.SharePoint.Client.FieldCollection
      description: FieldCollection to be processed.
    - id: internalName
      type: System.String
      description: Internal name of the field
    return:
      type: Microsoft.SharePoint.Client.Field
      description: Field
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFieldByInternalName(fields As FieldCollection, internalName As String) As Field
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  id: FieldExistsByName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: FieldExistsByName(Web, String, Boolean)
  nameWithType: FieldAndContentTypeExtensions.FieldExistsByName(Web, String, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByName(Microsoft.SharePoint.Client.Web, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FieldExistsByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 423
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns if the field is found\n"
  example: []
  syntax:
    content: public static bool FieldExistsByName(this Web web, string fieldName, bool searchInSiteHierarchy = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site. Site columns should be created to root site.
    - id: fieldName
      type: System.String
      description: String for the field internal name to be used as query criteria
    - id: searchInSiteHierarchy
      type: System.Boolean
      description: If true, search parent sites and root site
    return:
      type: System.Boolean
      description: True or false depending on the field existence
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FieldExistsByName(web As Web, fieldName As String, searchInSiteHierarchy As Boolean = False) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  id: FieldExistsById(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: FieldExistsById(Web, String, Boolean)
  nameWithType: FieldAndContentTypeExtensions.FieldExistsById(Web, String, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.Web, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FieldExistsById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 452
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nDoes field exist in web\n"
  example: []
  syntax:
    content: public static bool FieldExistsById(this Web web, string fieldId, bool searchInSiteHierarchy = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site. Site columns should be created to root site.
    - id: fieldId
      type: System.String
      description: String representation of the field ID (=guid)
    - id: searchInSiteHierarchy
      type: System.Boolean
      description: If true, search parent sites and root site
    return:
      type: System.Boolean
      description: True if exists, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FieldExistsById(web As Web, fieldId As String, searchInSiteHierarchy As Boolean = False) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByNameInContentType(Microsoft.SharePoint.Client.Web,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByNameInContentType(Microsoft.SharePoint.Client.Web,System.String,System.String)
  id: FieldExistsByNameInContentType(Microsoft.SharePoint.Client.Web,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: FieldExistsByNameInContentType(Web, String, String)
  nameWithType: FieldAndContentTypeExtensions.FieldExistsByNameInContentType(Web, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByNameInContentType(Microsoft.SharePoint.Client.Web, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FieldExistsByNameInContentType
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 469
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nField exists in content type\n"
  example: []
  syntax:
    content: public static bool FieldExistsByNameInContentType(this Web web, string contentTypeName, string fieldName)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site. Site columns should be created to root site.
    - id: contentTypeName
      type: System.String
      description: Name of the content type
    - id: fieldName
      type: System.String
      description: Name of the field
    return:
      type: System.Boolean
      description: True if exists, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FieldExistsByNameInContentType(web As Web, contentTypeName As String, fieldName As String) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByNameInContentType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByNameInContentType(Microsoft.SharePoint.Client.ContentType,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByNameInContentType(Microsoft.SharePoint.Client.ContentType,System.String)
  id: FieldExistsByNameInContentType(Microsoft.SharePoint.Client.ContentType,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: FieldExistsByNameInContentType(ContentType, String)
  nameWithType: FieldAndContentTypeExtensions.FieldExistsByNameInContentType(ContentType, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByNameInContentType(Microsoft.SharePoint.Client.ContentType, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FieldExistsByNameInContentType
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 494
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if a field exists in a content type by id\n"
  example: []
  syntax:
    content: public static bool FieldExistsByNameInContentType(this ContentType contentType, string fieldName)
    parameters:
    - id: contentType
      type: Microsoft.SharePoint.Client.ContentType
      description: The content type to check
    - id: fieldName
      type: System.String
      description: The name of the field to look for
    return:
      type: System.Boolean
      description: True if field exists in content type, otherwise false
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FieldExistsByNameInContentType(contentType As ContentType, fieldName As String) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByNameInContentType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetJsLinkCustomizations(Microsoft.SharePoint.Client.Field,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetJsLinkCustomizations(Microsoft.SharePoint.Client.Field,System.String)
  id: SetJsLinkCustomizations(Microsoft.SharePoint.Client.Field,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetJsLinkCustomizations(Field, String)
  nameWithType: FieldAndContentTypeExtensions.SetJsLinkCustomizations(Field, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetJsLinkCustomizations(Microsoft.SharePoint.Client.Field, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetJsLinkCustomizations
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 514
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdds jsLink to a field.\n"
  example: []
  syntax:
    content: public static void SetJsLinkCustomizations(this Field field, string jsLink)
    parameters:
    - id: field
      type: Microsoft.SharePoint.Client.Field
      description: The field to add jsLink to
    - id: jsLink
      type: System.String
      description: >
        JSLink to set to the form. Set to empty string to remove the set JSLink customization.

        Specify multiple values separated by pipe symbol. For e.g.: ~sitecollection/_catalogs/masterpage/jquery-2.1.0.min.js|~sitecollection/_catalogs/masterpage/custom.js
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetJsLinkCustomizations(field As Field, jsLink As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetJsLinkCustomizations*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  id: CreateField(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateField(List, FieldCreationInformation, Boolean)
  nameWithType: FieldAndContentTypeExtensions.CreateField(List, FieldCreationInformation, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.List, PnP.Framework.Entities.FieldCreationInformation, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 533
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdds field to a list\n"
  example: []
  syntax:
    content: public static Field CreateField(this List list, FieldCreationInformation fieldCreationInformation, bool executeQuery = true)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    - id: fieldCreationInformation
      type: PnP.Framework.Entities.FieldCreationInformation
      description: Creation information for the field
    - id: executeQuery
      type: System.Boolean
      description: Optionally skip the executeQuery action
    return:
      type: Microsoft.SharePoint.Client.Field
      description: The newly created field or existing field.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateField(list As List, fieldCreationInformation As FieldCreationInformation, executeQuery As Boolean = True) As Field
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField``1(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField``1(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  id: CreateField``1(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.FieldCreationInformation,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateField<TField>(List, FieldCreationInformation, Boolean)
  nameWithType: FieldAndContentTypeExtensions.CreateField<TField>(List, FieldCreationInformation, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField<TField>(Microsoft.SharePoint.Client.List, PnP.Framework.Entities.FieldCreationInformation, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 546
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdds field to a list\n"
  example: []
  syntax:
    content: >-
      public static TField CreateField<TField>(this List list, FieldCreationInformation fieldCreationInformation, bool executeQuery = true)
          where TField : Field
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    - id: fieldCreationInformation
      type: PnP.Framework.Entities.FieldCreationInformation
      description: Field creation information
    - id: executeQuery
      type: System.Boolean
      description: Optionally skip the executeQuery action
    typeParameters:
    - id: TField
      description: The selected field type to return.
    return:
      type: '{TField}'
      description: The newly created field or existing field.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateField(Of TField As Field)(list As List, fieldCreationInformation As FieldCreationInformation, executeQuery As Boolean = True) As TField
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField*
  nameWithType.vb: FieldAndContentTypeExtensions.CreateField(Of TField)(List, FieldCreationInformation, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Of TField)(Microsoft.SharePoint.Client.List, PnP.Framework.Entities.FieldCreationInformation, System.Boolean)
  name.vb: CreateField(Of TField)(List, FieldCreationInformation, Boolean)
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FormatFieldXml(PnP.Framework.Entities.FieldCreationInformation)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FormatFieldXml(PnP.Framework.Entities.FieldCreationInformation)
  id: FormatFieldXml(PnP.Framework.Entities.FieldCreationInformation)
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: FormatFieldXml(FieldCreationInformation)
  nameWithType: FieldAndContentTypeExtensions.FormatFieldXml(FieldCreationInformation)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FormatFieldXml(PnP.Framework.Entities.FieldCreationInformation)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FormatFieldXml
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 602
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nFormats a fieldcreationinformation object into Field CAML xml.\n"
  example: []
  syntax:
    content: public static string FormatFieldXml(FieldCreationInformation fieldCreationInformation)
    parameters:
    - id: fieldCreationInformation
      type: PnP.Framework.Entities.FieldCreationInformation
      description: Field Cration Information object
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function FormatFieldXml(fieldCreationInformation As FieldCreationInformation) As String
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FormatFieldXml*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.List,System.String,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.List,System.String,System.Boolean)
  id: CreateField(Microsoft.SharePoint.Client.List,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateField(List, String, Boolean)
  nameWithType: FieldAndContentTypeExtensions.CreateField(List, String, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField(Microsoft.SharePoint.Client.List, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 676
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdds a field to a list\n"
  example: []
  syntax:
    content: public static Field CreateField(this List list, string fieldAsXml, bool executeQuery = true)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    - id: fieldAsXml
      type: System.String
      description: The XML declaration of SiteColumn definition
    - id: executeQuery
      type: System.Boolean
      description: Optionally skip the executeQuery action
    return:
      type: Microsoft.SharePoint.Client.Field
      description: The newly created field or existing field.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateField(list As List, fieldAsXml As String, executeQuery As Boolean = True) As Field
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.List,System.Guid)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.List,System.Guid)
  id: FieldExistsById(Microsoft.SharePoint.Client.List,System.Guid)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: FieldExistsById(List, Guid)
  nameWithType: FieldAndContentTypeExtensions.FieldExistsById(List, Guid)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.List, System.Guid)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FieldExistsById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 722
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns if the field is found\n"
  example: []
  syntax:
    content: public static bool FieldExistsById(this List list, Guid fieldId)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    - id: fieldId
      type: System.Guid
      description: Guid of the field ID
    return:
      type: System.Boolean
      description: True if the fields exists, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FieldExistsById(list As List, fieldId As Guid) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.List,System.String)
  id: FieldExistsById(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: FieldExistsById(List, String)
  nameWithType: FieldAndContentTypeExtensions.FieldExistsById(List, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FieldExistsById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 737
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns if the field is found, query based on the ID\n"
  example: []
  syntax:
    content: public static bool FieldExistsById(this List list, string fieldId)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    - id: fieldId
      type: System.String
      description: String representation of the field ID (=guid)
    return:
      type: System.Boolean
      description: True if the fields exists, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FieldExistsById(list As List, fieldId As String) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByName(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByName(Microsoft.SharePoint.Client.List,System.String)
  id: FieldExistsByName(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: FieldExistsByName(List, String)
  nameWithType: FieldAndContentTypeExtensions.FieldExistsByName(List, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByName(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FieldExistsByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 753
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nField exists in list by name\n"
  example: []
  syntax:
    content: public static bool FieldExistsByName(this List list, string fieldName)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    - id: fieldName
      type: System.String
      description: Internal name of the field
    return:
      type: System.Boolean
      description: True if the fields exists, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FieldExistsByName(list As List, fieldName As String) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFields(Microsoft.SharePoint.Client.List,System.String[])
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFields(Microsoft.SharePoint.Client.List,System.String[])
  id: GetFields(Microsoft.SharePoint.Client.List,System.String[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetFields(List, String[])
  nameWithType: FieldAndContentTypeExtensions.GetFields(List, String[])
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFields(Microsoft.SharePoint.Client.List, System.String[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFields
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 773
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGets a list of fields from a list by names.\n"
  example: []
  syntax:
    content: public static IEnumerable<Field> GetFields(this List list, params string[] fieldInternalNames)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The target list containing the fields.
    - id: fieldInternalNames
      type: System.String[]
      description: List of field names to retreieve.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.SharePoint.Client.Field}
      description: List of fields requested.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFields(list As List, ParamArray fieldInternalNames As String()) As IEnumerable(Of Field)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFields*
  nameWithType.vb: FieldAndContentTypeExtensions.GetFields(List, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFields(Microsoft.SharePoint.Client.List, System.String())
  name.vb: GetFields(List, String())
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetJsLinkCustomizations(Microsoft.SharePoint.Client.List,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetJsLinkCustomizations(Microsoft.SharePoint.Client.List,System.String,System.String)
  id: SetJsLinkCustomizations(Microsoft.SharePoint.Client.List,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetJsLinkCustomizations(List, String, String)
  nameWithType: FieldAndContentTypeExtensions.SetJsLinkCustomizations(List, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetJsLinkCustomizations(Microsoft.SharePoint.Client.List, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetJsLinkCustomizations
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 801
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdds jsLink to a list field.\n"
  example: []
  syntax:
    content: public static void SetJsLinkCustomizations(this List list, string fieldName, string jsLink)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list where the field exists.
    - id: fieldName
      type: System.String
      description: The field to add jsLink to.
    - id: jsLink
      type: System.String
      description: >
        JSLink to set to the form. Set to empty string to remove the set JSLink customization.

        Specify multiple values separated by pipe symbol. For e.g.: ~sitecollection/_catalogs/masterpage/jquery-2.1.0.min.js|~sitecollection/_catalogs/masterpage/custom.js
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetJsLinkCustomizations(list As List, fieldName As String, jsLink As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetJsLinkCustomizations*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetDefaultColumnValueFromField(Microsoft.SharePoint.Client.Field,Microsoft.SharePoint.Client.ClientContext,System.String,System.String[])
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetDefaultColumnValueFromField(Microsoft.SharePoint.Client.Field,Microsoft.SharePoint.Client.ClientContext,System.String,System.String[])
  id: GetDefaultColumnValueFromField(Microsoft.SharePoint.Client.Field,Microsoft.SharePoint.Client.ClientContext,System.String,System.String[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetDefaultColumnValueFromField(Field, ClientContext, String, String[])
  nameWithType: FieldAndContentTypeExtensions.GetDefaultColumnValueFromField(Field, ClientContext, String, String[])
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetDefaultColumnValueFromField(Microsoft.SharePoint.Client.Field, Microsoft.SharePoint.Client.ClientContext, System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetDefaultColumnValueFromField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 807
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  syntax:
    content: public static IDefaultColumnValue GetDefaultColumnValueFromField(this Field field, ClientContext clientContext, string folderRelativePath, string[] value)
    parameters:
    - id: field
      type: Microsoft.SharePoint.Client.Field
    - id: clientContext
      type: Microsoft.SharePoint.Client.ClientContext
    - id: folderRelativePath
      type: System.String
    - id: value
      type: System.String[]
    return:
      type: PnP.Framework.Entities.IDefaultColumnValue
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDefaultColumnValueFromField(field As Field, clientContext As ClientContext, folderRelativePath As String, value As String()) As IDefaultColumnValue
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetDefaultColumnValueFromField*
  nameWithType.vb: FieldAndContentTypeExtensions.GetDefaultColumnValueFromField(Field, ClientContext, String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetDefaultColumnValueFromField(Microsoft.SharePoint.Client.Field, Microsoft.SharePoint.Client.ClientContext, System.String, System.String())
  name.vb: GetDefaultColumnValueFromField(Field, ClientContext, String, String())
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListById(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Boolean,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListById(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Boolean,System.Boolean)
  id: AddContentTypeToListById(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: AddContentTypeToListById(Web, String, String, Boolean, Boolean)
  nameWithType: FieldAndContentTypeExtensions.AddContentTypeToListById(Web, String, String, Boolean, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListById(Microsoft.SharePoint.Client.Web, System.String, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddContentTypeToListById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 919
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdds content type to list\n"
  example: []
  syntax:
    content: public static void AddContentTypeToListById(this Web web, string listTitle, string contentTypeId, bool defaultContent = false, bool searchContentTypeInSiteHierarchy = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listTitle
      type: System.String
      description: Title of the list
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type
    - id: defaultContent
      type: System.Boolean
      description: Optionally make this the default content type
    - id: searchContentTypeInSiteHierarchy
      type: System.Boolean
      description: search for content type in site hierarchy
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddContentTypeToListById(web As Web, listTitle As String, contentTypeId As String, defaultContent As Boolean = False, searchContentTypeInSiteHierarchy As Boolean = False)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListByName(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Boolean,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListByName(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Boolean,System.Boolean)
  id: AddContentTypeToListByName(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: AddContentTypeToListByName(Web, String, String, Boolean, Boolean)
  nameWithType: FieldAndContentTypeExtensions.AddContentTypeToListByName(Web, String, String, Boolean, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListByName(Microsoft.SharePoint.Client.Web, System.String, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddContentTypeToListByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 936
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdds content type to list\n"
  example: []
  syntax:
    content: public static void AddContentTypeToListByName(this Web web, string listTitle, string contentTypeName, bool defaultContent = false, bool searchContentTypeInSiteHierarchy = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listTitle
      type: System.String
      description: Title of the list
    - id: contentTypeName
      type: System.String
      description: Name of the content type
    - id: defaultContent
      type: System.Boolean
      description: Optionally make this the default content type
    - id: searchContentTypeInSiteHierarchy
      type: System.Boolean
      description: search for content type in site hierarchy
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddContentTypeToListByName(web As Web, listTitle As String, contentTypeName As String, defaultContent As Boolean = False, searchContentTypeInSiteHierarchy As Boolean = False)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToList(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.ContentType,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToList(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.ContentType,System.Boolean)
  id: AddContentTypeToList(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.ContentType,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: AddContentTypeToList(Web, String, ContentType, Boolean)
  nameWithType: FieldAndContentTypeExtensions.AddContentTypeToList(Web, String, ContentType, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToList(Microsoft.SharePoint.Client.Web, System.String, Microsoft.SharePoint.Client.ContentType, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddContentTypeToList
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 952
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdds content type to list\n"
  example: []
  syntax:
    content: public static void AddContentTypeToList(this Web web, string listTitle, ContentType contentType, bool defaultContent = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listTitle
      type: System.String
      description: Title of the list
    - id: contentType
      type: Microsoft.SharePoint.Client.ContentType
      description: Content type to be added to the list
    - id: defaultContent
      type: System.Boolean
      description: If set true, content type is updated to be default content type for the list
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddContentTypeToList(web As Web, listTitle As String, contentType As ContentType, defaultContent As Boolean = False)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListById(Microsoft.SharePoint.Client.List,System.String,System.Boolean,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListById(Microsoft.SharePoint.Client.List,System.String,System.Boolean,System.Boolean)
  id: AddContentTypeToListById(Microsoft.SharePoint.Client.List,System.String,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: AddContentTypeToListById(List, String, Boolean, Boolean)
  nameWithType: FieldAndContentTypeExtensions.AddContentTypeToListById(List, String, Boolean, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListById(Microsoft.SharePoint.Client.List, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddContentTypeToListById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 968
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdd content type to list\n"
  example: []
  syntax:
    content: public static bool AddContentTypeToListById(this List list, string contentTypeID, bool defaultContent = false, bool searchContentTypeInSiteHierarchy = false)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to add content type to
    - id: contentTypeID
      type: System.String
      description: Complete ID for the content type
    - id: defaultContent
      type: System.Boolean
      description: If set true, content type is updated to be default content type for the list
    - id: searchContentTypeInSiteHierarchy
      type: System.Boolean
      description: search for content type in site hierarchy
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddContentTypeToListById(list As List, contentTypeID As String, defaultContent As Boolean = False, searchContentTypeInSiteHierarchy As Boolean = False) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListByName(Microsoft.SharePoint.Client.List,System.String,System.Boolean,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListByName(Microsoft.SharePoint.Client.List,System.String,System.Boolean,System.Boolean)
  id: AddContentTypeToListByName(Microsoft.SharePoint.Client.List,System.String,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: AddContentTypeToListByName(List, String, Boolean, Boolean)
  nameWithType: FieldAndContentTypeExtensions.AddContentTypeToListByName(List, String, Boolean, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListByName(Microsoft.SharePoint.Client.List, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddContentTypeToListByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 982
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdd content type to list\n"
  example: []
  syntax:
    content: public static bool AddContentTypeToListByName(this List list, string contentTypeName, bool defaultContent = false, bool searchContentTypeInSiteHierarchy = false)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to add content type to
    - id: contentTypeName
      type: System.String
      description: Name of the content type
    - id: defaultContent
      type: System.Boolean
      description: If set true, content type is updated to be default content type for the list
    - id: searchContentTypeInSiteHierarchy
      type: System.Boolean
      description: search for content type in site hierarchy
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddContentTypeToListByName(list As List, contentTypeName As String, defaultContent As Boolean = False, searchContentTypeInSiteHierarchy As Boolean = False) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToList(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToList(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType,System.Boolean)
  id: AddContentTypeToList(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: AddContentTypeToList(List, ContentType, Boolean)
  nameWithType: FieldAndContentTypeExtensions.AddContentTypeToList(List, ContentType, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToList(Microsoft.SharePoint.Client.List, Microsoft.SharePoint.Client.ContentType, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddContentTypeToList
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 995
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdd content type to list\n"
  example: []
  syntax:
    content: public static bool AddContentTypeToList(this List list, ContentType contentType, bool defaultContent = false)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to add content type to
    - id: contentType
      type: Microsoft.SharePoint.Client.ContentType
      description: Content type to add to the list
    - id: defaultContent
      type: System.Boolean
      description: If set true, content type is updated to be default content type for the list
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddContentTypeToList(list As List, contentType As ContentType, defaultContent As Boolean = False) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldById(Microsoft.SharePoint.Client.ContentType,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldById(Microsoft.SharePoint.Client.ContentType,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: AddFieldById(Microsoft.SharePoint.Client.ContentType,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: AddFieldById(ContentType, String, Boolean, Boolean, Boolean, Boolean, Boolean)
  nameWithType: FieldAndContentTypeExtensions.AddFieldById(ContentType, String, Boolean, Boolean, Boolean, Boolean, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldById(Microsoft.SharePoint.Client.ContentType, System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddFieldById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1056
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAssociates field to content type\n"
  example: []
  syntax:
    content: public static void AddFieldById(this ContentType contentType, string fieldId, bool required = false, bool hidden = false, bool updateChildren = true, bool showInDisplayForm = true, bool readOnly = false)
    parameters:
    - id: contentType
      type: Microsoft.SharePoint.Client.ContentType
      description: Content Type to add the field to
    - id: fieldId
      type: System.String
      description: String representation of the id of the field (=Guid)
    - id: required
      type: System.Boolean
      description: True if the field is required
    - id: hidden
      type: System.Boolean
      description: True if the field is hidden
    - id: updateChildren
      type: System.Boolean
      description: True to update content types that inherit from the content type; otherwise, false.
    - id: showInDisplayForm
      type: System.Boolean
      description: Optionally show this field in the display form.
    - id: readOnly
      type: System.Boolean
      description: Optionally make this a read only field.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddFieldById(contentType As ContentType, fieldId As String, required As Boolean = False, hidden As Boolean = False, updateChildren As Boolean = True, showInDisplayForm As Boolean = True, readOnly As Boolean = False)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldById(Microsoft.SharePoint.Client.ContentType,System.Guid,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldById(Microsoft.SharePoint.Client.ContentType,System.Guid,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: AddFieldById(Microsoft.SharePoint.Client.ContentType,System.Guid,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: AddFieldById(ContentType, Guid, Boolean, Boolean, Boolean, Boolean, Boolean)
  nameWithType: FieldAndContentTypeExtensions.AddFieldById(ContentType, Guid, Boolean, Boolean, Boolean, Boolean, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldById(Microsoft.SharePoint.Client.ContentType, System.Guid, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddFieldById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1081
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAssociates field to content type\n"
  example: []
  syntax:
    content: public static void AddFieldById(this ContentType contentType, Guid fieldId, bool required = false, bool hidden = false, bool updateChildren = true, bool showInDisplayForm = true, bool readOnly = false)
    parameters:
    - id: contentType
      type: Microsoft.SharePoint.Client.ContentType
      description: Content Type to add the field to
    - id: fieldId
      type: System.Guid
      description: The Id of the field
    - id: required
      type: System.Boolean
      description: True if the field is required
    - id: hidden
      type: System.Boolean
      description: True if the field is hidden
    - id: updateChildren
      type: System.Boolean
      description: True to update content types that inherit from the content type; otherwise, false.
    - id: showInDisplayForm
      type: System.Boolean
      description: Optionally show this field in the display form.
    - id: readOnly
      type: System.Boolean
      description: Optionally make this a read only field.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddFieldById(contentType As ContentType, fieldId As Guid, required As Boolean = False, hidden As Boolean = False, updateChildren As Boolean = True, showInDisplayForm As Boolean = True, readOnly As Boolean = False)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldByName(Microsoft.SharePoint.Client.ContentType,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldByName(Microsoft.SharePoint.Client.ContentType,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: AddFieldByName(Microsoft.SharePoint.Client.ContentType,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: AddFieldByName(ContentType, String, Boolean, Boolean, Boolean, Boolean, Boolean)
  nameWithType: FieldAndContentTypeExtensions.AddFieldByName(ContentType, String, Boolean, Boolean, Boolean, Boolean, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldByName(Microsoft.SharePoint.Client.ContentType, System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddFieldByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1110
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAssociates field to content type\n"
  example: []
  syntax:
    content: public static void AddFieldByName(this ContentType contentType, string fieldName, bool required = false, bool hidden = false, bool updateChildren = true, bool showInDisplayForm = true, bool readOnly = false)
    parameters:
    - id: contentType
      type: Microsoft.SharePoint.Client.ContentType
      description: Content Type to add the field to
    - id: fieldName
      type: System.String
      description: The title or internal name of the field
    - id: required
      type: System.Boolean
      description: True if the field is required
    - id: hidden
      type: System.Boolean
      description: True if the field is hidden
    - id: updateChildren
      type: System.Boolean
      description: True to update content types that inherit from the content type; otherwise, false.
    - id: showInDisplayForm
      type: System.Boolean
      description: Optionally show this field in the display form.
    - id: readOnly
      type: System.Boolean
      description: Optionally make this a read only field.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddFieldByName(contentType As ContentType, fieldName As String, required As Boolean = False, hidden As Boolean = False, updateChildren As Boolean = True, showInDisplayForm As Boolean = True, readOnly As Boolean = False)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: AddFieldToContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: AddFieldToContentTypeById(Web, String, String, Boolean, Boolean, Boolean, Boolean, Boolean)
  nameWithType: FieldAndContentTypeExtensions.AddFieldToContentTypeById(Web, String, String, Boolean, Boolean, Boolean, Boolean, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeById(Microsoft.SharePoint.Client.Web, System.String, System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddFieldToContentTypeById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1141
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAssociates field to content type\n"
  example: []
  syntax:
    content: public static void AddFieldToContentTypeById(this Web web, string contentTypeID, string fieldId, bool required = false, bool hidden = false, bool updateChildren = true, bool showInDisplayForm = true, bool readOnly = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: contentTypeID
      type: System.String
      description: String representation of the id of the content type to add the field to
    - id: fieldId
      type: System.String
      description: String representation of the field ID (=guid)
    - id: required
      type: System.Boolean
      description: True if the field is required
    - id: hidden
      type: System.Boolean
      description: True if the field is hidden
    - id: updateChildren
      type: System.Boolean
      description: True to update content types that inherit from the content type; otherwise, false.
    - id: showInDisplayForm
      type: System.Boolean
      description: Optionally show this field in the display form.
    - id: readOnly
      type: System.Boolean
      description: Optionally make this a read only field.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddFieldToContentTypeById(web As Web, contentTypeID As String, fieldId As String, required As Boolean = False, hidden As Boolean = False, updateChildren As Boolean = True, showInDisplayForm As Boolean = True, readOnly As Boolean = False)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeByName(Microsoft.SharePoint.Client.Web,System.String,System.Guid,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeByName(Microsoft.SharePoint.Client.Web,System.String,System.Guid,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: AddFieldToContentTypeByName(Microsoft.SharePoint.Client.Web,System.String,System.Guid,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: AddFieldToContentTypeByName(Web, String, Guid, Boolean, Boolean, Boolean, Boolean, Boolean)
  nameWithType: FieldAndContentTypeExtensions.AddFieldToContentTypeByName(Web, String, Guid, Boolean, Boolean, Boolean, Boolean, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeByName(Microsoft.SharePoint.Client.Web, System.String, System.Guid, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddFieldToContentTypeByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1177
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAssociates field to content type\n"
  example: []
  syntax:
    content: public static void AddFieldToContentTypeByName(this Web web, string contentTypeName, Guid fieldID, bool required = false, bool hidden = false, bool updateChildren = true, bool showInDisplayForm = true, bool readOnly = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: contentTypeName
      type: System.String
      description: Name of the content type
    - id: fieldID
      type: System.Guid
      description: Guid representation of the field ID
    - id: required
      type: System.Boolean
      description: True if the field is required
    - id: hidden
      type: System.Boolean
      description: True if the field is hidden
    - id: updateChildren
      type: System.Boolean
      description: True to update content types that inherit from the content type; otherwise, false.
    - id: showInDisplayForm
      type: System.Boolean
      description: Optionally show this field in the display form.
    - id: readOnly
      type: System.Boolean
      description: Optionally make this a read only field.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddFieldToContentTypeByName(web As Web, contentTypeName As String, fieldID As Guid, required As Boolean = False, hidden As Boolean = False, updateChildren As Boolean = True, showInDisplayForm As Boolean = True, readOnly As Boolean = False)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentType(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.ContentType,Microsoft.SharePoint.Client.Field,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentType(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.ContentType,Microsoft.SharePoint.Client.Field,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})
  id: AddFieldToContentType(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.ContentType,Microsoft.SharePoint.Client.Field,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: AddFieldToContentType(Web, ContentType, Field, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>)
  nameWithType: FieldAndContentTypeExtensions.AddFieldToContentType(Web, ContentType, Field, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentType(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.ContentType, Microsoft.SharePoint.Client.Field, System.Nullable<System.Boolean>, System.Nullable<System.Boolean>, System.Nullable<System.Boolean>, System.Nullable<System.Boolean>, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddFieldToContentType
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1213
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAssociates field to content type\n"
  example: []
  syntax:
    content: public static void AddFieldToContentType(this Web web, ContentType contentType, Field field, bool? required, bool? hidden, bool? updateChildren, bool? showInDisplayForm, bool? readOnly)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: contentType
      type: Microsoft.SharePoint.Client.ContentType
      description: Content type to associate field to
    - id: field
      type: Microsoft.SharePoint.Client.Field
      description: Field to associate to the content type
    - id: required
      type: System.Nullable{System.Boolean}
      description: Optionally make this a required field
    - id: hidden
      type: System.Nullable{System.Boolean}
      description: Optionally make this a hidden field
    - id: updateChildren
      type: System.Nullable{System.Boolean}
      description: True to update content types that inherit from the content type; otherwise, false.
    - id: showInDisplayForm
      type: System.Nullable{System.Boolean}
      description: Optionally show this field in the display form.
    - id: readOnly
      type: System.Nullable{System.Boolean}
      description: Optionally make this a read only field.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddFieldToContentType(web As Web, contentType As ContentType, field As Field, required As Boolean?, hidden As Boolean?, updateChildren As Boolean?, showInDisplayForm As Boolean?, readOnly As Boolean?)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentType*
  nameWithType.vb: FieldAndContentTypeExtensions.AddFieldToContentType(Web, ContentType, Field, Nullable(Of Boolean), Nullable(Of Boolean), Nullable(Of Boolean), Nullable(Of Boolean), Nullable(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentType(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.ContentType, Microsoft.SharePoint.Client.Field, System.Nullable(Of System.Boolean), System.Nullable(Of System.Boolean), System.Nullable(Of System.Boolean), System.Nullable(Of System.Boolean), System.Nullable(Of System.Boolean))
  name.vb: AddFieldToContentType(Web, ContentType, Field, Nullable(Of Boolean), Nullable(Of Boolean), Nullable(Of Boolean), Nullable(Of Boolean), Nullable(Of Boolean))
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatchContentTypeId(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatchContentTypeId(Microsoft.SharePoint.Client.List,System.String)
  id: BestMatchContentTypeId(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: BestMatchContentTypeId(List, String)
  nameWithType: FieldAndContentTypeExtensions.BestMatchContentTypeId(List, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatchContentTypeId(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: BestMatchContentTypeId
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1320
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSearches the list content types and returns the content type identifier (ID) that is the \nnearest match to the specified content type ID.\n"
  remarks: "\n<p>\nIf the search finds multiple matches, the shorter ID is returned. For example, if 0x0101 is the \nargument, and the collection contains both 0x010109 and 0x01010901, the method returns 0x010109.\n</p>\n"
  example: []
  syntax:
    content: public static ContentTypeId BestMatchContentTypeId(this List list, string baseContentTypeId)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to check for content types
    - id: baseContentTypeId
      type: System.String
      description: A string with the base content type ID to match.
    return:
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: "The value of the Id property for the content type with the closest match to the value \nof the specified content type ID. "
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BestMatchContentTypeId(list As List, baseContentTypeId As String) As ContentTypeId
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatchContentTypeId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  id: ContentTypeExistsById(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: ContentTypeExistsById(Web, String, Boolean)
  nameWithType: FieldAndContentTypeExtensions.ContentTypeExistsById(Web, String, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById(Microsoft.SharePoint.Client.Web, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ContentTypeExistsById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1371
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nDoes content type exists in the web\n"
  example: []
  syntax:
    content: public static bool ContentTypeExistsById(this Web web, string contentTypeId, bool searchInSiteHierarchy = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to be processed
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type
    - id: searchInSiteHierarchy
      type: System.Boolean
      description: Searches accross all content types in the site up to the root site
    return:
      type: System.Boolean
      description: True if the content type exists, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContentTypeExistsById(web As Web, contentTypeId As String, searchInSiteHierarchy As Boolean = False) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  id: ContentTypeExistsByName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: ContentTypeExistsByName(Web, String, Boolean)
  nameWithType: FieldAndContentTypeExtensions.ContentTypeExistsByName(Web, String, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName(Microsoft.SharePoint.Client.Web, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ContentTypeExistsByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1408
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nDoes content type exists in the web\n"
  example: []
  syntax:
    content: public static bool ContentTypeExistsByName(this Web web, string contentTypeName, bool searchInSiteHierarchy = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to be processed
    - id: contentTypeName
      type: System.String
      description: Name of the content type
    - id: searchInSiteHierarchy
      type: System.Boolean
      description: Searches accross all content types in the site up to the root site
    return:
      type: System.Boolean
      description: True if the content type exists, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContentTypeExistsByName(web As Web, contentTypeName As String, searchInSiteHierarchy As Boolean = False) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById(Microsoft.SharePoint.Client.Web,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById(Microsoft.SharePoint.Client.Web,System.String,System.String)
  id: ContentTypeExistsById(Microsoft.SharePoint.Client.Web,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: ContentTypeExistsById(Web, String, String)
  nameWithType: FieldAndContentTypeExtensions.ContentTypeExistsById(Web, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById(Microsoft.SharePoint.Client.Web, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ContentTypeExistsById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1431
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nDoes content type exist in web\n"
  example: []
  syntax:
    content: public static bool ContentTypeExistsById(this Web web, string listTitle, string contentTypeId)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to be processed
    - id: listTitle
      type: System.String
      description: Title of the list to be updated
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type
    return:
      type: System.Boolean
      description: True if the content type exists, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContentTypeExistsById(web As Web, listTitle As String, contentTypeId As String) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById(Microsoft.SharePoint.Client.List,System.String)
  id: ContentTypeExistsById(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: ContentTypeExistsById(List, String)
  nameWithType: FieldAndContentTypeExtensions.ContentTypeExistsById(List, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ContentTypeExistsById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1453
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nDoes content type exist in list\n"
  example: []
  syntax:
    content: public static bool ContentTypeExistsById(this List list, string contentTypeId)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to update
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type
    return:
      type: System.Boolean
      description: True if the content type exists, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContentTypeExistsById(list As List, contentTypeId As String) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName(Microsoft.SharePoint.Client.Web,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName(Microsoft.SharePoint.Client.Web,System.String,System.String)
  id: ContentTypeExistsByName(Microsoft.SharePoint.Client.Web,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: ContentTypeExistsByName(Web, String, String)
  nameWithType: FieldAndContentTypeExtensions.ContentTypeExistsByName(Web, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName(Microsoft.SharePoint.Client.Web, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ContentTypeExistsByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1479
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nDoes content type exist in web\n"
  example: []
  syntax:
    content: public static bool ContentTypeExistsByName(this Web web, string listTitle, string contentTypeName)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to be processed
    - id: listTitle
      type: System.String
      description: Title of the list to be updated
    - id: contentTypeName
      type: System.String
      description: Name of the content type
    return:
      type: System.Boolean
      description: True if the content type exists, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContentTypeExistsByName(web As Web, listTitle As String, contentTypeName As String) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName(Microsoft.SharePoint.Client.List,System.String)
  id: ContentTypeExistsByName(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: ContentTypeExistsByName(List, String)
  nameWithType: FieldAndContentTypeExtensions.ContentTypeExistsByName(List, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ContentTypeExistsByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1501
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nDoes content type exist in list\n"
  example: []
  syntax:
    content: public static bool ContentTypeExistsByName(this List list, string contentTypeName)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to update
    - id: contentTypeName
      type: System.String
      description: Name of the content type
    return:
      type: System.Boolean
      description: True if the content type exists, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContentTypeExistsByName(list As List, contentTypeName As String) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLFile(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLFile(Microsoft.SharePoint.Client.Web,System.String)
  id: CreateContentTypeFromXMLFile(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateContentTypeFromXMLFile(Web, String)
  nameWithType: FieldAndContentTypeExtensions.CreateContentTypeFromXMLFile(Web, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLFile(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateContentTypeFromXMLFile
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1520
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreate a content type based on the classic feature framework structure.\n"
  example: []
  syntax:
    content: public static ContentType CreateContentTypeFromXMLFile(this Web web, string absolutePathToFile)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to operate against
    - id: absolutePathToFile
      type: System.String
      description: Absolute path to the xml location
    return:
      type: Microsoft.SharePoint.Client.ContentType
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateContentTypeFromXMLFile(web As Web, absolutePathToFile As String) As ContentType
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLString(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLString(Microsoft.SharePoint.Client.Web,System.String)
  id: CreateContentTypeFromXMLString(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateContentTypeFromXMLString(Web, String)
  nameWithType: FieldAndContentTypeExtensions.CreateContentTypeFromXMLString(Web, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLString(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateContentTypeFromXMLString
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1531
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreate a content type based on the classic feature framework structure.\n"
  example: []
  syntax:
    content: public static ContentType CreateContentTypeFromXMLString(this Web web, string xmlStructure)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to operate against
    - id: xmlStructure
      type: System.String
      description: XML structure in string format
    return:
      type: Microsoft.SharePoint.Client.ContentType
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateContentTypeFromXMLString(web As Web, xmlStructure As String) As ContentType
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXML(Microsoft.SharePoint.Client.Web,System.Xml.Linq.XDocument)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXML(Microsoft.SharePoint.Client.Web,System.Xml.Linq.XDocument)
  id: CreateContentTypeFromXML(Microsoft.SharePoint.Client.Web,System.Xml.Linq.XDocument)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateContentTypeFromXML(Web, XDocument)
  nameWithType: FieldAndContentTypeExtensions.CreateContentTypeFromXML(Web, XDocument)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXML(Microsoft.SharePoint.Client.Web, System.Xml.Linq.XDocument)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateContentTypeFromXML
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1542
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreate a content type based on the classic feature framework structure.\n"
  example: []
  syntax:
    content: public static ContentType CreateContentTypeFromXML(this Web web, XDocument xDocument)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to operate against
    - id: xDocument
      type: System.Xml.Linq.XDocument
      description: Actual XML document
    return:
      type: Microsoft.SharePoint.Client.ContentType
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateContentTypeFromXML(web As Web, xDocument As XDocument) As ContentType
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXML*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentType(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentType(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String)
  id: CreateContentType(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateContentType(Web, String, String, String)
  nameWithType: FieldAndContentTypeExtensions.CreateContentType(Web, String, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentType(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateContentType
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1646
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreate new content type to web\n"
  example: []
  syntax:
    content: public static ContentType CreateContentType(this Web web, string name, string id, string group)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: name
      type: System.String
      description: Name of the content type
    - id: id
      type: System.String
      description: Complete ID for the content type
    - id: group
      type: System.String
      description: Group for the content type
    return:
      type: Microsoft.SharePoint.Client.ContentType
      description: Returns newly created content type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateContentType(web As Web, name As String, id As String, group As String) As ContentType
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentType(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String,Microsoft.SharePoint.Client.ContentType)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentType(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String,Microsoft.SharePoint.Client.ContentType)
  id: CreateContentType(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String,Microsoft.SharePoint.Client.ContentType)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: CreateContentType(Web, String, String, String, String, ContentType)
  nameWithType: FieldAndContentTypeExtensions.CreateContentType(Web, String, String, String, String, ContentType)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentType(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.String, Microsoft.SharePoint.Client.ContentType)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateContentType
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1662
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreate new content type to web\n"
  example: []
  syntax:
    content: public static ContentType CreateContentType(this Web web, string name, string description, string id, string group, ContentType parentContentType = null)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: name
      type: System.String
      description: Name of the content type
    - id: description
      type: System.String
      description: Description for the content type
    - id: id
      type: System.String
      description: Complete ID for the content type
    - id: group
      type: System.String
      description: Group for the content type
    - id: parentContentType
      type: Microsoft.SharePoint.Client.ContentType
      description: Parent Content Type
    return:
      type: Microsoft.SharePoint.Client.ContentType
      description: The created content type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateContentType(web As Web, name As String, description As String, id As String, group As String, parentContentType As ContentType = Nothing) As ContentType
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeByName(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeByName(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})
  id: UpdateContentTypeByName(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: UpdateContentTypeByName(Web, String, String, String, String, String, String, String, String, Nullable<Boolean>)
  nameWithType: FieldAndContentTypeExtensions.UpdateContentTypeByName(Web, String, String, String, String, String, String, String, String, Nullable<Boolean>)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeByName(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UpdateContentTypeByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1698
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUpdate existing content type of a web\n"
  example: []
  syntax:
    content: public static ContentType UpdateContentTypeByName(this Web web, string name, string newContentTypeName = "", string description = "", string group = "", string displayFormUrl = "", string newFormUrl = "", string editFormUrl = "", string documentTemplate = "", bool? hidden = null)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: name
      type: System.String
      description: Name of the content type
    - id: newContentTypeName
      type: System.String
      description: Updated name of the content type
    - id: description
      type: System.String
      description: Description for the content type
    - id: group
      type: System.String
      description: Group for the content type
    - id: displayFormUrl
      type: System.String
      description: Display form url of the content type
    - id: newFormUrl
      type: System.String
      description: New form url of the content type
    - id: editFormUrl
      type: System.String
      description: Edit form url of the content type
    - id: documentTemplate
      type: System.String
      description: Document template of the content type
    - id: hidden
      type: System.Nullable{System.Boolean}
      description: Toggle value indicating whether content type should be hidden or not
    return:
      type: Microsoft.SharePoint.Client.ContentType
      description: The updated content type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateContentTypeByName(web As Web, name As String, newContentTypeName As String = "", description As String = "", group As String = "", displayFormUrl As String = "", newFormUrl As String = "", editFormUrl As String = "", documentTemplate As String = "", hidden As Boolean? = Nothing) As ContentType
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeByName*
  nameWithType.vb: FieldAndContentTypeExtensions.UpdateContentTypeByName(Web, String, String, String, String, String, String, String, String, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeByName(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Nullable(Of System.Boolean))
  name.vb: UpdateContentTypeByName(Web, String, String, String, String, String, String, String, String, Nullable(Of Boolean))
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})
  id: UpdateContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: UpdateContentTypeById(Web, String, String, String, String, String, String, String, String, Nullable<Boolean>)
  nameWithType: FieldAndContentTypeExtensions.UpdateContentTypeById(Web, String, String, String, String, String, String, String, String, Nullable<Boolean>)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeById(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UpdateContentTypeById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1728
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUpdate existing content type of a web\n"
  example: []
  syntax:
    content: public static ContentType UpdateContentTypeById(this Web web, string Id, string newContentTypeName = "", string description = "", string group = "", string displayFormUrl = "", string newFormUrl = "", string editFormUrl = "", string documentTemplate = "", bool? hidden = null)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: Id
      type: System.String
      description: Id of the content type
    - id: newContentTypeName
      type: System.String
      description: Updated name of the content type
    - id: description
      type: System.String
      description: Description for the content type
    - id: group
      type: System.String
      description: Group for the content type
    - id: displayFormUrl
      type: System.String
      description: Display form url of the content type
    - id: newFormUrl
      type: System.String
      description: New form url of the content type
    - id: editFormUrl
      type: System.String
      description: Edit form url of the content type
    - id: documentTemplate
      type: System.String
      description: Document template of the content type
    - id: hidden
      type: System.Nullable{System.Boolean}
      description: Toggle value indicating whether content type should be hidden or not
    return:
      type: Microsoft.SharePoint.Client.ContentType
      description: The updated content type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateContentTypeById(web As Web, Id As String, newContentTypeName As String = "", description As String = "", group As String = "", displayFormUrl As String = "", newFormUrl As String = "", editFormUrl As String = "", documentTemplate As String = "", hidden As Boolean? = Nothing) As ContentType
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeById*
  nameWithType.vb: FieldAndContentTypeExtensions.UpdateContentTypeById(Web, String, String, String, String, String, String, String, String, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeById(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Nullable(Of System.Boolean))
  name.vb: UpdateContentTypeById(Web, String, String, String, String, String, String, String, String, Nullable(Of Boolean))
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeByName(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeByName(Microsoft.SharePoint.Client.Web,System.String)
  id: DeleteContentTypeByName(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: DeleteContentTypeByName(Web, String)
  nameWithType: FieldAndContentTypeExtensions.DeleteContentTypeByName(Web, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeByName(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: DeleteContentTypeByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1802
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nDeletes a content type from the web by name\n"
  example: []
  syntax:
    content: public static void DeleteContentTypeByName(this Web web, string contentTypeName)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to delete the content type from
    - id: contentTypeName
      type: System.String
      description: Name of the content type to delete
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub DeleteContentTypeByName(web As Web, contentTypeName As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeById(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeById(Microsoft.SharePoint.Client.Web,System.String)
  id: DeleteContentTypeById(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: DeleteContentTypeById(Web, String)
  nameWithType: FieldAndContentTypeExtensions.DeleteContentTypeById(Web, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeById(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: DeleteContentTypeById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1824
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nDeletes a content type from the web by id\n"
  example: []
  syntax:
    content: public static void DeleteContentTypeById(this Web web, string contentTypeId)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to delete the content type from
    - id: contentTypeId
      type: System.String
      description: Id of the content type to delete
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub DeleteContentTypeById(web As Web, contentTypeId As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeByName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeByName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  id: GetContentTypeByName(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetContentTypeByName(Web, String, Boolean)
  nameWithType: FieldAndContentTypeExtensions.GetContentTypeByName(Web, String, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeByName(Microsoft.SharePoint.Client.Web, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetContentTypeByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1845
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturn content type by name\n"
  example: []
  syntax:
    content: public static ContentType GetContentTypeByName(this Web web, string contentTypeName, bool searchInSiteHierarchy = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to be processed
    - id: contentTypeName
      type: System.String
      description: Name of the content type
    - id: searchInSiteHierarchy
      type: System.Boolean
      description: Searches accross all content types in the site up to the root site
    return:
      type: Microsoft.SharePoint.Client.ContentType
      description: Content type object or null if was not found
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContentTypeByName(web As Web, contentTypeName As String, searchInSiteHierarchy As Boolean = False) As ContentType
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.ContentTypeCollection,System.Object}},System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.ContentTypeCollection,System.Object}},System.Boolean)
  id: GetContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.ContentTypeCollection,System.Object}},System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetContentTypeById(Web, String, Expression<Func<ContentTypeCollection, Object>>, Boolean)
  nameWithType: FieldAndContentTypeExtensions.GetContentTypeById(Web, String, Expression<Func<ContentTypeCollection, Object>>, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.ContentTypeCollection, System.Object>>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetContentTypeById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1867
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturn content type by Id\n"
  example: []
  syntax:
    content: public static ContentType GetContentTypeById(this Web web, string contentTypeId, Expression<Func<ContentTypeCollection, object>> retrievals, bool searchInSiteHierarchy = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to be processed
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type
    - id: retrievals
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.ContentTypeCollection,System.Object}}
      description: Specify additional data to load when retrieving the content types
    - id: searchInSiteHierarchy
      type: System.Boolean
      description: Searches accross all content types in the site up to the root site
    return:
      type: Microsoft.SharePoint.Client.ContentType
      description: Content type object or null if was not found
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContentTypeById(web As Web, contentTypeId As String, retrievals As Expression(Of Func(Of ContentTypeCollection, Object)), searchInSiteHierarchy As Boolean = False) As ContentType
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById*
  nameWithType.vb: FieldAndContentTypeExtensions.GetContentTypeById(Web, String, Expression(Of Func(Of ContentTypeCollection, Object)), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.ContentTypeCollection, System.Object)), System.Boolean)
  name.vb: GetContentTypeById(Web, String, Expression(Of Func(Of ContentTypeCollection, Object)), Boolean)
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  id: GetContentTypeById(Microsoft.SharePoint.Client.Web,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetContentTypeById(Web, String, Boolean)
  nameWithType: FieldAndContentTypeExtensions.GetContentTypeById(Web, String, Boolean)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById(Microsoft.SharePoint.Client.Web, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetContentTypeById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1902
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturn content type by Id\n"
  example: []
  syntax:
    content: public static ContentType GetContentTypeById(this Web web, string contentTypeId, bool searchInSiteHierarchy = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to be processed
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type
    - id: searchInSiteHierarchy
      type: System.Boolean
      description: Searches accross all content types in the site up to the root site
    return:
      type: Microsoft.SharePoint.Client.ContentType
      description: Content type object or null if was not found
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContentTypeById(web As Web, contentTypeId As String, searchInSiteHierarchy As Boolean = False) As ContentType
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeByName(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeByName(Microsoft.SharePoint.Client.List,System.String)
  id: GetContentTypeByName(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetContentTypeByName(List, String)
  nameWithType: FieldAndContentTypeExtensions.GetContentTypeByName(List, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeByName(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetContentTypeByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1913
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturn content type by name\n"
  example: []
  syntax:
    content: public static ContentType GetContentTypeByName(this List list, string contentTypeName)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to update
    - id: contentTypeName
      type: System.String
      description: Name of the content type
    return:
      type: Microsoft.SharePoint.Client.ContentType
      description: Content type object or null if was not found
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContentTypeByName(list As List, contentTypeName As String) As ContentType
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById(Microsoft.SharePoint.Client.List,System.String)
  id: GetContentTypeById(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetContentTypeById(List, String)
  nameWithType: FieldAndContentTypeExtensions.GetContentTypeById(List, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetContentTypeById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1933
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturn content type by Id\n"
  example: []
  syntax:
    content: public static ContentType GetContentTypeById(this List list, string contentTypeId)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to update
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type
    return:
      type: Microsoft.SharePoint.Client.ContentType
      description: Content type object or null if was not found
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContentTypeById(list As List, contentTypeId As String) As ContentType
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch(Microsoft.SharePoint.Client.ContentTypeCollection,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch(Microsoft.SharePoint.Client.ContentTypeCollection,System.String)
  id: BestMatch(Microsoft.SharePoint.Client.ContentTypeCollection,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: BestMatch(ContentTypeCollection, String)
  nameWithType: FieldAndContentTypeExtensions.BestMatch(ContentTypeCollection, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch(Microsoft.SharePoint.Client.ContentTypeCollection, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: BestMatch
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1962
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSearches for the content type with the closest match to the value of the specified content type ID. \nIf the search finds two matches, the shorter ID is returned. \n"
  example: []
  syntax:
    content: public static ContentTypeId BestMatch(this ContentTypeCollection contentTypes, string contentTypeId)
    parameters:
    - id: contentTypes
      type: Microsoft.SharePoint.Client.ContentTypeCollection
      description: Content type collection to search
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type to search
    return:
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: Content type Id object or null if was not found
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BestMatch(contentTypes As ContentTypeCollection, contentTypeId As String) As ContentTypeId
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch(Microsoft.SharePoint.Client.ContentTypeCollection,Microsoft.SharePoint.Client.ContentTypeId)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch(Microsoft.SharePoint.Client.ContentTypeCollection,Microsoft.SharePoint.Client.ContentTypeId)
  id: BestMatch(Microsoft.SharePoint.Client.ContentTypeCollection,Microsoft.SharePoint.Client.ContentTypeId)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: BestMatch(ContentTypeCollection, ContentTypeId)
  nameWithType: FieldAndContentTypeExtensions.BestMatch(ContentTypeCollection, ContentTypeId)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch(Microsoft.SharePoint.Client.ContentTypeCollection, Microsoft.SharePoint.Client.ContentTypeId)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: BestMatch
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 1982
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSearches for the content type with the closest match to the specified content type ID. \nIf the search finds two matches, the shorter ID is returned. \n"
  example: []
  syntax:
    content: public static ContentTypeId BestMatch(this ContentTypeCollection contentTypes, ContentTypeId contentTypeId)
    parameters:
    - id: contentTypes
      type: Microsoft.SharePoint.Client.ContentTypeCollection
      description: Content type collection to search
    - id: contentTypeId
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: Content type id for the content type to search
    return:
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: Content type Id object or null if was not found
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BestMatch(contentTypes As ContentTypeCollection, contentTypeId As ContentTypeId) As ContentTypeId
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch(Microsoft.SharePoint.Client.ContentTypeId,System.Collections.Generic.IEnumerable{Microsoft.SharePoint.Client.ContentType})
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch(Microsoft.SharePoint.Client.ContentTypeId,System.Collections.Generic.IEnumerable{Microsoft.SharePoint.Client.ContentType})
  id: BestMatch(Microsoft.SharePoint.Client.ContentTypeId,System.Collections.Generic.IEnumerable{Microsoft.SharePoint.Client.ContentType})
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: BestMatch(ContentTypeId, IEnumerable<ContentType>)
  nameWithType: FieldAndContentTypeExtensions.BestMatch(ContentTypeId, IEnumerable<ContentType>)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch(Microsoft.SharePoint.Client.ContentTypeId, System.Collections.Generic.IEnumerable<Microsoft.SharePoint.Client.ContentType>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: BestMatch
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2013
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSearches for the content type with the closest match to this content type id. \nIf the search finds two matches, the shorter ID is returned. \n"
  example: []
  syntax:
    content: public static ContentTypeId BestMatch(ContentTypeId contentTypeId, IEnumerable<ContentType> contentTypeCollection)
    parameters:
    - id: contentTypeId
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: Content type id for the content type to search
    - id: contentTypeCollection
      type: System.Collections.Generic.IEnumerable{Microsoft.SharePoint.Client.ContentType}
      description: Content type collection to search
    return:
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: Content type Id object or null if was not found
    content.vb: Public Shared Function BestMatch(contentTypeId As ContentTypeId, contentTypeCollection As IEnumerable(Of ContentType)) As ContentTypeId
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch*
  nameWithType.vb: FieldAndContentTypeExtensions.BestMatch(ContentTypeId, IEnumerable(Of ContentType))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch(Microsoft.SharePoint.Client.ContentTypeId, System.Collections.Generic.IEnumerable(Of Microsoft.SharePoint.Client.ContentType))
  name.vb: BestMatch(ContentTypeId, IEnumerable(Of ContentType))
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListByName(Microsoft.SharePoint.Client.Web,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListByName(Microsoft.SharePoint.Client.Web,System.String,System.String)
  id: RemoveContentTypeFromListByName(Microsoft.SharePoint.Client.Web,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: RemoveContentTypeFromListByName(Web, String, String)
  nameWithType: FieldAndContentTypeExtensions.RemoveContentTypeFromListByName(Web, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListByName(Microsoft.SharePoint.Client.Web, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RemoveContentTypeFromListByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2045
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemoves content type from list\n"
  example: []
  syntax:
    content: public static void RemoveContentTypeFromListByName(this Web web, string listTitle, string contentTypeName)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listTitle
      type: System.String
      description: Title of the list
    - id: contentTypeName
      type: System.String
      description: The name of the content type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RemoveContentTypeFromListByName(web As Web, listTitle As String, contentTypeName As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListByName(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListByName(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,System.String)
  id: RemoveContentTypeFromListByName(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: RemoveContentTypeFromListByName(Web, List, String)
  nameWithType: FieldAndContentTypeExtensions.RemoveContentTypeFromListByName(Web, List, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListByName(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RemoveContentTypeFromListByName
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2063
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemoves content type from list\n"
  example: []
  syntax:
    content: public static void RemoveContentTypeFromListByName(this Web web, List list, string contentTypeName)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The List
    - id: contentTypeName
      type: System.String
      description: The name of the content type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RemoveContentTypeFromListByName(web As Web, list As List, contentTypeName As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListById(Microsoft.SharePoint.Client.Web,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListById(Microsoft.SharePoint.Client.Web,System.String,System.String)
  id: RemoveContentTypeFromListById(Microsoft.SharePoint.Client.Web,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: RemoveContentTypeFromListById(Web, String, String)
  nameWithType: FieldAndContentTypeExtensions.RemoveContentTypeFromListById(Web, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListById(Microsoft.SharePoint.Client.Web, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RemoveContentTypeFromListById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2080
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemoves content type from a list\n"
  example: []
  syntax:
    content: public static void RemoveContentTypeFromListById(this Web web, string listTitle, string contentTypeId)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listTitle
      type: System.String
      description: Title of the list
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RemoveContentTypeFromListById(web As Web, listTitle As String, contentTypeId As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListById(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListById(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,System.String)
  id: RemoveContentTypeFromListById(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: RemoveContentTypeFromListById(Web, List, String)
  nameWithType: FieldAndContentTypeExtensions.RemoveContentTypeFromListById(Web, List, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListById(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RemoveContentTypeFromListById
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2095
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemoves content type from a list\n"
  example: []
  syntax:
    content: public static void RemoveContentTypeFromListById(this Web web, List list, string contentTypeId)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The List
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RemoveContentTypeFromListById(web As Web, list As List, contentTypeId As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType)
  id: RemoveContentTypeFromList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentType)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: RemoveContentTypeFromList(Web, List, ContentType)
  nameWithType: FieldAndContentTypeExtensions.RemoveContentTypeFromList(Web, List, ContentType)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromList(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.List, Microsoft.SharePoint.Client.ContentType)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RemoveContentTypeFromList
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2110
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemoves content type from a list\n"
  example: []
  syntax:
    content: public static void RemoveContentTypeFromList(this Web web, List list, ContentType contentType)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The List
    - id: contentType
      type: Microsoft.SharePoint.Client.ContentType
      description: The Content Type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RemoveContentTypeFromList(web As Web, list As List, contentType As ContentType)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentType(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentType(Microsoft.SharePoint.Client.List,System.String)
  id: SetDefaultContentType(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetDefaultContentType(List, String)
  nameWithType: FieldAndContentTypeExtensions.SetDefaultContentType(List, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentType(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetDefaultContentType
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2130
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSets the default content type in a list.\n"
  remarks: "\nContent type specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">contentTypeId</code> needs to be\nthe id of the actual content type in the list and not it&apos;s parent.\n"
  example: []
  syntax:
    content: public static void SetDefaultContentType(this List list, string contentTypeId)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: Target list containing the content type
    - id: contentTypeId
      type: System.String
      description: Id of the list content type to make default.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetDefaultContentType(list As List, contentTypeId As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentType(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentTypeId)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentType(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentTypeId)
  id: SetDefaultContentType(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.ContentTypeId)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetDefaultContentType(List, ContentTypeId)
  nameWithType: FieldAndContentTypeExtensions.SetDefaultContentType(List, ContentTypeId)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentType(Microsoft.SharePoint.Client.List, Microsoft.SharePoint.Client.ContentTypeId)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetDefaultContentType
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2147
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSets the default content type in a list.\n"
  remarks: "\nContent type specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">contentTypeId</code> needs to be\nthe id of the actual content type in the list and not it&apos;s parent.\n"
  example: []
  syntax:
    content: public static void SetDefaultContentType(this List list, ContentTypeId contentTypeId)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: Target list containing the content type
    - id: contentTypeId
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: Id of the list content type to make default.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetDefaultContentType(list As List, contentTypeId As ContentTypeId)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetIsAllowedInContentTypeOrder(Microsoft.SharePoint.Client.ContentType)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetIsAllowedInContentTypeOrder(Microsoft.SharePoint.Client.ContentType)
  id: GetIsAllowedInContentTypeOrder(Microsoft.SharePoint.Client.ContentType)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetIsAllowedInContentTypeOrder(ContentType)
  nameWithType: FieldAndContentTypeExtensions.GetIsAllowedInContentTypeOrder(ContentType)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetIsAllowedInContentTypeOrder(Microsoft.SharePoint.Client.ContentType)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetIsAllowedInContentTypeOrder
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2216
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if the content type is allowed to be set in the content type order.\n"
  example: []
  syntax:
    content: public static bool GetIsAllowedInContentTypeOrder(this ContentType contentType)
    parameters:
    - id: contentType
      type: Microsoft.SharePoint.Client.ContentType
      description: Target content type to check
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIsAllowedInContentTypeOrder(contentType As ContentType) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetIsAllowedInContentTypeOrder*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ShowContentTypesInNewButton(Microsoft.SharePoint.Client.List,System.Collections.Generic.IList{Microsoft.SharePoint.Client.ContentType})
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ShowContentTypesInNewButton(Microsoft.SharePoint.Client.List,System.Collections.Generic.IList{Microsoft.SharePoint.Client.ContentType})
  id: ShowContentTypesInNewButton(Microsoft.SharePoint.Client.List,System.Collections.Generic.IList{Microsoft.SharePoint.Client.ContentType})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: ShowContentTypesInNewButton(List, IList<ContentType>)
  nameWithType: FieldAndContentTypeExtensions.ShowContentTypesInNewButton(List, IList<ContentType>)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ShowContentTypesInNewButton(Microsoft.SharePoint.Client.List, System.Collections.Generic.IList<Microsoft.SharePoint.Client.ContentType>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ShowContentTypesInNewButton
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2239
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nMakes the specified content types visible in the list new button. Existing visibility and content type order is not altered.\n"
  remarks: "\nContent types specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">contentTypes</code> needs to be the actual content type in the list and not it&apos;s parent.\n"
  example: []
  syntax:
    content: public static void ShowContentTypesInNewButton(this List list, IList<ContentType> contentTypes)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: Target list containing the content types
    - id: contentTypes
      type: System.Collections.Generic.IList{Microsoft.SharePoint.Client.ContentType}
      description: List content types to make visible
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ShowContentTypesInNewButton(list As List, contentTypes As IList(Of ContentType))
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ShowContentTypesInNewButton*
  nameWithType.vb: FieldAndContentTypeExtensions.ShowContentTypesInNewButton(List, IList(Of ContentType))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ShowContentTypesInNewButton(Microsoft.SharePoint.Client.List, System.Collections.Generic.IList(Of Microsoft.SharePoint.Client.ContentType))
  name.vb: ShowContentTypesInNewButton(List, IList(Of ContentType))
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.HideContentTypesInNewButton(Microsoft.SharePoint.Client.List,System.Collections.Generic.IList{Microsoft.SharePoint.Client.ContentType})
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.HideContentTypesInNewButton(Microsoft.SharePoint.Client.List,System.Collections.Generic.IList{Microsoft.SharePoint.Client.ContentType})
  id: HideContentTypesInNewButton(Microsoft.SharePoint.Client.List,System.Collections.Generic.IList{Microsoft.SharePoint.Client.ContentType})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: HideContentTypesInNewButton(List, IList<ContentType>)
  nameWithType: FieldAndContentTypeExtensions.HideContentTypesInNewButton(List, IList<ContentType>)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.HideContentTypesInNewButton(Microsoft.SharePoint.Client.List, System.Collections.Generic.IList<Microsoft.SharePoint.Client.ContentType>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: HideContentTypesInNewButton
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2277
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nHides the specified content types in the list new button. Existing visibility and content type order is not altered.\n"
  remarks: "\nContent types specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">contentTypes</code> needs to be the actual content type in the list and not it&apos;s parent.\n"
  example: []
  syntax:
    content: public static void HideContentTypesInNewButton(this List list, IList<ContentType> contentTypes)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: Target list containing the content types
    - id: contentTypes
      type: System.Collections.Generic.IList{Microsoft.SharePoint.Client.ContentType}
      description: Content types to hide
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub HideContentTypesInNewButton(list As List, contentTypes As IList(Of ContentType))
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.HideContentTypesInNewButton*
  nameWithType.vb: FieldAndContentTypeExtensions.HideContentTypesInNewButton(List, IList(Of ContentType))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.HideContentTypesInNewButton(Microsoft.SharePoint.Client.List, System.Collections.Generic.IList(Of Microsoft.SharePoint.Client.ContentType))
  name.vb: HideContentTypesInNewButton(List, IList(Of ContentType))
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsChildOf(Microsoft.SharePoint.Client.ContentTypeId,Microsoft.SharePoint.Client.ContentTypeId)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsChildOf(Microsoft.SharePoint.Client.ContentTypeId,Microsoft.SharePoint.Client.ContentTypeId)
  id: IsChildOf(Microsoft.SharePoint.Client.ContentTypeId,Microsoft.SharePoint.Client.ContentTypeId)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: IsChildOf(ContentTypeId, ContentTypeId)
  nameWithType: FieldAndContentTypeExtensions.IsChildOf(ContentTypeId, ContentTypeId)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsChildOf(Microsoft.SharePoint.Client.ContentTypeId, Microsoft.SharePoint.Client.ContentTypeId)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: IsChildOf
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2336
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCalculates if a content type id is a child of another content type id\n"
  example: []
  syntax:
    content: public static bool IsChildOf(this ContentTypeId current, ContentTypeId contentTypeId)
    parameters:
    - id: current
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: Parent content type id
    - id: contentTypeId
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: Content type id to check
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsChildOf(current As ContentTypeId, contentTypeId As ContentTypeId) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsChildOf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsParentOf(Microsoft.SharePoint.Client.ContentTypeId,Microsoft.SharePoint.Client.ContentTypeId)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsParentOf(Microsoft.SharePoint.Client.ContentTypeId,Microsoft.SharePoint.Client.ContentTypeId)
  id: IsParentOf(Microsoft.SharePoint.Client.ContentTypeId,Microsoft.SharePoint.Client.ContentTypeId)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: IsParentOf(ContentTypeId, ContentTypeId)
  nameWithType: FieldAndContentTypeExtensions.IsParentOf(ContentTypeId, ContentTypeId)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsParentOf(Microsoft.SharePoint.Client.ContentTypeId, Microsoft.SharePoint.Client.ContentTypeId)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: IsParentOf
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2350
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCalculates if a content type id is a parent of another content type id\n"
  example: []
  syntax:
    content: public static bool IsParentOf(this ContentTypeId current, ContentTypeId contentTypeId)
    parameters:
    - id: current
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: Child content type id
    - id: contentTypeId
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: Content type id to check
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsParentOf(current As ContentTypeId, contentTypeId As ContentTypeId) As Boolean
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsParentOf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetParentIdValue(Microsoft.SharePoint.Client.ContentTypeId)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetParentIdValue(Microsoft.SharePoint.Client.ContentTypeId)
  id: GetParentIdValue(Microsoft.SharePoint.Client.ContentTypeId)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: GetParentIdValue(ContentTypeId)
  nameWithType: FieldAndContentTypeExtensions.GetParentIdValue(ContentTypeId)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetParentIdValue(Microsoft.SharePoint.Client.ContentTypeId)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetParentIdValue
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2357
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCalculates the parent content type id\n"
  example: []
  syntax:
    content: public static string GetParentIdValue(this ContentTypeId contentTypeId)
    parameters:
    - id: contentTypeId
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: Content type id to calculate the parent content type id from
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetParentIdValue(contentTypeId As ContentTypeId) As String
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetParentIdValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ReorderContentTypes(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ReorderContentTypes(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{System.String})
  id: ReorderContentTypes(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{System.String})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: ReorderContentTypes(List, IEnumerable<String>)
  nameWithType: FieldAndContentTypeExtensions.ReorderContentTypes(List, IEnumerable<String>)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ReorderContentTypes(Microsoft.SharePoint.Client.List, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ReorderContentTypes
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2384
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReorders content types on the list. The first one in the list is the default item.\nAny items left out from the list will still be on the content type, but will not be visible on the new button.\n"
  example: []
  syntax:
    content: public static void ReorderContentTypes(this List list, IEnumerable<string> contentTypeNamesOrIds)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: Target list containing the content types
    - id: contentTypeNamesOrIds
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Content type names or ids to sort.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ReorderContentTypes(list As List, contentTypeNamesOrIds As IEnumerable(Of String))
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ReorderContentTypes*
  nameWithType.vb: FieldAndContentTypeExtensions.ReorderContentTypes(List, IEnumerable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ReorderContentTypes(Microsoft.SharePoint.Client.List, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: ReorderContentTypes(List, IEnumerable(Of String))
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String)
  id: SetLocalizationForContentType(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetLocalizationForContentType(Web, String, String, String, String)
  nameWithType: FieldAndContentTypeExtensions.SetLocalizationForContentType(Web, String, String, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetLocalizationForContentType
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2426
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet localized labels for content type\n"
  example: []
  syntax:
    content: public static void SetLocalizationForContentType(this Web web, string contentTypeName, string cultureName, string nameResource, string descriptionResource)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to operate on
    - id: contentTypeName
      type: System.String
      description: Name of the content type
    - id: cultureName
      type: System.String
      description: Culture for the localization (en-es, nl-be, fi-fi,...)
    - id: nameResource
      type: System.String
      description: Localized value for the Name property
    - id: descriptionResource
      type: System.String
      description: Localized value for the Description property
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetLocalizationForContentType(web As Web, contentTypeName As String, cultureName As String, nameResource As String, descriptionResource As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType(Microsoft.SharePoint.Client.List,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType(Microsoft.SharePoint.Client.List,System.String,System.String,System.String,System.String)
  id: SetLocalizationForContentType(Microsoft.SharePoint.Client.List,System.String,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetLocalizationForContentType(List, String, String, String, String)
  nameWithType: FieldAndContentTypeExtensions.SetLocalizationForContentType(List, String, String, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType(Microsoft.SharePoint.Client.List, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetLocalizationForContentType
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2440
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet localized labels for content type\n"
  example: []
  syntax:
    content: public static void SetLocalizationForContentType(this List list, string contentTypeId, string cultureName, string nameResource, string descriptionResource)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to update
    - id: contentTypeId
      type: System.String
      description: Complete ID for the content type
    - id: cultureName
      type: System.String
      description: Culture for the localization (en-es, nl-be, fi-fi,...)
    - id: nameResource
      type: System.String
      description: Localized value for the Name property
    - id: descriptionResource
      type: System.String
      description: Localized value for the Description property
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetLocalizationForContentType(list As List, contentTypeId As String, cultureName As String, nameResource As String, descriptionResource As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType(Microsoft.SharePoint.Client.ContentType,System.String,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType(Microsoft.SharePoint.Client.ContentType,System.String,System.String,System.String)
  id: SetLocalizationForContentType(Microsoft.SharePoint.Client.ContentType,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetLocalizationForContentType(ContentType, String, String, String)
  nameWithType: FieldAndContentTypeExtensions.SetLocalizationForContentType(ContentType, String, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType(Microsoft.SharePoint.Client.ContentType, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetLocalizationForContentType
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2459
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet localized labels for content type\n"
  example: []
  syntax:
    content: public static void SetLocalizationForContentType(this ContentType contentType, string cultureName, string nameResource, string descriptionResource)
    parameters:
    - id: contentType
      type: Microsoft.SharePoint.Client.ContentType
      description: Name of the content type
    - id: cultureName
      type: System.String
      description: Culture for the localization (en-es, nl-be, fi-fi,...)
    - id: nameResource
      type: System.String
      description: Localized value for the Name property
    - id: descriptionResource
      type: System.String
      description: Localized value for the Description property
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetLocalizationForContentType(contentType As ContentType, cultureName As String, nameResource As String, descriptionResource As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Web,System.Guid,System.String,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Web,System.Guid,System.String,System.String,System.String)
  id: SetLocalizationForField(Microsoft.SharePoint.Client.Web,System.Guid,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetLocalizationForField(Web, Guid, String, String, String)
  nameWithType: FieldAndContentTypeExtensions.SetLocalizationForField(Web, Guid, String, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Web, System.Guid, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetLocalizationForField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2482
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet localized labels for field\n"
  example: []
  syntax:
    content: public static void SetLocalizationForField(this Web web, Guid siteColumnId, string cultureName, string titleResource, string descriptionResource)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to operate on
    - id: siteColumnId
      type: System.Guid
      description: Guid with the site column ID
    - id: cultureName
      type: System.String
      description: Culture for the localization (en-es, nl-be, fi-fi,...)
    - id: titleResource
      type: System.String
      description: Localized value for the Title property
    - id: descriptionResource
      type: System.String
      description: Localized value for the Description property
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetLocalizationForField(web As Web, siteColumnId As Guid, cultureName As String, titleResource As String, descriptionResource As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String)
  id: SetLocalizationForField(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetLocalizationForField(Web, String, String, String, String)
  nameWithType: FieldAndContentTypeExtensions.SetLocalizationForField(Web, String, String, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetLocalizationForField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2497
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet localized labels for field\n"
  example: []
  syntax:
    content: public static void SetLocalizationForField(this Web web, string siteColumnName, string cultureName, string titleResource, string descriptionResource)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to operate on
    - id: siteColumnName
      type: System.String
      description: Name of the site column
    - id: cultureName
      type: System.String
      description: Culture for the localization (en-es, nl-be, fi-fi,...)
    - id: titleResource
      type: System.String
      description: Localized value for the Title property
    - id: descriptionResource
      type: System.String
      description: Localized value for the Description property
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetLocalizationForField(web As Web, siteColumnName As String, cultureName As String, titleResource As String, descriptionResource As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Field,System.String,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Field,System.String,System.String,System.String)
  id: SetLocalizationForField(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Field,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetLocalizationForField(Web, Field, String, String, String)
  nameWithType: FieldAndContentTypeExtensions.SetLocalizationForField(Web, Field, String, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.Field, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetLocalizationForField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2512
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet localized labels for field\n"
  example: []
  syntax:
    content: public static void SetLocalizationForField(this Web web, Field siteColumn, string cultureName, string titleResource, string descriptionResource)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to operate on
    - id: siteColumn
      type: Microsoft.SharePoint.Client.Field
      description: Site column to localize
    - id: cultureName
      type: System.String
      description: Culture for the localization (en-es, nl-be, fi-fi,...)
    - id: titleResource
      type: System.String
      description: Localized value for the Title property
    - id: descriptionResource
      type: System.String
      description: Localized value for the Description property
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetLocalizationForField(web As Web, siteColumn As Field, cultureName As String, titleResource As String, descriptionResource As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.List,System.Guid,System.String,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.List,System.Guid,System.String,System.String,System.String)
  id: SetLocalizationForField(Microsoft.SharePoint.Client.List,System.Guid,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetLocalizationForField(List, Guid, String, String, String)
  nameWithType: FieldAndContentTypeExtensions.SetLocalizationForField(List, Guid, String, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.List, System.Guid, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetLocalizationForField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2525
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet localized labels for field\n"
  example: []
  syntax:
    content: public static void SetLocalizationForField(this List list, Guid siteColumnId, string cultureName, string titleResource, string descriptionResource)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to update
    - id: siteColumnId
      type: System.Guid
      description: Guid of the site column ID
    - id: cultureName
      type: System.String
      description: Culture for the localization (en-es, nl-be, fi-fi,...)
    - id: titleResource
      type: System.String
      description: Localized value for the Title property
    - id: descriptionResource
      type: System.String
      description: Localized value for the Description property
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetLocalizationForField(list As List, siteColumnId As Guid, cultureName As String, titleResource As String, descriptionResource As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.List,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.List,System.String,System.String,System.String,System.String)
  id: SetLocalizationForField(Microsoft.SharePoint.Client.List,System.String,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetLocalizationForField(List, String, String, String, String)
  nameWithType: FieldAndContentTypeExtensions.SetLocalizationForField(List, String, String, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.List, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetLocalizationForField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2540
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet localized labels for field\n"
  example: []
  syntax:
    content: public static void SetLocalizationForField(this List list, string siteColumnName, string cultureName, string titleResource, string descriptionResource)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to update
    - id: siteColumnName
      type: System.String
      description: Name of the site column
    - id: cultureName
      type: System.String
      description: Culture for the localization (en-es, nl-be, fi-fi,...)
    - id: titleResource
      type: System.String
      description: Localized value for the Title property
    - id: descriptionResource
      type: System.String
      description: Localized value for the Description property
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetLocalizationForField(list As List, siteColumnName As String, cultureName As String, titleResource As String, descriptionResource As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Field,System.String,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Field,System.String,System.String,System.String)
  id: SetLocalizationForField(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Field,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetLocalizationForField(List, Field, String, String, String)
  nameWithType: FieldAndContentTypeExtensions.SetLocalizationForField(List, Field, String, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.List, Microsoft.SharePoint.Client.Field, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetLocalizationForField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2555
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet localized labels for field\n"
  example: []
  syntax:
    content: public static void SetLocalizationForField(this List list, Field siteColumn, string cultureName, string titleResource, string descriptionResource)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to update
    - id: siteColumn
      type: Microsoft.SharePoint.Client.Field
      description: Site column to update
    - id: cultureName
      type: System.String
      description: Culture for the localization (en-es, nl-be, fi-fi,...)
    - id: titleResource
      type: System.String
      description: Localized value for the Title property
    - id: descriptionResource
      type: System.String
      description: Localized value for the Description property
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetLocalizationForField(list As List, siteColumn As Field, cultureName As String, titleResource As String, descriptionResource As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Field,System.String,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Field,System.String,System.String,System.String)
  id: SetLocalizationForField(Microsoft.SharePoint.Client.Field,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions
  langs:
  - csharp
  - vb
  name: SetLocalizationForField(Field, String, String, String)
  nameWithType: FieldAndContentTypeExtensions.SetLocalizationForField(Field, String, String, String)
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField(Microsoft.SharePoint.Client.Field, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetLocalizationForField
    path: ../src/lib/PnP.Framework/Extensions/FieldAndContentTypeExtensions.cs
    startLine: 2567
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet localized labels for field\n"
  example: []
  syntax:
    content: public static void SetLocalizationForField(this Field field, string cultureName, string titleResource, string descriptionResource)
    parameters:
    - id: field
      type: Microsoft.SharePoint.Client.Field
      description: Field to update
    - id: cultureName
      type: System.String
      description: Culture for the localization (en-es, nl-be, fi-fi,...)
    - id: titleResource
      type: System.String
      description: Localized value for the Title property
    - id: descriptionResource
      type: System.String
      description: Localized value for the Description property
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetLocalizationForField(field As Field, cultureName As String, titleResource As String, descriptionResource As String)
  overload: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.SharePoint.Client
  commentId: N:Microsoft.SharePoint.Client
  name: Microsoft.SharePoint.Client
  nameWithType: Microsoft.SharePoint.Client
  fullName: Microsoft.SharePoint.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList
  name: SetDefaultContentTypeToList
  nameWithType: FieldAndContentTypeExtensions.SetDefaultContentTypeToList
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentTypeToList
- uid: Microsoft.SharePoint.Client.List
  commentId: T:Microsoft.SharePoint.Client.List
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: List
  nameWithType: List
  fullName: Microsoft.SharePoint.Client.List
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.SharePoint.Client.ContentType
  commentId: T:Microsoft.SharePoint.Client.ContentType
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: ContentType
  nameWithType: ContentType
  fullName: Microsoft.SharePoint.Client.ContentType
- uid: Microsoft.SharePoint.Client.Web
  commentId: T:Microsoft.SharePoint.Client.Web
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: Web
  nameWithType: Web
  fullName: Microsoft.SharePoint.Client.Web
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetAllowDeletion*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetAllowDeletion
  name: SetAllowDeletion
  nameWithType: FieldAndContentTypeExtensions.SetAllowDeletion
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetAllowDeletion
- uid: Microsoft.SharePoint.Client.Field
  commentId: T:Microsoft.SharePoint.Client.Field
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: Field
  nameWithType: Field
  fullName: Microsoft.SharePoint.Client.Field
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetAllowDeletion*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetAllowDeletion
  name: GetAllowDeletion
  nameWithType: FieldAndContentTypeExtensions.GetAllowDeletion
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetAllowDeletion
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField
  name: CreateField
  nameWithType: FieldAndContentTypeExtensions.CreateField
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateField
- uid: PnP.Framework.Entities.FieldCreationInformation
  commentId: T:PnP.Framework.Entities.FieldCreationInformation
  parent: PnP.Framework.Entities
  name: FieldCreationInformation
  nameWithType: FieldCreationInformation
  fullName: PnP.Framework.Entities.FieldCreationInformation
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: PnP.Framework.Entities
  commentId: N:PnP.Framework.Entities
  name: PnP.Framework.Entities
  nameWithType: PnP.Framework.Entities
  fullName: PnP.Framework.Entities
- uid: '{TField}'
  commentId: '!:TField'
  definition: TField
  name: TField
  nameWithType: TField
  fullName: TField
- uid: TField
  name: TField
  nameWithType: TField
  fullName: TField
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldByInternalName*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldByInternalName
  name: RemoveFieldByInternalName
  nameWithType: FieldAndContentTypeExtensions.RemoveFieldByInternalName
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldByInternalName
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldById*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldById
  name: RemoveFieldById
  nameWithType: FieldAndContentTypeExtensions.RemoveFieldById
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveFieldById
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLFile*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLFile
  name: CreateFieldsFromXMLFile
  nameWithType: FieldAndContentTypeExtensions.CreateFieldsFromXMLFile
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLFile
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLString*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLString
  name: CreateFieldsFromXMLString
  nameWithType: FieldAndContentTypeExtensions.CreateFieldsFromXMLString
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXMLString
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXML*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXML
  name: CreateFieldsFromXML
  nameWithType: FieldAndContentTypeExtensions.CreateFieldsFromXML
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateFieldsFromXML
- uid: System.Xml.Linq.XDocument
  commentId: T:System.Xml.Linq.XDocument
  parent: System.Xml.Linq
  isExternal: true
  name: XDocument
  nameWithType: XDocument
  fullName: System.Xml.Linq.XDocument
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  isExternal: true
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById
  name: FieldExistsById
  nameWithType: FieldAndContentTypeExtensions.FieldExistsById
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsById
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById
  name: GetFieldById
  nameWithType: FieldAndContentTypeExtensions.GetFieldById
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldById
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName
  name: GetFieldByInternalName
  nameWithType: FieldAndContentTypeExtensions.GetFieldByInternalName
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByInternalName
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName
  name: GetFieldByName
  nameWithType: FieldAndContentTypeExtensions.GetFieldByName
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFieldByName
- uid: Microsoft.SharePoint.Client.FieldCollection
  commentId: T:Microsoft.SharePoint.Client.FieldCollection
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: FieldCollection
  nameWithType: FieldCollection
  fullName: Microsoft.SharePoint.Client.FieldCollection
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByName*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByName
  name: FieldExistsByName
  nameWithType: FieldAndContentTypeExtensions.FieldExistsByName
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByName
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByNameInContentType*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByNameInContentType
  name: FieldExistsByNameInContentType
  nameWithType: FieldAndContentTypeExtensions.FieldExistsByNameInContentType
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FieldExistsByNameInContentType
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetJsLinkCustomizations*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetJsLinkCustomizations
  name: SetJsLinkCustomizations
  nameWithType: FieldAndContentTypeExtensions.SetJsLinkCustomizations
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetJsLinkCustomizations
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FormatFieldXml*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FormatFieldXml
  name: FormatFieldXml
  nameWithType: FieldAndContentTypeExtensions.FormatFieldXml
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.FormatFieldXml
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFields*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFields
  name: GetFields
  nameWithType: FieldAndContentTypeExtensions.GetFields
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetFields
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{Microsoft.SharePoint.Client.Field}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.SharePoint.Client.Field}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Field>
  nameWithType: IEnumerable<Field>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.SharePoint.Client.Field>
  nameWithType.vb: IEnumerable(Of Field)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.SharePoint.Client.Field)
  name.vb: IEnumerable(Of Field)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SharePoint.Client.Field
    name: Field
    nameWithType: Field
    fullName: Microsoft.SharePoint.Client.Field
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SharePoint.Client.Field
    name: Field
    nameWithType: Field
    fullName: Microsoft.SharePoint.Client.Field
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetDefaultColumnValueFromField*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetDefaultColumnValueFromField
  name: GetDefaultColumnValueFromField
  nameWithType: FieldAndContentTypeExtensions.GetDefaultColumnValueFromField
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetDefaultColumnValueFromField
- uid: Microsoft.SharePoint.Client.ClientContext
  commentId: T:Microsoft.SharePoint.Client.ClientContext
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: ClientContext
  nameWithType: ClientContext
  fullName: Microsoft.SharePoint.Client.ClientContext
- uid: PnP.Framework.Entities.IDefaultColumnValue
  commentId: T:PnP.Framework.Entities.IDefaultColumnValue
  parent: PnP.Framework.Entities
  name: IDefaultColumnValue
  nameWithType: IDefaultColumnValue
  fullName: PnP.Framework.Entities.IDefaultColumnValue
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListById*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListById
  name: AddContentTypeToListById
  nameWithType: FieldAndContentTypeExtensions.AddContentTypeToListById
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListById
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListByName*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListByName
  name: AddContentTypeToListByName
  nameWithType: FieldAndContentTypeExtensions.AddContentTypeToListByName
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToListByName
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToList*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToList
  name: AddContentTypeToList
  nameWithType: FieldAndContentTypeExtensions.AddContentTypeToList
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddContentTypeToList
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldById*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldById
  name: AddFieldById
  nameWithType: FieldAndContentTypeExtensions.AddFieldById
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldById
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldByName*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldByName
  name: AddFieldByName
  nameWithType: FieldAndContentTypeExtensions.AddFieldByName
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldByName
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeById*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeById
  name: AddFieldToContentTypeById
  nameWithType: FieldAndContentTypeExtensions.AddFieldToContentTypeById
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeById
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeByName*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeByName
  name: AddFieldToContentTypeByName
  nameWithType: FieldAndContentTypeExtensions.AddFieldToContentTypeByName
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentTypeByName
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentType*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentType
  name: AddFieldToContentType
  nameWithType: FieldAndContentTypeExtensions.AddFieldToContentType
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.AddFieldToContentType
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatchContentTypeId*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatchContentTypeId
  name: BestMatchContentTypeId
  nameWithType: FieldAndContentTypeExtensions.BestMatchContentTypeId
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatchContentTypeId
- uid: Microsoft.SharePoint.Client.ContentTypeId
  commentId: T:Microsoft.SharePoint.Client.ContentTypeId
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: ContentTypeId
  nameWithType: ContentTypeId
  fullName: Microsoft.SharePoint.Client.ContentTypeId
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById
  name: ContentTypeExistsById
  nameWithType: FieldAndContentTypeExtensions.ContentTypeExistsById
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsById
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName
  name: ContentTypeExistsByName
  nameWithType: FieldAndContentTypeExtensions.ContentTypeExistsByName
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ContentTypeExistsByName
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLFile*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLFile
  name: CreateContentTypeFromXMLFile
  nameWithType: FieldAndContentTypeExtensions.CreateContentTypeFromXMLFile
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLFile
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLString*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLString
  name: CreateContentTypeFromXMLString
  nameWithType: FieldAndContentTypeExtensions.CreateContentTypeFromXMLString
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXMLString
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXML*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXML
  name: CreateContentTypeFromXML
  nameWithType: FieldAndContentTypeExtensions.CreateContentTypeFromXML
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentTypeFromXML
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentType*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentType
  name: CreateContentType
  nameWithType: FieldAndContentTypeExtensions.CreateContentType
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.CreateContentType
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeByName*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeByName
  name: UpdateContentTypeByName
  nameWithType: FieldAndContentTypeExtensions.UpdateContentTypeByName
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeByName
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeById*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeById
  name: UpdateContentTypeById
  nameWithType: FieldAndContentTypeExtensions.UpdateContentTypeById
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.UpdateContentTypeById
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeByName*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeByName
  name: DeleteContentTypeByName
  nameWithType: FieldAndContentTypeExtensions.DeleteContentTypeByName
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeByName
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeById*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeById
  name: DeleteContentTypeById
  nameWithType: FieldAndContentTypeExtensions.DeleteContentTypeById
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.DeleteContentTypeById
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeByName*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeByName
  name: GetContentTypeByName
  nameWithType: FieldAndContentTypeExtensions.GetContentTypeByName
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeByName
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById
  name: GetContentTypeById
  nameWithType: FieldAndContentTypeExtensions.GetContentTypeById
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetContentTypeById
- uid: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.ContentTypeCollection,System.Object}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.ContentTypeCollection,System.Object}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<ContentTypeCollection, Object>>
  nameWithType: Expression<Func<ContentTypeCollection, Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.ContentTypeCollection, System.Object>>
  nameWithType.vb: Expression(Of Func(Of ContentTypeCollection, Object))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.ContentTypeCollection, System.Object))
  name.vb: Expression(Of Func(Of ContentTypeCollection, Object))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SharePoint.Client.ContentTypeCollection
    name: ContentTypeCollection
    nameWithType: ContentTypeCollection
    fullName: Microsoft.SharePoint.Client.ContentTypeCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SharePoint.Client.ContentTypeCollection
    name: ContentTypeCollection
    nameWithType: ContentTypeCollection
    fullName: Microsoft.SharePoint.Client.ContentTypeCollection
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch
  name: BestMatch
  nameWithType: FieldAndContentTypeExtensions.BestMatch
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.BestMatch
- uid: Microsoft.SharePoint.Client.ContentTypeCollection
  commentId: T:Microsoft.SharePoint.Client.ContentTypeCollection
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: ContentTypeCollection
  nameWithType: ContentTypeCollection
  fullName: Microsoft.SharePoint.Client.ContentTypeCollection
- uid: System.Collections.Generic.IEnumerable{Microsoft.SharePoint.Client.ContentType}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.SharePoint.Client.ContentType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ContentType>
  nameWithType: IEnumerable<ContentType>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.SharePoint.Client.ContentType>
  nameWithType.vb: IEnumerable(Of ContentType)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.SharePoint.Client.ContentType)
  name.vb: IEnumerable(Of ContentType)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SharePoint.Client.ContentType
    name: ContentType
    nameWithType: ContentType
    fullName: Microsoft.SharePoint.Client.ContentType
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SharePoint.Client.ContentType
    name: ContentType
    nameWithType: ContentType
    fullName: Microsoft.SharePoint.Client.ContentType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListByName*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListByName
  name: RemoveContentTypeFromListByName
  nameWithType: FieldAndContentTypeExtensions.RemoveContentTypeFromListByName
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListByName
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListById*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListById
  name: RemoveContentTypeFromListById
  nameWithType: FieldAndContentTypeExtensions.RemoveContentTypeFromListById
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromListById
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromList*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromList
  name: RemoveContentTypeFromList
  nameWithType: FieldAndContentTypeExtensions.RemoveContentTypeFromList
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.RemoveContentTypeFromList
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentType*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentType
  name: SetDefaultContentType
  nameWithType: FieldAndContentTypeExtensions.SetDefaultContentType
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetDefaultContentType
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetIsAllowedInContentTypeOrder*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetIsAllowedInContentTypeOrder
  name: GetIsAllowedInContentTypeOrder
  nameWithType: FieldAndContentTypeExtensions.GetIsAllowedInContentTypeOrder
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetIsAllowedInContentTypeOrder
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ShowContentTypesInNewButton*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ShowContentTypesInNewButton
  name: ShowContentTypesInNewButton
  nameWithType: FieldAndContentTypeExtensions.ShowContentTypesInNewButton
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ShowContentTypesInNewButton
- uid: System.Collections.Generic.IList{Microsoft.SharePoint.Client.ContentType}
  commentId: T:System.Collections.Generic.IList{Microsoft.SharePoint.Client.ContentType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ContentType>
  nameWithType: IList<ContentType>
  fullName: System.Collections.Generic.IList<Microsoft.SharePoint.Client.ContentType>
  nameWithType.vb: IList(Of ContentType)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.SharePoint.Client.ContentType)
  name.vb: IList(Of ContentType)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SharePoint.Client.ContentType
    name: ContentType
    nameWithType: ContentType
    fullName: Microsoft.SharePoint.Client.ContentType
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SharePoint.Client.ContentType
    name: ContentType
    nameWithType: ContentType
    fullName: Microsoft.SharePoint.Client.ContentType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.HideContentTypesInNewButton*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.HideContentTypesInNewButton
  name: HideContentTypesInNewButton
  nameWithType: FieldAndContentTypeExtensions.HideContentTypesInNewButton
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.HideContentTypesInNewButton
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsChildOf*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsChildOf
  name: IsChildOf
  nameWithType: FieldAndContentTypeExtensions.IsChildOf
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsChildOf
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsParentOf*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsParentOf
  name: IsParentOf
  nameWithType: FieldAndContentTypeExtensions.IsParentOf
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.IsParentOf
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetParentIdValue*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetParentIdValue
  name: GetParentIdValue
  nameWithType: FieldAndContentTypeExtensions.GetParentIdValue
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.GetParentIdValue
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ReorderContentTypes*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ReorderContentTypes
  name: ReorderContentTypes
  nameWithType: FieldAndContentTypeExtensions.ReorderContentTypes
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.ReorderContentTypes
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType
  name: SetLocalizationForContentType
  nameWithType: FieldAndContentTypeExtensions.SetLocalizationForContentType
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForContentType
- uid: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField*
  commentId: Overload:Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField
  name: SetLocalizationForField
  nameWithType: FieldAndContentTypeExtensions.SetLocalizationForField
  fullName: Microsoft.SharePoint.Client.FieldAndContentTypeExtensions.SetLocalizationForField

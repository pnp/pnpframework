### YamlMime:ManagedReference
items:
- uid: Microsoft.SharePoint.Client.FileFolderExtensions
  commentId: T:Microsoft.SharePoint.Client.FileFolderExtensions
  id: FileFolderExtensions
  parent: Microsoft.SharePoint.Client
  children:
  - Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFile(Microsoft.SharePoint.Client.Web,System.String,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFileAsync(Microsoft.SharePoint.Client.Web,System.String,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFile(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileAsync(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileImplementation(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFile(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFileAsync(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSet(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Folder)
  - Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSet(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSetAsync(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Folder)
  - Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSetAsync(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSet(Microsoft.SharePoint.Client.Folder,System.String,Microsoft.SharePoint.Client.ContentTypeId)
  - Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSetAsync(Microsoft.SharePoint.Client.Folder,System.String,Microsoft.SharePoint.Client.ContentTypeId)
  - Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolder(Microsoft.SharePoint.Client.Folder,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolder(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolderAsync(Microsoft.SharePoint.Client.Folder,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolderAsync(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExists(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExistsAsync(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  - Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  - Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  - Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  - Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  - Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  - Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderImplementation(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  - Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPath(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  - Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPathAsync(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  - Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles(Microsoft.SharePoint.Client.Folder,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync(Microsoft.SharePoint.Client.Folder,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.FolderExists(Microsoft.SharePoint.Client.Folder,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.FolderExists(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.FolderExistsAsync(Microsoft.SharePoint.Client.Folder,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.FolderExistsAsync(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.GetFile(Microsoft.SharePoint.Client.Folder,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsString(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsStringAsync(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsync(Microsoft.SharePoint.Client.Folder,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.PublishFile(Microsoft.SharePoint.Client.Web,System.String,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileAsync(Microsoft.SharePoint.Client.Web,System.String,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevel(Microsoft.SharePoint.Client.File,Microsoft.SharePoint.Client.FileLevel)
  - Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevelAsync(Microsoft.SharePoint.Client.File,Microsoft.SharePoint.Client.FileLevel)
  - Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersion(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionAsync(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionImplementation(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolder(Microsoft.SharePoint.Client.Folder,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolderAsync(Microsoft.SharePoint.Client.Folder,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocal(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Func{System.String,System.Boolean})
  - Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalAsync(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Func{System.String,System.Boolean})
  - Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalImplementation(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Func{System.String,System.Boolean})
  - Microsoft.SharePoint.Client.FileFolderExtensions.SetFileProperties(Microsoft.SharePoint.Client.File,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  - Microsoft.SharePoint.Client.FileFolderExtensions.SetFilePropertiesAsync(Microsoft.SharePoint.Client.File,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  - Microsoft.SharePoint.Client.FileFolderExtensions.UploadFile(Microsoft.SharePoint.Client.Folder,System.String,System.IO.Stream,System.Boolean)
  - Microsoft.SharePoint.Client.FileFolderExtensions.UploadFile(Microsoft.SharePoint.Client.Folder,System.String,System.String,System.Boolean)
  - Microsoft.SharePoint.Client.FileFolderExtensions.UploadFileAsync(Microsoft.SharePoint.Client.Folder,System.String,System.IO.Stream,System.Boolean)
  - Microsoft.SharePoint.Client.FileFolderExtensions.UploadFileAsync(Microsoft.SharePoint.Client.Folder,System.String,System.String,System.Boolean)
  - Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequired(Microsoft.SharePoint.Client.File,System.IO.Stream)
  - Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequired(Microsoft.SharePoint.Client.File,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredAsync(Microsoft.SharePoint.Client.File,System.IO.Stream)
  - Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredAsync(Microsoft.SharePoint.Client.File,System.String)
  - Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredImplementation(Microsoft.SharePoint.Client.File,System.IO.Stream)
  langs:
  - csharp
  - vb
  name: FileFolderExtensions
  nameWithType: FileFolderExtensions
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FileFolderExtensions
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 21
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nClass that holds the file and folder methods\n"
  example: []
  syntax:
    content: public static class FileFolderExtensions
    content.vb: Public Module FileFolderExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFile(Microsoft.SharePoint.Client.Web,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFile(Microsoft.SharePoint.Client.Web,System.String,System.String)
  id: ApproveFile(Microsoft.SharePoint.Client.Web,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: ApproveFile(Web, String, String)
  nameWithType: FileFolderExtensions.ApproveFile(Web, String, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFile(Microsoft.SharePoint.Client.Web, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ApproveFile
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 29
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nApproves a file\n"
  example: []
  syntax:
    content: public static void ApproveFile(this Web web, string serverRelativeUrl, string comment)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL of the file to approve
    - id: comment
      type: System.String
      description: Message to be recorded with the approval
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ApproveFile(web As Web, serverRelativeUrl As String, comment As String)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFileAsync(Microsoft.SharePoint.Client.Web,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFileAsync(Microsoft.SharePoint.Client.Web,System.String,System.String)
  id: ApproveFileAsync(Microsoft.SharePoint.Client.Web,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: ApproveFileAsync(Web, String, String)
  nameWithType: FileFolderExtensions.ApproveFileAsync(Web, String, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFileAsync(Microsoft.SharePoint.Client.Web, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ApproveFileAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 40
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nApproves a file\n"
  example: []
  syntax:
    content: public static async Task ApproveFileAsync(this Web web, string serverRelativeUrl, string comment)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL of the file to approve
    - id: comment
      type: System.String
      description: Message to be recorded with the approval
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ApproveFileAsync(web As Web, serverRelativeUrl As String, comment As String) As Task
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFileAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFile(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFile(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  id: CheckInFile(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: CheckInFile(Web, String, CheckinType, String)
  nameWithType: FileFolderExtensions.CheckInFile(Web, String, CheckinType, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFile(Microsoft.SharePoint.Client.Web, System.String, Microsoft.SharePoint.Client.CheckinType, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CheckInFile
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 72
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks in a file\n"
  example: []
  syntax:
    content: public static void CheckInFile(this Web web, string serverRelativeUrl, CheckinType checkinType, string comment)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL of the file to checkin
    - id: checkinType
      type: Microsoft.SharePoint.Client.CheckinType
      description: The type of the checkin
    - id: comment
      type: System.String
      description: Message to be recorded with the approval
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CheckInFile(web As Web, serverRelativeUrl As String, checkinType As CheckinType, comment As String)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileAsync(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileAsync(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  id: CheckInFileAsync(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: CheckInFileAsync(Web, String, CheckinType, String)
  nameWithType: FileFolderExtensions.CheckInFileAsync(Web, String, CheckinType, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileAsync(Microsoft.SharePoint.Client.Web, System.String, Microsoft.SharePoint.Client.CheckinType, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CheckInFileAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 84
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks in a file\n"
  example: []
  syntax:
    content: public static async Task CheckInFileAsync(this Web web, string serverRelativeUrl, CheckinType checkinType, string comment)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL of the file to checkin
    - id: checkinType
      type: Microsoft.SharePoint.Client.CheckinType
      description: The type of the checkin
    - id: comment
      type: System.String
      description: Message to be recorded with the approval
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CheckInFileAsync(web As Web, serverRelativeUrl As String, checkinType As CheckinType, comment As String) As Task
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileImplementation(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileImplementation(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  id: CheckInFileImplementation(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: CheckInFileImplementation(Web, String, CheckinType, String)
  nameWithType: FileFolderExtensions.CheckInFileImplementation(Web, String, CheckinType, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileImplementation(Microsoft.SharePoint.Client.Web, System.String, Microsoft.SharePoint.Client.CheckinType, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CheckInFileImplementation
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 97
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks in a file\n"
  example: []
  syntax:
    content: public static async Task CheckInFileImplementation(this Web web, string serverRelativeUrl, CheckinType checkinType, string comment)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL of the file to checkin
    - id: checkinType
      type: Microsoft.SharePoint.Client.CheckinType
      description: The type of the checkin
    - id: comment
      type: System.String
      description: Message to be recorded with the approval
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CheckInFileImplementation(web As Web, serverRelativeUrl As String, checkinType As CheckinType, comment As String) As Task
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileImplementation*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFile(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFile(Microsoft.SharePoint.Client.Web,System.String)
  id: CheckOutFile(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: CheckOutFile(Web, String)
  nameWithType: FileFolderExtensions.CheckOutFile(Web, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFile(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CheckOutFile
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 120
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks out a file\n"
  example: []
  syntax:
    content: public static void CheckOutFile(this Web web, string serverRelativeUrl)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL of the file to checkout
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CheckOutFile(web As Web, serverRelativeUrl As String)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFileAsync(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFileAsync(Microsoft.SharePoint.Client.Web,System.String)
  id: CheckOutFileAsync(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: CheckOutFileAsync(Web, String)
  nameWithType: FileFolderExtensions.CheckOutFileAsync(Web, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFileAsync(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CheckOutFileAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 130
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks out a file\n"
  example: []
  syntax:
    content: public static async Task CheckOutFileAsync(this Web web, string serverRelativeUrl)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL of the file to checkout
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CheckOutFileAsync(web As Web, serverRelativeUrl As String) As Task
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFileAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSet(Microsoft.SharePoint.Client.Folder,System.String,Microsoft.SharePoint.Client.ContentTypeId)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSet(Microsoft.SharePoint.Client.Folder,System.String,Microsoft.SharePoint.Client.ContentTypeId)
  id: CreateDocumentSet(Microsoft.SharePoint.Client.Folder,System.String,Microsoft.SharePoint.Client.ContentTypeId)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: CreateDocumentSet(Folder, String, ContentTypeId)
  nameWithType: FileFolderExtensions.CreateDocumentSet(Folder, String, ContentTypeId)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSet(Microsoft.SharePoint.Client.Folder, System.String, Microsoft.SharePoint.Client.ContentTypeId)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateDocumentSet
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 186
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreates a new document set as a child of an existing folder, with the specified content type ID.\n"
  remarks: "\n<example>\n    var setContentType = list.BestMatchContentTypeId(BuiltInContentTypeId.DocumentSet);\n    var set1 = list.RootFolder.CreateDocumentSet(&quot;Set 1&quot;, setContentType);\n</example>\n"
  example: []
  syntax:
    content: public static Folder CreateDocumentSet(this Folder folder, string documentSetName, ContentTypeId contentTypeId)
    parameters:
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: Folder of the document set
    - id: documentSetName
      type: System.String
      description: Name of the document set
    - id: contentTypeId
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: Content type of the document set
    return:
      type: Microsoft.SharePoint.Client.Folder
      description: The created Folder representing the document set, so that additional operations (such as setting properties) can be done.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateDocumentSet(folder As Folder, documentSetName As String, contentTypeId As ContentTypeId) As Folder
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSet*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSetAsync(Microsoft.SharePoint.Client.Folder,System.String,Microsoft.SharePoint.Client.ContentTypeId)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSetAsync(Microsoft.SharePoint.Client.Folder,System.String,Microsoft.SharePoint.Client.ContentTypeId)
  id: CreateDocumentSetAsync(Microsoft.SharePoint.Client.Folder,System.String,Microsoft.SharePoint.Client.ContentTypeId)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: CreateDocumentSetAsync(Folder, String, ContentTypeId)
  nameWithType: FileFolderExtensions.CreateDocumentSetAsync(Folder, String, ContentTypeId)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSetAsync(Microsoft.SharePoint.Client.Folder, System.String, Microsoft.SharePoint.Client.ContentTypeId)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateDocumentSetAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 204
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreates a new document set as a child of an existing folder, with the specified content type ID.\n"
  remarks: "\n<example>\n    var setContentType = list.BestMatchContentTypeId(BuiltInContentTypeId.DocumentSet);\n    var set1 = list.RootFolder.CreateDocumentSet(&quot;Set 1&quot;, setContentType);\n</example>\n"
  example: []
  syntax:
    content: public static async Task<Folder> CreateDocumentSetAsync(this Folder folder, string documentSetName, ContentTypeId contentTypeId)
    parameters:
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: Folder of the document set
    - id: documentSetName
      type: System.String
      description: Name of the document set
    - id: contentTypeId
      type: Microsoft.SharePoint.Client.ContentTypeId
      description: Content type of the document set
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.Folder}
      description: The created Folder representing the document set, so that additional operations (such as setting properties) can be done.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateDocumentSetAsync(folder As Folder, documentSetName As String, contentTypeId As ContentTypeId) As Task(Of Folder)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSetAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSet(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSet(Microsoft.SharePoint.Client.List,System.String)
  id: ConvertFolderToDocumentSet(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: ConvertFolderToDocumentSet(List, String)
  nameWithType: FileFolderExtensions.ConvertFolderToDocumentSet(List, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSet(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ConvertFolderToDocumentSet
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 258
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nConverts a folder with the given name as a child of the List RootFolder. \n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static Folder ConvertFolderToDocumentSet(this List list, string folderName)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List in which the folder exists
    - id: folderName
      type: System.String
      description: Folder name to convert
    return:
      type: Microsoft.SharePoint.Client.Folder
      description: The newly converted Document Set, so that additional operations (such as setting properties) can be done.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConvertFolderToDocumentSet(list As List, folderName As String) As Folder
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSet*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSetAsync(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSetAsync(Microsoft.SharePoint.Client.List,System.String)
  id: ConvertFolderToDocumentSetAsync(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: ConvertFolderToDocumentSetAsync(List, String)
  nameWithType: FileFolderExtensions.ConvertFolderToDocumentSetAsync(List, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSetAsync(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ConvertFolderToDocumentSetAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 276
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nConverts a folder with the given name as a child of the List RootFolder. \n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static async Task<Folder> ConvertFolderToDocumentSetAsync(this List list, string folderName)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List in which the folder exists
    - id: folderName
      type: System.String
      description: Folder name to convert
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.Folder}
      description: The newly converted Document Set, so that additional operations (such as setting properties) can be done.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConvertFolderToDocumentSetAsync(list As List, folderName As String) As Task(Of Folder)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSetAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSet(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Folder)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSet(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Folder)
  id: ConvertFolderToDocumentSet(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Folder)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: ConvertFolderToDocumentSet(List, Folder)
  nameWithType: FileFolderExtensions.ConvertFolderToDocumentSet(List, Folder)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSet(Microsoft.SharePoint.Client.List, Microsoft.SharePoint.Client.Folder)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ConvertFolderToDocumentSet
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 295
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nConverts a folder with the given name as a child of the List RootFolder. \n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static Folder ConvertFolderToDocumentSet(this List list, Folder folder)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List in which the folder exists
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: Folder to convert
    return:
      type: Microsoft.SharePoint.Client.Folder
      description: The newly converted Document Set, so that additional operations (such as setting properties) can be done.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConvertFolderToDocumentSet(list As List, folder As Folder) As Folder
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSet*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSetAsync(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Folder)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSetAsync(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Folder)
  id: ConvertFolderToDocumentSetAsync(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Folder)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: ConvertFolderToDocumentSetAsync(List, Folder)
  nameWithType: FileFolderExtensions.ConvertFolderToDocumentSetAsync(List, Folder)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSetAsync(Microsoft.SharePoint.Client.List, Microsoft.SharePoint.Client.Folder)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ConvertFolderToDocumentSetAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 311
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nConverts a folder with the given name as a child of the List RootFolder. \n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static async Task<Folder> ConvertFolderToDocumentSetAsync(this List list, Folder folder)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List in which the folder exists
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: Folder to convert
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.Folder}
      description: The newly converted Document Set, so that additional operations (such as setting properties) can be done.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConvertFolderToDocumentSetAsync(list As List, folder As Folder) As Task(Of Folder)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSetAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolder(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolder(Microsoft.SharePoint.Client.Web,System.String)
  id: CreateFolder(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: CreateFolder(Web, String)
  nameWithType: FileFolderExtensions.CreateFolder(Web, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolder(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateFolder
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 360
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreates a folder with the given name as a child of the Web. \nNote it is more common to create folders within an existing Folder, such as the RootFolder of a List.\n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static Folder CreateFolder(this Web web, string folderName)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to check for the named folder
    - id: folderName
      type: System.String
      description: Folder name to retrieve or create
    return:
      type: Microsoft.SharePoint.Client.Folder
      description: The newly created Folder, so that additional operations (such as setting properties) can be done.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateFolder(web As Web, folderName As String) As Folder
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolder*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolderAsync(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolderAsync(Microsoft.SharePoint.Client.Web,System.String)
  id: CreateFolderAsync(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: CreateFolderAsync(Web, String)
  nameWithType: FileFolderExtensions.CreateFolderAsync(Web, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolderAsync(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateFolderAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 384
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreates a folder with the given name as a child of the Web. \nNote it is more common to create folders within an existing Folder, such as the RootFolder of a List.\n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static async Task<Folder> CreateFolderAsync(this Web web, string folderName)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to check for the named folder
    - id: folderName
      type: System.String
      description: Folder name to retrieve or create
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.Folder}
      description: The newly created Folder, so that additional operations (such as setting properties) can be done.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateFolderAsync(web As Web, folderName As String) As Task(Of Folder)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolderAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolder(Microsoft.SharePoint.Client.Folder,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolder(Microsoft.SharePoint.Client.Folder,System.String)
  id: CreateFolder(Microsoft.SharePoint.Client.Folder,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: CreateFolder(Folder, String)
  nameWithType: FileFolderExtensions.CreateFolder(Folder, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolder(Microsoft.SharePoint.Client.Folder, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateFolder
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 411
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreates a folder with the given name.\n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n<example>\n    var folder = list.RootFolder.CreateFolder(&quot;new-folder&quot;);\n</example>\n"
  example: []
  syntax:
    content: public static Folder CreateFolder(this Folder parentFolder, string folderName)
    parameters:
    - id: parentFolder
      type: Microsoft.SharePoint.Client.Folder
      description: Parent folder to create under
    - id: folderName
      type: System.String
      description: Folder name to retrieve or create
    return:
      type: Microsoft.SharePoint.Client.Folder
      description: The newly created folder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateFolder(parentFolder As Folder, folderName As String) As Folder
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolder*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolderAsync(Microsoft.SharePoint.Client.Folder,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolderAsync(Microsoft.SharePoint.Client.Folder,System.String)
  id: CreateFolderAsync(Microsoft.SharePoint.Client.Folder,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: CreateFolderAsync(Folder, String)
  nameWithType: FileFolderExtensions.CreateFolderAsync(Folder, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolderAsync(Microsoft.SharePoint.Client.Folder, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateFolderAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 437
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreates a folder with the given name.\n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n<example>\n    var folder = list.RootFolder.CreateFolder(&quot;new-folder&quot;);\n</example>\n"
  example: []
  syntax:
    content: public static async Task<Folder> CreateFolderAsync(this Folder parentFolder, string folderName)
    parameters:
    - id: parentFolder
      type: Microsoft.SharePoint.Client.Folder
      description: Parent folder to create under
    - id: folderName
      type: System.String
      description: Folder name to retrieve or create
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.Folder}
      description: The newly created folder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateFolderAsync(parentFolder As Folder, folderName As String) As Task(Of Folder)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolderAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExists(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExists(Microsoft.SharePoint.Client.Web,System.String)
  id: DoesFolderExists(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: DoesFolderExists(Web, String)
  nameWithType: FileFolderExtensions.DoesFolderExists(Web, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExists(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: DoesFolderExists
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 534
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if a specific folder exists\n"
  example: []
  syntax:
    content: public static bool DoesFolderExists(this Web web, string serverRelativeFolderUrl)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeFolderUrl
      type: System.String
      description: Folder to check
    return:
      type: System.Boolean
      description: Returns true if folder exists
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DoesFolderExists(web As Web, serverRelativeFolderUrl As String) As Boolean
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExistsAsync(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExistsAsync(Microsoft.SharePoint.Client.Web,System.String)
  id: DoesFolderExistsAsync(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: DoesFolderExistsAsync(Web, String)
  nameWithType: FileFolderExtensions.DoesFolderExistsAsync(Web, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExistsAsync(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: DoesFolderExistsAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 545
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if a specific folder exists\n"
  example: []
  syntax:
    content: public static async Task<bool> DoesFolderExistsAsync(this Web web, string serverRelativeFolderUrl)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeFolderUrl
      type: System.String
      description: Folder to check
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: Returns true if folder exists
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DoesFolderExistsAsync(web As Web, serverRelativeFolderUrl As String) As Task(Of Boolean)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExistsAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  id: EnsureFolder(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: EnsureFolder(Web, Folder, String, Expression<Func<Folder, Object>>[])
  nameWithType: FileFolderExtensions.EnsureFolder(Web, Folder, String, Expression<Func<Folder, Object>>[])
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.Folder, System.String, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Folder, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnsureFolder
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 579
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nEnsure that the folder structure is created. This also ensures hierarchy of folders.\n"
  example: []
  syntax:
    content: public static Folder EnsureFolder(this Web web, Folder parentFolder, string folderPath, params Expression<Func<Folder, object>>[] expressions)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to be processed - can be root web or sub site
    - id: parentFolder
      type: Microsoft.SharePoint.Client.Folder
      description: Parent folder
    - id: folderPath
      type: System.String
      description: Folder path
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[]
      description: List of lambda expressions of properties to load when retrieving the object
    return:
      type: Microsoft.SharePoint.Client.Folder
      description: The folder structure
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsureFolder(web As Web, parentFolder As Folder, folderPath As String, ParamArray expressions As Expression(Of Func(Of Folder, Object))()) As Folder
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder*
  nameWithType.vb: FileFolderExtensions.EnsureFolder(Web, Folder, String, Expression(Of Func(Of Folder, Object))())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.Folder, System.String, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.Folder, System.Object))())
  name.vb: EnsureFolder(Web, Folder, String, Expression(Of Func(Of Folder, Object))())
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  id: EnsureFolderAsync(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: EnsureFolderAsync(Web, Folder, String, Expression<Func<Folder, Object>>[])
  nameWithType: FileFolderExtensions.EnsureFolderAsync(Web, Folder, String, Expression<Func<Folder, Object>>[])
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.Folder, System.String, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Folder, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnsureFolderAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 592
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nEnsure that the folder structure is created. This also ensures hierarchy of folders.\n"
  example: []
  syntax:
    content: public static async Task<Folder> EnsureFolderAsync(this Web web, Folder parentFolder, string folderPath, params Expression<Func<Folder, object>>[] expressions)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to be processed - can be root web or sub site
    - id: parentFolder
      type: Microsoft.SharePoint.Client.Folder
      description: Parent folder
    - id: folderPath
      type: System.String
      description: Folder path
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[]
      description: List of lambda expressions of properties to load when retrieving the object
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.Folder}
      description: The folder structure
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsureFolderAsync(web As Web, parentFolder As Folder, folderPath As String, ParamArray expressions As Expression(Of Func(Of Folder, Object))()) As Task(Of Folder)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync*
  nameWithType.vb: FileFolderExtensions.EnsureFolderAsync(Web, Folder, String, Expression(Of Func(Of Folder, Object))())
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.Folder, System.String, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.Folder, System.Object))())
  name.vb: EnsureFolderAsync(Web, Folder, String, Expression(Of Func(Of Folder, Object))())
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderImplementation(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderImplementation(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  id: EnsureFolderImplementation(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: EnsureFolderImplementation(Web, Folder, String, Expression<Func<Folder, Object>>[])
  nameWithType: FileFolderExtensions.EnsureFolderImplementation(Web, Folder, String, Expression<Func<Folder, Object>>[])
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderImplementation(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.Folder, System.String, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Folder, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnsureFolderImplementation
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 606
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nEnsure that the folder structure is created. This also ensures hierarchy of folders.\n"
  example: []
  syntax:
    content: public static async Task<Folder> EnsureFolderImplementation(this Web web, Folder parentFolder, string folderPath, params Expression<Func<Folder, object>>[] expressions)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to be processed - can be root web or sub site
    - id: parentFolder
      type: Microsoft.SharePoint.Client.Folder
      description: Parent folder
    - id: folderPath
      type: System.String
      description: Folder path
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[]
      description: List of lambda expressions of properties to load when retrieving the object
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.Folder}
      description: The folder structure
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsureFolderImplementation(web As Web, parentFolder As Folder, folderPath As String, ParamArray expressions As Expression(Of Func(Of Folder, Object))()) As Task(Of Folder)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderImplementation*
  nameWithType.vb: FileFolderExtensions.EnsureFolderImplementation(Web, Folder, String, Expression(Of Func(Of Folder, Object))())
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderImplementation(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.Folder, System.String, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.Folder, System.Object))())
  name.vb: EnsureFolderImplementation(Web, Folder, String, Expression(Of Func(Of Folder, Object))())
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  id: EnsureFolder(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: EnsureFolder(Web, String, Expression<Func<Folder, Object>>[])
  nameWithType: FileFolderExtensions.EnsureFolder(Web, String, Expression<Func<Folder, Object>>[])
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Folder, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnsureFolder
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 629
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if the folder exists at the top level of the web site, and if it does not exist creates it.\nNote it is more common to create folders within an existing Folder, such as the RootFolder of a List.\n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static Folder EnsureFolder(this Web web, string folderName, params Expression<Func<Folder, object>>[] expressions)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to check for the named folder
    - id: folderName
      type: System.String
      description: Folder name to retrieve or create
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[]
      description: List of lambda expressions of properties to load when retrieving the object
    return:
      type: Microsoft.SharePoint.Client.Folder
      description: The existing or newly created folder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsureFolder(web As Web, folderName As String, ParamArray expressions As Expression(Of Func(Of Folder, Object))()) As Folder
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder*
  nameWithType.vb: FileFolderExtensions.EnsureFolder(Web, String, Expression(Of Func(Of Folder, Object))())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.Folder, System.Object))())
  name.vb: EnsureFolder(Web, String, Expression(Of Func(Of Folder, Object))())
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  id: EnsureFolderAsync(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: EnsureFolderAsync(Web, String, Expression<Func<Folder, Object>>[])
  nameWithType: FileFolderExtensions.EnsureFolderAsync(Web, String, Expression<Func<Folder, Object>>[])
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Folder, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnsureFolderAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 654
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if the folder exists at the top level of the web site, and if it does not exist creates it.\nNote it is more common to create folders within an existing Folder, such as the RootFolder of a List.\n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static async Task<Folder> EnsureFolderAsync(this Web web, string folderName, params Expression<Func<Folder, object>>[] expressions)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to check for the named folder
    - id: folderName
      type: System.String
      description: Folder name to retrieve or create
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[]
      description: List of lambda expressions of properties to load when retrieving the object
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.Folder}
      description: The existing or newly created folder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsureFolderAsync(web As Web, folderName As String, ParamArray expressions As Expression(Of Func(Of Folder, Object))()) As Task(Of Folder)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync*
  nameWithType.vb: FileFolderExtensions.EnsureFolderAsync(Web, String, Expression(Of Func(Of Folder, Object))())
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.Folder, System.Object))())
  name.vb: EnsureFolderAsync(Web, String, Expression(Of Func(Of Folder, Object))())
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  id: EnsureFolder(Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: EnsureFolder(Folder, String, Expression<Func<Folder, Object>>[])
  nameWithType: FileFolderExtensions.EnsureFolder(Folder, String, Expression<Func<Folder, Object>>[])
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Folder, System.String, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Folder, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnsureFolder
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 679
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if the subfolder exists, and if it does not exist creates it.\n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static Folder EnsureFolder(this Folder parentFolder, string folderName, params Expression<Func<Folder, object>>[] expressions)
    parameters:
    - id: parentFolder
      type: Microsoft.SharePoint.Client.Folder
      description: Parent folder to create under
    - id: folderName
      type: System.String
      description: Folder name to retrieve or create
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[]
      description: List of lambda expressions of properties to load when retrieving the object
    return:
      type: Microsoft.SharePoint.Client.Folder
      description: The existing or newly created folder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsureFolder(parentFolder As Folder, folderName As String, ParamArray expressions As Expression(Of Func(Of Folder, Object))()) As Folder
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder*
  nameWithType.vb: FileFolderExtensions.EnsureFolder(Folder, String, Expression(Of Func(Of Folder, Object))())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder(Microsoft.SharePoint.Client.Folder, System.String, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.Folder, System.Object))())
  name.vb: EnsureFolder(Folder, String, Expression(Of Func(Of Folder, Object))())
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  id: EnsureFolderAsync(Microsoft.SharePoint.Client.Folder,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: EnsureFolderAsync(Folder, String, Expression<Func<Folder, Object>>[])
  nameWithType: FileFolderExtensions.EnsureFolderAsync(Folder, String, Expression<Func<Folder, Object>>[])
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Folder, System.String, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Folder, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnsureFolderAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 703
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if the subfolder exists, and if it does not exist creates it.\n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static async Task<Folder> EnsureFolderAsync(this Folder parentFolder, string folderName, params Expression<Func<Folder, object>>[] expressions)
    parameters:
    - id: parentFolder
      type: Microsoft.SharePoint.Client.Folder
      description: Parent folder to create under
    - id: folderName
      type: System.String
      description: Folder name to retrieve or create
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[]
      description: List of lambda expressions of properties to load when retrieving the object
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.Folder}
      description: The existing or newly created folder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsureFolderAsync(parentFolder As Folder, folderName As String, ParamArray expressions As Expression(Of Func(Of Folder, Object))()) As Task(Of Folder)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync*
  nameWithType.vb: FileFolderExtensions.EnsureFolderAsync(Folder, String, Expression(Of Func(Of Folder, Object))())
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync(Microsoft.SharePoint.Client.Folder, System.String, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.Folder, System.Object))())
  name.vb: EnsureFolderAsync(Folder, String, Expression(Of Func(Of Folder, Object))())
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPath(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPath(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  id: EnsureFolderPath(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: EnsureFolderPath(Web, String, Expression<Func<Folder, Object>>[])
  nameWithType: FileFolderExtensions.EnsureFolderPath(Web, String, Expression<Func<Folder, Object>>[])
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPath(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Folder, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnsureFolderPath
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 760
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCheck if a folder exists with the specified path (relative to the web), and if not creates it (inside a list if necessary)\n"
  remarks: "\n<p>\nIf the specified path is inside an existing list, then the folder is created inside that list.\n</p>\n<p>\nAny existing folders are traversed, and then any remaining parts of the path are created as new folders.\n</p>\n"
  example: []
  syntax:
    content: public static Folder EnsureFolderPath(this Web web, string webRelativeUrl, params Expression<Func<Folder, object>>[] expressions)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to check for the specified folder
    - id: webRelativeUrl
      type: System.String
      description: Path to the folder, relative to the web site
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[]
      description: List of lambda expressions of properties to load when retrieving the object
    return:
      type: Microsoft.SharePoint.Client.Folder
      description: The existing or newly created folder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsureFolderPath(web As Web, webRelativeUrl As String, ParamArray expressions As Expression(Of Func(Of Folder, Object))()) As Folder
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPath*
  nameWithType.vb: FileFolderExtensions.EnsureFolderPath(Web, String, Expression(Of Func(Of Folder, Object))())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPath(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.Folder, System.Object))())
  name.vb: EnsureFolderPath(Web, String, Expression(Of Func(Of Folder, Object))())
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPathAsync(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPathAsync(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  id: EnsureFolderPathAsync(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: EnsureFolderPathAsync(Web, String, Expression<Func<Folder, Object>>[])
  nameWithType: FileFolderExtensions.EnsureFolderPathAsync(Web, String, Expression<Func<Folder, Object>>[])
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPathAsync(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Folder, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnsureFolderPathAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 780
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCheck if a folder exists with the specified path (relative to the web), and if not creates it (inside a list if necessary)\n"
  remarks: "\n<p>\nIf the specified path is inside an existing list, then the folder is created inside that list.\n</p>\n<p>\nAny existing folders are traversed, and then any remaining parts of the path are created as new folders.\n</p>\n"
  example: []
  syntax:
    content: public static async Task<Folder> EnsureFolderPathAsync(this Web web, string webRelativeUrl, params Expression<Func<Folder, object>>[] expressions)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to check for the specified folder
    - id: webRelativeUrl
      type: System.String
      description: Path to the folder, relative to the web site
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[]
      description: List of lambda expressions of properties to load when retrieving the object
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.Folder}
      description: The existing or newly created folder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EnsureFolderPathAsync(web As Web, webRelativeUrl As String, ParamArray expressions As Expression(Of Func(Of Folder, Object))()) As Task(Of Folder)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPathAsync*
  nameWithType.vb: FileFolderExtensions.EnsureFolderPathAsync(Web, String, Expression(Of Func(Of Folder, Object))())
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPathAsync(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.Folder, System.Object))())
  name.vb: EnsureFolderPathAsync(Web, String, Expression(Of Func(Of Folder, Object))())
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles(Microsoft.SharePoint.Client.Web,System.String)
  id: FindFiles(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: FindFiles(Web, String)
  nameWithType: FileFolderExtensions.FindFiles(Web, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FindFiles
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 937
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nFinds files in the web. Can be slow.\n"
  example: []
  syntax:
    content: public static List<File> FindFiles(this Web web, string match)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: match
      type: System.String
      description: a wildcard pattern to match
    return:
      type: System.Collections.Generic.List{Microsoft.SharePoint.Client.File}
      description: A list with the found <xref href="Microsoft.SharePoint.Client.File" data-throw-if-not-resolved="false"></xref> objects
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindFiles(web As Web, match As String) As List(Of File)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync(Microsoft.SharePoint.Client.Web,System.String)
  id: FindFilesAsync(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: FindFilesAsync(Web, String)
  nameWithType: FileFolderExtensions.FindFilesAsync(Web, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FindFilesAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 950
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nFinds files in the web. Can be slow.\n"
  example: []
  syntax:
    content: public static async Task<List<File>> FindFilesAsync(this Web web, string match)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: match
      type: System.String
      description: a wildcard pattern to match
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Microsoft.SharePoint.Client.File}}
      description: A list with the found <xref href="Microsoft.SharePoint.Client.File" data-throw-if-not-resolved="false"></xref> objects
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindFilesAsync(web As Web, match As String) As Task(Of List(Of File))
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles(Microsoft.SharePoint.Client.List,System.String)
  id: FindFiles(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: FindFiles(List, String)
  nameWithType: FileFolderExtensions.FindFiles(List, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FindFiles
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 964
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nFind files in the list, Can be slow.\n"
  example: []
  syntax:
    content: public static List<File> FindFiles(this List list, string match)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process
    - id: match
      type: System.String
      description: a wildcard pattern to match
    return:
      type: System.Collections.Generic.List{Microsoft.SharePoint.Client.File}
      description: A list with the found <xref href="Microsoft.SharePoint.Client.File" data-throw-if-not-resolved="false"></xref> objects
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindFiles(list As List, match As String) As List(Of File)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync(Microsoft.SharePoint.Client.List,System.String)
  id: FindFilesAsync(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: FindFilesAsync(List, String)
  nameWithType: FileFolderExtensions.FindFilesAsync(List, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FindFilesAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 978
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nFind files in the list, Can be slow.\n"
  example: []
  syntax:
    content: public static async Task<List<File>> FindFilesAsync(this List list, string match)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process
    - id: match
      type: System.String
      description: a wildcard pattern to match
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Microsoft.SharePoint.Client.File}}
      description: A list with the found <xref href="Microsoft.SharePoint.Client.File" data-throw-if-not-resolved="false"></xref> objects
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindFilesAsync(list As List, match As String) As Task(Of List(Of File))
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles(Microsoft.SharePoint.Client.Folder,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles(Microsoft.SharePoint.Client.Folder,System.String)
  id: FindFiles(Microsoft.SharePoint.Client.Folder,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: FindFiles(Folder, String)
  nameWithType: FileFolderExtensions.FindFiles(Folder, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles(Microsoft.SharePoint.Client.Folder, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FindFiles
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 993
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nFind files in a specific folder\n"
  example: []
  syntax:
    content: public static List<File> FindFiles(this Folder folder, string match)
    parameters:
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: The folder to process
    - id: match
      type: System.String
      description: a wildcard pattern to match
    return:
      type: System.Collections.Generic.List{Microsoft.SharePoint.Client.File}
      description: A list with the found <xref href="Microsoft.SharePoint.Client.File" data-throw-if-not-resolved="false"></xref> objects
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindFiles(folder As Folder, match As String) As List(Of File)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync(Microsoft.SharePoint.Client.Folder,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync(Microsoft.SharePoint.Client.Folder,System.String)
  id: FindFilesAsync(Microsoft.SharePoint.Client.Folder,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: FindFilesAsync(Folder, String)
  nameWithType: FileFolderExtensions.FindFilesAsync(Folder, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync(Microsoft.SharePoint.Client.Folder, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FindFilesAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1005
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nFind files in a specific folder\n"
  example: []
  syntax:
    content: public static async Task<List<File>> FindFilesAsync(this Folder folder, string match)
    parameters:
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: The folder to process
    - id: match
      type: System.String
      description: a wildcard pattern to match
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Microsoft.SharePoint.Client.File}}
      description: A list with the found <xref href="Microsoft.SharePoint.Client.File" data-throw-if-not-resolved="false"></xref> objects
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindFilesAsync(folder As Folder, match As String) As Task(Of List(Of File))
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExists(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.FolderExists(Microsoft.SharePoint.Client.Web,System.String)
  id: FolderExists(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: FolderExists(Web, String)
  nameWithType: FileFolderExtensions.FolderExists(Web, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExists(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FolderExists
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1023
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if the folder exists at the top level of the web site.\n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static bool FolderExists(this Web web, string folderName)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to check for the named folder
    - id: folderName
      type: System.String
      description: Folder name to retrieve
    return:
      type: System.Boolean
      description: true if the folder exists; false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FolderExists(web As Web, folderName As String) As Boolean
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExistsAsync(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.FolderExistsAsync(Microsoft.SharePoint.Client.Web,System.String)
  id: FolderExistsAsync(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: FolderExistsAsync(Web, String)
  nameWithType: FileFolderExtensions.FolderExistsAsync(Web, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExistsAsync(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FolderExistsAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1041
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if the folder exists at the top level of the web site.\n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static async Task<bool> FolderExistsAsync(this Web web, string folderName)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to check for the named folder
    - id: folderName
      type: System.String
      description: Folder name to retrieve
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: true if the folder exists; false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FolderExistsAsync(web As Web, folderName As String) As Task(Of Boolean)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExistsAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExists(Microsoft.SharePoint.Client.Folder,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.FolderExists(Microsoft.SharePoint.Client.Folder,System.String)
  id: FolderExists(Microsoft.SharePoint.Client.Folder,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: FolderExists(Folder, String)
  nameWithType: FileFolderExtensions.FolderExists(Folder, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExists(Microsoft.SharePoint.Client.Folder, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FolderExists
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1060
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if the subfolder exists.\n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static bool FolderExists(this Folder parentFolder, string folderName)
    parameters:
    - id: parentFolder
      type: Microsoft.SharePoint.Client.Folder
      description: Parent folder to check for the named subfolder
    - id: folderName
      type: System.String
      description: Folder name to retrieve
    return:
      type: System.Boolean
      description: true if the folder exists; false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FolderExists(parentFolder As Folder, folderName As String) As Boolean
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExistsAsync(Microsoft.SharePoint.Client.Folder,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.FolderExistsAsync(Microsoft.SharePoint.Client.Folder,System.String)
  id: FolderExistsAsync(Microsoft.SharePoint.Client.Folder,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: FolderExistsAsync(Folder, String)
  nameWithType: FileFolderExtensions.FolderExistsAsync(Folder, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExistsAsync(Microsoft.SharePoint.Client.Folder, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FolderExistsAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1083
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if the subfolder exists.\n"
  remarks: "\n<p>\nNote that this only checks one level of folder (the Folders collection) and cannot accept a name with path characters.\n</p>\n"
  example: []
  syntax:
    content: public static async Task<bool> FolderExistsAsync(this Folder parentFolder, string folderName)
    parameters:
    - id: parentFolder
      type: Microsoft.SharePoint.Client.Folder
      description: Parent folder to check for the named subfolder
    - id: folderName
      type: System.String
      description: Folder name to retrieve
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: true if the folder exists; false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FolderExistsAsync(parentFolder As Folder, folderName As String) As Task(Of Boolean)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExistsAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsString(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsString(Microsoft.SharePoint.Client.Web,System.String)
  id: GetFileAsString(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: GetFileAsString(Web, String)
  nameWithType: FileFolderExtensions.GetFileAsString(Web, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsString(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFileAsString
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1132
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns a file as string\n"
  example: []
  syntax:
    content: public static string GetFileAsString(this Web web, string serverRelativeUrl)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The Web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL to the file
    return:
      type: System.String
      description: The file contents as a string
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFileAsString(web As Web, serverRelativeUrl As String) As String
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsStringAsync(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsStringAsync(Microsoft.SharePoint.Client.Web,System.String)
  id: GetFileAsStringAsync(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: GetFileAsStringAsync(Web, String)
  nameWithType: FileFolderExtensions.GetFileAsStringAsync(Web, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsStringAsync(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFileAsStringAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1143
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns a file as string\n"
  example: []
  syntax:
    content: public static async Task<string> GetFileAsStringAsync(this Web web, string serverRelativeUrl)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The Web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL to the file
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The file contents as a string
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFileAsStringAsync(web As Web, serverRelativeUrl As String) As Task(Of String)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsStringAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFile(Microsoft.SharePoint.Client.Web,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.PublishFile(Microsoft.SharePoint.Client.Web,System.String,System.String)
  id: PublishFile(Microsoft.SharePoint.Client.Web,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: PublishFile(Web, String, String)
  nameWithType: FileFolderExtensions.PublishFile(Web, String, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFile(Microsoft.SharePoint.Client.Web, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: PublishFile
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1205
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nPublishes a file existing on a server URL\n"
  example: []
  syntax:
    content: public static void PublishFile(this Web web, string serverRelativeUrl, string comment)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeUrl
      type: System.String
      description: the server relative URL of the file to publish
    - id: comment
      type: System.String
      description: Comment recorded with the publish action
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub PublishFile(web As Web, serverRelativeUrl As String, comment As String)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileAsync(Microsoft.SharePoint.Client.Web,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileAsync(Microsoft.SharePoint.Client.Web,System.String,System.String)
  id: PublishFileAsync(Microsoft.SharePoint.Client.Web,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: PublishFileAsync(Web, String, String)
  nameWithType: FileFolderExtensions.PublishFileAsync(Web, String, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileAsync(Microsoft.SharePoint.Client.Web, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: PublishFileAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1216
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nPublishes a file existing on a server URL\n"
  example: []
  syntax:
    content: public static async Task PublishFileAsync(this Web web, string serverRelativeUrl, string comment)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeUrl
      type: System.String
      description: the server relative URL of the file to publish
    - id: comment
      type: System.String
      description: Comment recorded with the publish action
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PublishFileAsync(web As Web, serverRelativeUrl As String, comment As String) As Task
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolder(Microsoft.SharePoint.Client.Folder,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolder(Microsoft.SharePoint.Client.Folder,System.String)
  id: ResolveSubFolder(Microsoft.SharePoint.Client.Folder,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: ResolveSubFolder(Folder, String)
  nameWithType: FileFolderExtensions.ResolveSubFolder(Folder, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolder(Microsoft.SharePoint.Client.Folder, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ResolveSubFolder
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1247
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGets a folder with a given name in a given <xref href=\"Microsoft.SharePoint.Client.Folder\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static Folder ResolveSubFolder(this Folder folder, string folderName)
    parameters:
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: <xref href="Microsoft.SharePoint.Client.Folder" data-throw-if-not-resolved="false"></xref> in which to search for
    - id: folderName
      type: System.String
      description: Name of the folder to search for
    return:
      type: Microsoft.SharePoint.Client.Folder
      description: The found <xref href="Microsoft.SharePoint.Client.Folder" data-throw-if-not-resolved="false"></xref> if available, null otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ResolveSubFolder(folder As Folder, folderName As String) As Folder
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolder*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolderAsync(Microsoft.SharePoint.Client.Folder,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolderAsync(Microsoft.SharePoint.Client.Folder,System.String)
  id: ResolveSubFolderAsync(Microsoft.SharePoint.Client.Folder,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: ResolveSubFolderAsync(Folder, String)
  nameWithType: FileFolderExtensions.ResolveSubFolderAsync(Folder, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolderAsync(Microsoft.SharePoint.Client.Folder, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ResolveSubFolderAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1258
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGets a folder with a given name in a given <xref href=\"Microsoft.SharePoint.Client.Folder\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static async Task<Folder> ResolveSubFolderAsync(this Folder folder, string folderName)
    parameters:
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: <xref href="Microsoft.SharePoint.Client.Folder" data-throw-if-not-resolved="false"></xref> in which to search for
    - id: folderName
      type: System.String
      description: Name of the folder to search for
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.Folder}
      description: The found <xref href="Microsoft.SharePoint.Client.Folder" data-throw-if-not-resolved="false"></xref> if available, null otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ResolveSubFolderAsync(folder As Folder, folderName As String) As Task(Of Folder)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolderAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocal(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Func{System.String,System.Boolean})
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocal(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Func{System.String,System.Boolean})
  id: SaveFileToLocal(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Func{System.String,System.Boolean})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: SaveFileToLocal(Web, String, String, String, Func<String, Boolean>)
  nameWithType: FileFolderExtensions.SaveFileToLocal(Web, String, String, String, Func<String, Boolean>)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocal(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.Func<System.String, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SaveFileToLocal
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1300
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSaves a remote file to a local folder\n"
  example: []
  syntax:
    content: public static void SaveFileToLocal(this Web web, string serverRelativeUrl, string localPath, string localFileName = null, Func<string, bool> fileExistsCallBack = null)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The Web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL to the file
    - id: localPath
      type: System.String
      description: The local folder
    - id: localFileName
      type: System.String
      description: The local filename. If null the filename of the file on the server will be used
    - id: fileExistsCallBack
      type: System.Func{System.String,System.Boolean}
      description: Optional callback function allowing to provide feedback if the file should be overwritten if it exists. The function requests a bool as return value and the string input contains the name of the file that exists.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SaveFileToLocal(web As Web, serverRelativeUrl As String, localPath As String, localFileName As String = Nothing, fileExistsCallBack As Func(Of String, Boolean) = Nothing)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocal*
  nameWithType.vb: FileFolderExtensions.SaveFileToLocal(Web, String, String, String, Func(Of String, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocal(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.Func(Of System.String, System.Boolean))
  name.vb: SaveFileToLocal(Web, String, String, String, Func(Of String, Boolean))
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalAsync(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Func{System.String,System.Boolean})
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalAsync(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Func{System.String,System.Boolean})
  id: SaveFileToLocalAsync(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Func{System.String,System.Boolean})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: SaveFileToLocalAsync(Web, String, String, String, Func<String, Boolean>)
  nameWithType: FileFolderExtensions.SaveFileToLocalAsync(Web, String, String, String, Func<String, Boolean>)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalAsync(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.Func<System.String, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SaveFileToLocalAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1313
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSaves a remote file to a local folder\n"
  example: []
  syntax:
    content: public static async Task SaveFileToLocalAsync(this Web web, string serverRelativeUrl, string localPath, string localFileName = null, Func<string, bool> fileExistsCallBack = null)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The Web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL to the file
    - id: localPath
      type: System.String
      description: The local folder
    - id: localFileName
      type: System.String
      description: The local filename. If null the filename of the file on the server will be used
    - id: fileExistsCallBack
      type: System.Func{System.String,System.Boolean}
      description: Optional callback function allowing to provide feedback if the file should be overwritten if it exists. The function requests a bool as return value and the string input contains the name of the file that exists.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SaveFileToLocalAsync(web As Web, serverRelativeUrl As String, localPath As String, localFileName As String = Nothing, fileExistsCallBack As Func(Of String, Boolean) = Nothing) As Task
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalAsync*
  nameWithType.vb: FileFolderExtensions.SaveFileToLocalAsync(Web, String, String, String, Func(Of String, Boolean))
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalAsync(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.Func(Of System.String, System.Boolean))
  name.vb: SaveFileToLocalAsync(Web, String, String, String, Func(Of String, Boolean))
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalImplementation(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Func{System.String,System.Boolean})
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalImplementation(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Func{System.String,System.Boolean})
  id: SaveFileToLocalImplementation(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Func{System.String,System.Boolean})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: SaveFileToLocalImplementation(Web, String, String, String, Func<String, Boolean>)
  nameWithType: FileFolderExtensions.SaveFileToLocalImplementation(Web, String, String, String, Func<String, Boolean>)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalImplementation(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.Func<System.String, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SaveFileToLocalImplementation
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1327
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSaves a remote file to a local folder\n"
  example: []
  syntax:
    content: public static async Task SaveFileToLocalImplementation(this Web web, string serverRelativeUrl, string localPath, string localFileName = null, Func<string, bool> fileExistsCallBack = null)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The Web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL to the file
    - id: localPath
      type: System.String
      description: The local folder
    - id: localFileName
      type: System.String
      description: The local filename. If null the filename of the file on the server will be used
    - id: fileExistsCallBack
      type: System.Func{System.String,System.Boolean}
      description: Optional callback function allowing to provide feedback if the file should be overwritten if it exists. The function requests a bool as return value and the string input contains the name of the file that exists.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SaveFileToLocalImplementation(web As Web, serverRelativeUrl As String, localPath As String, localFileName As String = Nothing, fileExistsCallBack As Func(Of String, Boolean) = Nothing) As Task
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalImplementation*
  nameWithType.vb: FileFolderExtensions.SaveFileToLocalImplementation(Web, String, String, String, Func(Of String, Boolean))
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalImplementation(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.Func(Of System.String, System.Boolean))
  name.vb: SaveFileToLocalImplementation(Web, String, String, String, Func(Of String, Boolean))
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFile(Microsoft.SharePoint.Client.Folder,System.String,System.String,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.UploadFile(Microsoft.SharePoint.Client.Folder,System.String,System.String,System.Boolean)
  id: UploadFile(Microsoft.SharePoint.Client.Folder,System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: UploadFile(Folder, String, String, Boolean)
  nameWithType: FileFolderExtensions.UploadFile(Folder, String, String, Boolean)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFile(Microsoft.SharePoint.Client.Folder, System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UploadFile
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1356
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUploads a file to the specified folder.\n"
  example: []
  syntax:
    content: public static File UploadFile(this Folder folder, string fileName, string localFilePath, bool overwriteIfExists)
    parameters:
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: Folder to upload file to.
    - id: fileName
      type: System.String
      description: Name of the file
    - id: localFilePath
      type: System.String
      description: Location of the file to be uploaded.
    - id: overwriteIfExists
      type: System.Boolean
      description: true (default) to overwite existing files
    return:
      type: Microsoft.SharePoint.Client.File
      description: The uploaded File, so that additional operations (such as setting properties) can be done.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UploadFile(folder As Folder, fileName As String, localFilePath As String, overwriteIfExists As Boolean) As File
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFileAsync(Microsoft.SharePoint.Client.Folder,System.String,System.String,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.UploadFileAsync(Microsoft.SharePoint.Client.Folder,System.String,System.String,System.Boolean)
  id: UploadFileAsync(Microsoft.SharePoint.Client.Folder,System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: UploadFileAsync(Folder, String, String, Boolean)
  nameWithType: FileFolderExtensions.UploadFileAsync(Folder, String, String, Boolean)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFileAsync(Microsoft.SharePoint.Client.Folder, System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UploadFileAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1377
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUploads a file to the specified folder.\n"
  example: []
  syntax:
    content: public static async Task<File> UploadFileAsync(this Folder folder, string fileName, string localFilePath, bool overwriteIfExists)
    parameters:
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: Folder to upload file to.
    - id: fileName
      type: System.String
      description: Name of the file
    - id: localFilePath
      type: System.String
      description: Location of the file to be uploaded.
    - id: overwriteIfExists
      type: System.Boolean
      description: true (default) to overwite existing files
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.File}
      description: The uploaded File, so that additional operations (such as setting properties) can be done.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UploadFileAsync(folder As Folder, fileName As String, localFilePath As String, overwriteIfExists As Boolean) As Task(Of File)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFileAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFile(Microsoft.SharePoint.Client.Folder,System.String,System.IO.Stream,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.UploadFile(Microsoft.SharePoint.Client.Folder,System.String,System.IO.Stream,System.Boolean)
  id: UploadFile(Microsoft.SharePoint.Client.Folder,System.String,System.IO.Stream,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: UploadFile(Folder, String, Stream, Boolean)
  nameWithType: FileFolderExtensions.UploadFile(Folder, String, Stream, Boolean)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFile(Microsoft.SharePoint.Client.Folder, System.String, System.IO.Stream, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UploadFile
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1399
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUploads a file to the specified folder.\n"
  example: []
  syntax:
    content: public static File UploadFile(this Folder folder, string fileName, Stream stream, bool overwriteIfExists)
    parameters:
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: Folder to upload file to.
    - id: fileName
      type: System.String
      description: Location of the file to be uploaded.
    - id: stream
      type: System.IO.Stream
      description: A stream object that represents the file.
    - id: overwriteIfExists
      type: System.Boolean
      description: true (default) to overwite existing files
    return:
      type: Microsoft.SharePoint.Client.File
      description: The uploaded File, so that additional operations (such as setting properties) can be done.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UploadFile(folder As Folder, fileName As String, stream As Stream, overwriteIfExists As Boolean) As File
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFileAsync(Microsoft.SharePoint.Client.Folder,System.String,System.IO.Stream,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.UploadFileAsync(Microsoft.SharePoint.Client.Folder,System.String,System.IO.Stream,System.Boolean)
  id: UploadFileAsync(Microsoft.SharePoint.Client.Folder,System.String,System.IO.Stream,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: UploadFileAsync(Folder, String, Stream, Boolean)
  nameWithType: FileFolderExtensions.UploadFileAsync(Folder, String, Stream, Boolean)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFileAsync(Microsoft.SharePoint.Client.Folder, System.String, System.IO.Stream, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UploadFileAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1412
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUploads a file to the specified folder.\n"
  example: []
  syntax:
    content: public static async Task<File> UploadFileAsync(this Folder folder, string fileName, Stream stream, bool overwriteIfExists)
    parameters:
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: Folder to upload file to.
    - id: fileName
      type: System.String
      description: Location of the file to be uploaded.
    - id: stream
      type: System.IO.Stream
      description: A stream object that represents the file.
    - id: overwriteIfExists
      type: System.Boolean
      description: true (default) to overwite existing files
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.File}
      description: The uploaded File, so that additional operations (such as setting properties) can be done.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UploadFileAsync(folder As Folder, fileName As String, stream As Stream, overwriteIfExists As Boolean) As Task(Of File)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFileAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.GetFile(Microsoft.SharePoint.Client.Folder,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.GetFile(Microsoft.SharePoint.Client.Folder,System.String)
  id: GetFile(Microsoft.SharePoint.Client.Folder,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: GetFile(Folder, String)
  nameWithType: FileFolderExtensions.GetFile(Folder, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.GetFile(Microsoft.SharePoint.Client.Folder, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFile
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1571
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGets a file in a document library.\n"
  example: []
  syntax:
    content: public static File GetFile(this Folder folder, string fileName)
    parameters:
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: Folder containing the target file.
    - id: fileName
      type: System.String
      description: File name.
    return:
      type: Microsoft.SharePoint.Client.File
      description: The target file if found, null if no file is found.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFile(folder As Folder, fileName As String) As File
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.GetFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsync(Microsoft.SharePoint.Client.Folder,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsync(Microsoft.SharePoint.Client.Folder,System.String)
  id: GetFileAsync(Microsoft.SharePoint.Client.Folder,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: GetFileAsync(Folder, String)
  nameWithType: FileFolderExtensions.GetFileAsync(Folder, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsync(Microsoft.SharePoint.Client.Folder, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetFileAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1582
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGets a file in a document library.\n"
  example: []
  syntax:
    content: public static async Task<File> GetFileAsync(this Folder folder, string fileName)
    parameters:
    - id: folder
      type: Microsoft.SharePoint.Client.Folder
      description: Folder containing the target file.
    - id: fileName
      type: System.String
      description: File name.
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.File}
      description: The target file if found, null if no file is found.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFileAsync(folder As Folder, fileName As String) As Task(Of File)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequired(Microsoft.SharePoint.Client.File,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequired(Microsoft.SharePoint.Client.File,System.String)
  id: VerifyIfUploadRequired(Microsoft.SharePoint.Client.File,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: VerifyIfUploadRequired(File, String)
  nameWithType: FileFolderExtensions.VerifyIfUploadRequired(File, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequired(Microsoft.SharePoint.Client.File, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: VerifyIfUploadRequired
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1632
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUsed to compare the server file to the local file.\nThis enables users with faster download speeds but slow upload speeds to evaluate if the server file should be overwritten.\n"
  example: []
  syntax:
    content: public static bool VerifyIfUploadRequired(this File serverFile, string localFile)
    parameters:
    - id: serverFile
      type: Microsoft.SharePoint.Client.File
      description: File located on the server.
    - id: localFile
      type: System.String
      description: File to validate against.
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function VerifyIfUploadRequired(serverFile As File, localFile As String) As Boolean
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequired*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredAsync(Microsoft.SharePoint.Client.File,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredAsync(Microsoft.SharePoint.Client.File,System.String)
  id: VerifyIfUploadRequiredAsync(Microsoft.SharePoint.Client.File,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: VerifyIfUploadRequiredAsync(File, String)
  nameWithType: FileFolderExtensions.VerifyIfUploadRequiredAsync(File, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredAsync(Microsoft.SharePoint.Client.File, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: VerifyIfUploadRequiredAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1649
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUsed to compare the server file to the local file.\nThis enables users with faster download speeds but slow upload speeds to evaluate if the server file should be overwritten.\n"
  example: []
  syntax:
    content: public static async Task<bool> VerifyIfUploadRequiredAsync(this File serverFile, string localFile)
    parameters:
    - id: serverFile
      type: Microsoft.SharePoint.Client.File
      description: File located on the server.
    - id: localFile
      type: System.String
      description: File to validate against.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function VerifyIfUploadRequiredAsync(serverFile As File, localFile As String) As Task(Of Boolean)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequired(Microsoft.SharePoint.Client.File,System.IO.Stream)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequired(Microsoft.SharePoint.Client.File,System.IO.Stream)
  id: VerifyIfUploadRequired(Microsoft.SharePoint.Client.File,System.IO.Stream)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: VerifyIfUploadRequired(File, Stream)
  nameWithType: FileFolderExtensions.VerifyIfUploadRequired(File, Stream)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequired(Microsoft.SharePoint.Client.File, System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: VerifyIfUploadRequired
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1668
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUsed to compare the server file to the local file.\nThis enables users with faster download speeds but slow upload speeds to evaluate if the server file should be overwritten.\n"
  example: []
  syntax:
    content: public static bool VerifyIfUploadRequired(this File serverFile, Stream localStream)
    parameters:
    - id: serverFile
      type: Microsoft.SharePoint.Client.File
      description: File located on the server.
    - id: localStream
      type: System.IO.Stream
      description: Stream to validate against.
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function VerifyIfUploadRequired(serverFile As File, localStream As Stream) As Boolean
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequired*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredAsync(Microsoft.SharePoint.Client.File,System.IO.Stream)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredAsync(Microsoft.SharePoint.Client.File,System.IO.Stream)
  id: VerifyIfUploadRequiredAsync(Microsoft.SharePoint.Client.File,System.IO.Stream)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: VerifyIfUploadRequiredAsync(File, Stream)
  nameWithType: FileFolderExtensions.VerifyIfUploadRequiredAsync(File, Stream)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredAsync(Microsoft.SharePoint.Client.File, System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: VerifyIfUploadRequiredAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1680
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUsed to compare the server file to the local file.\nThis enables users with faster download speeds but slow upload speeds to evaluate if the server file should be overwritten.\n"
  example: []
  syntax:
    content: public static async Task<bool> VerifyIfUploadRequiredAsync(this File serverFile, Stream localStream)
    parameters:
    - id: serverFile
      type: Microsoft.SharePoint.Client.File
      description: File located on the server.
    - id: localStream
      type: System.IO.Stream
      description: Stream to validate against.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function VerifyIfUploadRequiredAsync(serverFile As File, localStream As Stream) As Task(Of Boolean)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredImplementation(Microsoft.SharePoint.Client.File,System.IO.Stream)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredImplementation(Microsoft.SharePoint.Client.File,System.IO.Stream)
  id: VerifyIfUploadRequiredImplementation(Microsoft.SharePoint.Client.File,System.IO.Stream)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: VerifyIfUploadRequiredImplementation(File, Stream)
  nameWithType: FileFolderExtensions.VerifyIfUploadRequiredImplementation(File, Stream)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredImplementation(Microsoft.SharePoint.Client.File, System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: VerifyIfUploadRequiredImplementation
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1693
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUsed to compare the server file to the local file.\nThis enables users with faster download speeds but slow upload speeds to evaluate if the server file should be overwritten.\n"
  example: []
  syntax:
    content: public static async Task<bool> VerifyIfUploadRequiredImplementation(this File serverFile, Stream localStream)
    parameters:
    - id: serverFile
      type: Microsoft.SharePoint.Client.File
      description: File located on the server.
    - id: localStream
      type: System.IO.Stream
      description: Stream to validate against.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function VerifyIfUploadRequiredImplementation(serverFile As File, localStream As Stream) As Task(Of Boolean)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredImplementation*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.SetFileProperties(Microsoft.SharePoint.Client.File,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.SetFileProperties(Microsoft.SharePoint.Client.File,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  id: SetFileProperties(Microsoft.SharePoint.Client.File,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: SetFileProperties(File, IDictionary<String, String>, Boolean)
  nameWithType: FileFolderExtensions.SetFileProperties(File, IDictionary<String, String>, Boolean)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.SetFileProperties(Microsoft.SharePoint.Client.File, System.Collections.Generic.IDictionary<System.String, System.String>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetFileProperties
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1735
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSets file properties using a dictionary.\n"
  example: []
  syntax:
    content: public static void SetFileProperties(this File file, IDictionary<string, string> properties, bool checkoutIfRequired = true)
    parameters:
    - id: file
      type: Microsoft.SharePoint.Client.File
      description: Target file object.
    - id: properties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: Dictionary of properties to set.
    - id: checkoutIfRequired
      type: System.Boolean
      description: Check out the file if necessary to set properties.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetFileProperties(file As File, properties As IDictionary(Of String, String), checkoutIfRequired As Boolean = True)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.SetFileProperties*
  nameWithType.vb: FileFolderExtensions.SetFileProperties(File, IDictionary(Of String, String), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.SetFileProperties(Microsoft.SharePoint.Client.File, System.Collections.Generic.IDictionary(Of System.String, System.String), System.Boolean)
  name.vb: SetFileProperties(File, IDictionary(Of String, String), Boolean)
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.SetFilePropertiesAsync(Microsoft.SharePoint.Client.File,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.SetFilePropertiesAsync(Microsoft.SharePoint.Client.File,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  id: SetFilePropertiesAsync(Microsoft.SharePoint.Client.File,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: SetFilePropertiesAsync(File, IDictionary<String, String>, Boolean)
  nameWithType: FileFolderExtensions.SetFilePropertiesAsync(File, IDictionary<String, String>, Boolean)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.SetFilePropertiesAsync(Microsoft.SharePoint.Client.File, System.Collections.Generic.IDictionary<System.String, System.String>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetFilePropertiesAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1746
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSets file properties using a dictionary.\n"
  example: []
  syntax:
    content: public static async Task SetFilePropertiesAsync(this File file, IDictionary<string, string> properties, bool checkoutIfRequired = true)
    parameters:
    - id: file
      type: Microsoft.SharePoint.Client.File
      description: Target file object.
    - id: properties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: Dictionary of properties to set.
    - id: checkoutIfRequired
      type: System.Boolean
      description: Check out the file if necessary to set properties.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetFilePropertiesAsync(file As File, properties As IDictionary(Of String, String), checkoutIfRequired As Boolean = True) As Task
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.SetFilePropertiesAsync*
  nameWithType.vb: FileFolderExtensions.SetFilePropertiesAsync(File, IDictionary(Of String, String), Boolean)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.FileFolderExtensions.SetFilePropertiesAsync(Microsoft.SharePoint.Client.File, System.Collections.Generic.IDictionary(Of System.String, System.String), System.Boolean)
  name.vb: SetFilePropertiesAsync(File, IDictionary(Of String, String), Boolean)
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevel(Microsoft.SharePoint.Client.File,Microsoft.SharePoint.Client.FileLevel)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevel(Microsoft.SharePoint.Client.File,Microsoft.SharePoint.Client.FileLevel)
  id: PublishFileToLevel(Microsoft.SharePoint.Client.File,Microsoft.SharePoint.Client.FileLevel)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: PublishFileToLevel(File, FileLevel)
  nameWithType: FileFolderExtensions.PublishFileToLevel(File, FileLevel)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevel(Microsoft.SharePoint.Client.File, Microsoft.SharePoint.Client.FileLevel)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: PublishFileToLevel
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1895
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nPublishes a file based on the type of versioning required on the parent library.\n"
  example: []
  syntax:
    content: public static void PublishFileToLevel(this File file, FileLevel level)
    parameters:
    - id: file
      type: Microsoft.SharePoint.Client.File
      description: Target file to publish.
    - id: level
      type: Microsoft.SharePoint.Client.FileLevel
      description: Target publish direction (Draft and Published only apply, Checkout is ignored).
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub PublishFileToLevel(file As File, level As FileLevel)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevel*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevelAsync(Microsoft.SharePoint.Client.File,Microsoft.SharePoint.Client.FileLevel)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevelAsync(Microsoft.SharePoint.Client.File,Microsoft.SharePoint.Client.FileLevel)
  id: PublishFileToLevelAsync(Microsoft.SharePoint.Client.File,Microsoft.SharePoint.Client.FileLevel)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: PublishFileToLevelAsync(File, FileLevel)
  nameWithType: FileFolderExtensions.PublishFileToLevelAsync(File, FileLevel)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevelAsync(Microsoft.SharePoint.Client.File, Microsoft.SharePoint.Client.FileLevel)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: PublishFileToLevelAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 1905
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nPublishes a file based on the type of versioning required on the parent library.\n"
  example: []
  syntax:
    content: public static async Task PublishFileToLevelAsync(this File file, FileLevel level)
    parameters:
    - id: file
      type: Microsoft.SharePoint.Client.File
      description: Target file to publish.
    - id: level
      type: Microsoft.SharePoint.Client.FileLevel
      description: Target publish direction (Draft and Published only apply, Checkout is ignored).
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PublishFileToLevelAsync(file As File, level As FileLevel) As Task
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevelAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionAsync(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionAsync(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  id: ResetFileToPreviousVersionAsync(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: ResetFileToPreviousVersionAsync(Web, String, CheckinType, String)
  nameWithType: FileFolderExtensions.ResetFileToPreviousVersionAsync(Web, String, CheckinType, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionAsync(Microsoft.SharePoint.Client.Web, System.String, Microsoft.SharePoint.Client.CheckinType, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ResetFileToPreviousVersionAsync
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 2020
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nResets a file to its previous version.\n"
  example: []
  syntax:
    content: public static async Task ResetFileToPreviousVersionAsync(this Web web, string serverRelativeUrl, CheckinType checkinType, string comment)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL of the file to process
    - id: checkinType
      type: Microsoft.SharePoint.Client.CheckinType
      description: The type of the checkin
    - id: comment
      type: System.String
      description: Message to be recorded with the approval
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ResetFileToPreviousVersionAsync(web As Web, serverRelativeUrl As String, checkinType As CheckinType, comment As String) As Task
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersion(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersion(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  id: ResetFileToPreviousVersion(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: ResetFileToPreviousVersion(Web, String, CheckinType, String)
  nameWithType: FileFolderExtensions.ResetFileToPreviousVersion(Web, String, CheckinType, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersion(Microsoft.SharePoint.Client.Web, System.String, Microsoft.SharePoint.Client.CheckinType, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ResetFileToPreviousVersion
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 2033
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nResets a file to its previous version.\n"
  example: []
  syntax:
    content: public static void ResetFileToPreviousVersion(this Web web, string serverRelativeUrl, CheckinType checkinType, string comment)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL of the file to process
    - id: checkinType
      type: Microsoft.SharePoint.Client.CheckinType
      description: The type of the checkin
    - id: comment
      type: System.String
      description: Message to be recorded with the approval
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ResetFileToPreviousVersion(web As Web, serverRelativeUrl As String, checkinType As CheckinType, comment As String)
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersion*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionImplementation(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  commentId: M:Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionImplementation(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  id: ResetFileToPreviousVersionImplementation(Microsoft.SharePoint.Client.Web,System.String,Microsoft.SharePoint.Client.CheckinType,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.FileFolderExtensions
  langs:
  - csharp
  - vb
  name: ResetFileToPreviousVersionImplementation(Web, String, CheckinType, String)
  nameWithType: FileFolderExtensions.ResetFileToPreviousVersionImplementation(Web, String, CheckinType, String)
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionImplementation(Microsoft.SharePoint.Client.Web, System.String, Microsoft.SharePoint.Client.CheckinType, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ResetFileToPreviousVersionImplementation
    path: ../src/lib/PnP.Framework/Extensions/FileFolderExtensions.cs
    startLine: 2045
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks in a file\n"
  example: []
  syntax:
    content: public static async Task ResetFileToPreviousVersionImplementation(this Web web, string serverRelativeUrl, CheckinType checkinType, string comment)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web to process
    - id: serverRelativeUrl
      type: System.String
      description: The server relative URL of the file to checkin
    - id: checkinType
      type: Microsoft.SharePoint.Client.CheckinType
      description: The type of the checkin
    - id: comment
      type: System.String
      description: Message to be recorded with the approval
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ResetFileToPreviousVersionImplementation(web As Web, serverRelativeUrl As String, checkinType As CheckinType, comment As String) As Task
  overload: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionImplementation*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.SharePoint.Client
  commentId: N:Microsoft.SharePoint.Client
  name: Microsoft.SharePoint.Client
  nameWithType: Microsoft.SharePoint.Client
  fullName: Microsoft.SharePoint.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFile*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFile
  name: ApproveFile
  nameWithType: FileFolderExtensions.ApproveFile
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFile
- uid: Microsoft.SharePoint.Client.Web
  commentId: T:Microsoft.SharePoint.Client.Web
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: Web
  nameWithType: Web
  fullName: Microsoft.SharePoint.Client.Web
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFileAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFileAsync
  name: ApproveFileAsync
  nameWithType: FileFolderExtensions.ApproveFileAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ApproveFileAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFile*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFile
  name: CheckInFile
  nameWithType: FileFolderExtensions.CheckInFile
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFile
- uid: Microsoft.SharePoint.Client.CheckinType
  commentId: T:Microsoft.SharePoint.Client.CheckinType
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: CheckinType
  nameWithType: CheckinType
  fullName: Microsoft.SharePoint.Client.CheckinType
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileAsync
  name: CheckInFileAsync
  nameWithType: FileFolderExtensions.CheckInFileAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileImplementation*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileImplementation
  name: CheckInFileImplementation
  nameWithType: FileFolderExtensions.CheckInFileImplementation
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CheckInFileImplementation
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFile*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFile
  name: CheckOutFile
  nameWithType: FileFolderExtensions.CheckOutFile
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFile
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFileAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFileAsync
  name: CheckOutFileAsync
  nameWithType: FileFolderExtensions.CheckOutFileAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CheckOutFileAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSet*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSet
  name: CreateDocumentSet
  nameWithType: FileFolderExtensions.CreateDocumentSet
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSet
- uid: Microsoft.SharePoint.Client.Folder
  commentId: T:Microsoft.SharePoint.Client.Folder
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: Folder
  nameWithType: Folder
  fullName: Microsoft.SharePoint.Client.Folder
- uid: Microsoft.SharePoint.Client.ContentTypeId
  commentId: T:Microsoft.SharePoint.Client.ContentTypeId
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: ContentTypeId
  nameWithType: ContentTypeId
  fullName: Microsoft.SharePoint.Client.ContentTypeId
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSetAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSetAsync
  name: CreateDocumentSetAsync
  nameWithType: FileFolderExtensions.CreateDocumentSetAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CreateDocumentSetAsync
- uid: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.Folder}
  commentId: T:System.Threading.Tasks.Task{Microsoft.SharePoint.Client.Folder}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Folder>
  nameWithType: Task<Folder>
  fullName: System.Threading.Tasks.Task<Microsoft.SharePoint.Client.Folder>
  nameWithType.vb: Task(Of Folder)
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.SharePoint.Client.Folder)
  name.vb: Task(Of Folder)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SharePoint.Client.Folder
    name: Folder
    nameWithType: Folder
    fullName: Microsoft.SharePoint.Client.Folder
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SharePoint.Client.Folder
    name: Folder
    nameWithType: Folder
    fullName: Microsoft.SharePoint.Client.Folder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSet*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSet
  name: ConvertFolderToDocumentSet
  nameWithType: FileFolderExtensions.ConvertFolderToDocumentSet
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSet
- uid: Microsoft.SharePoint.Client.List
  commentId: T:Microsoft.SharePoint.Client.List
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: List
  nameWithType: List
  fullName: Microsoft.SharePoint.Client.List
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSetAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSetAsync
  name: ConvertFolderToDocumentSetAsync
  nameWithType: FileFolderExtensions.ConvertFolderToDocumentSetAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ConvertFolderToDocumentSetAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolder*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolder
  name: CreateFolder
  nameWithType: FileFolderExtensions.CreateFolder
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolder
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolderAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolderAsync
  name: CreateFolderAsync
  nameWithType: FileFolderExtensions.CreateFolderAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.CreateFolderAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExists*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExists
  name: DoesFolderExists
  nameWithType: FileFolderExtensions.DoesFolderExists
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExistsAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExistsAsync
  name: DoesFolderExistsAsync
  nameWithType: FileFolderExtensions.DoesFolderExistsAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.DoesFolderExistsAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder
  name: EnsureFolder
  nameWithType: FileFolderExtensions.EnsureFolder
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolder
- uid: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.Folder,System.Object}}[]
  isExternal: true
  name: Expression<Func<Folder, Object>>[]
  nameWithType: Expression<Func<Folder, Object>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Folder, System.Object>>[]
  nameWithType.vb: Expression(Of Func(Of Folder, Object))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.Folder, System.Object))()
  name.vb: Expression(Of Func(Of Folder, Object))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SharePoint.Client.Folder
    name: Folder
    nameWithType: Folder
    fullName: Microsoft.SharePoint.Client.Folder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SharePoint.Client.Folder
    name: Folder
    nameWithType: Folder
    fullName: Microsoft.SharePoint.Client.Folder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync
  name: EnsureFolderAsync
  nameWithType: FileFolderExtensions.EnsureFolderAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderImplementation*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderImplementation
  name: EnsureFolderImplementation
  nameWithType: FileFolderExtensions.EnsureFolderImplementation
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderImplementation
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPath*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPath
  name: EnsureFolderPath
  nameWithType: FileFolderExtensions.EnsureFolderPath
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPath
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPathAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPathAsync
  name: EnsureFolderPathAsync
  nameWithType: FileFolderExtensions.EnsureFolderPathAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.EnsureFolderPathAsync
- uid: Microsoft.SharePoint.Client.File
  commentId: T:Microsoft.SharePoint.Client.File
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: File
  nameWithType: File
  fullName: Microsoft.SharePoint.Client.File
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles
  name: FindFiles
  nameWithType: FileFolderExtensions.FindFiles
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FindFiles
- uid: System.Collections.Generic.List{Microsoft.SharePoint.Client.File}
  commentId: T:System.Collections.Generic.List{Microsoft.SharePoint.Client.File}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<File>
  nameWithType: List<File>
  fullName: System.Collections.Generic.List<Microsoft.SharePoint.Client.File>
  nameWithType.vb: List(Of File)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.SharePoint.Client.File)
  name.vb: List(Of File)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SharePoint.Client.File
    name: File
    nameWithType: File
    fullName: Microsoft.SharePoint.Client.File
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SharePoint.Client.File
    name: File
    nameWithType: File
    fullName: Microsoft.SharePoint.Client.File
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync
  name: FindFilesAsync
  nameWithType: FileFolderExtensions.FindFilesAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FindFilesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Microsoft.SharePoint.Client.File}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Microsoft.SharePoint.Client.File}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<File>>
  nameWithType: Task<List<File>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Microsoft.SharePoint.Client.File>>
  nameWithType.vb: Task(Of List(Of File))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Microsoft.SharePoint.Client.File))
  name.vb: Task(Of List(Of File))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SharePoint.Client.File
    name: File
    nameWithType: File
    fullName: Microsoft.SharePoint.Client.File
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SharePoint.Client.File
    name: File
    nameWithType: File
    fullName: Microsoft.SharePoint.Client.File
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExists*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.FolderExists
  name: FolderExists
  nameWithType: FileFolderExtensions.FolderExists
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExists
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExistsAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.FolderExistsAsync
  name: FolderExistsAsync
  nameWithType: FileFolderExtensions.FolderExistsAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.FolderExistsAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsString*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsString
  name: GetFileAsString
  nameWithType: FileFolderExtensions.GetFileAsString
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsString
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsStringAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsStringAsync
  name: GetFileAsStringAsync
  nameWithType: FileFolderExtensions.GetFileAsStringAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsStringAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFile*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.PublishFile
  name: PublishFile
  nameWithType: FileFolderExtensions.PublishFile
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFile
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileAsync
  name: PublishFileAsync
  nameWithType: FileFolderExtensions.PublishFileAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolder*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolder
  name: ResolveSubFolder
  nameWithType: FileFolderExtensions.ResolveSubFolder
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolder
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolderAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolderAsync
  name: ResolveSubFolderAsync
  nameWithType: FileFolderExtensions.ResolveSubFolderAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ResolveSubFolderAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocal*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocal
  name: SaveFileToLocal
  nameWithType: FileFolderExtensions.SaveFileToLocal
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocal
- uid: System.Func{System.String,System.Boolean}
  commentId: T:System.Func{System.String,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<String, Boolean>
  nameWithType: Func<String, Boolean>
  fullName: System.Func<System.String, System.Boolean>
  nameWithType.vb: Func(Of String, Boolean)
  fullName.vb: System.Func(Of System.String, System.Boolean)
  name.vb: Func(Of String, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalAsync
  name: SaveFileToLocalAsync
  nameWithType: FileFolderExtensions.SaveFileToLocalAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalImplementation*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalImplementation
  name: SaveFileToLocalImplementation
  nameWithType: FileFolderExtensions.SaveFileToLocalImplementation
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.SaveFileToLocalImplementation
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFile*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.UploadFile
  name: UploadFile
  nameWithType: FileFolderExtensions.UploadFile
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFile
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFileAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.UploadFileAsync
  name: UploadFileAsync
  nameWithType: FileFolderExtensions.UploadFileAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.UploadFileAsync
- uid: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.File}
  commentId: T:System.Threading.Tasks.Task{Microsoft.SharePoint.Client.File}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<File>
  nameWithType: Task<File>
  fullName: System.Threading.Tasks.Task<Microsoft.SharePoint.Client.File>
  nameWithType.vb: Task(Of File)
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.SharePoint.Client.File)
  name.vb: Task(Of File)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SharePoint.Client.File
    name: File
    nameWithType: File
    fullName: Microsoft.SharePoint.Client.File
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SharePoint.Client.File
    name: File
    nameWithType: File
    fullName: Microsoft.SharePoint.Client.File
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.GetFile*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.GetFile
  name: GetFile
  nameWithType: FileFolderExtensions.GetFile
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.GetFile
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsync
  name: GetFileAsync
  nameWithType: FileFolderExtensions.GetFileAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.GetFileAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequired*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequired
  name: VerifyIfUploadRequired
  nameWithType: FileFolderExtensions.VerifyIfUploadRequired
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequired
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredAsync
  name: VerifyIfUploadRequiredAsync
  nameWithType: FileFolderExtensions.VerifyIfUploadRequiredAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredImplementation*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredImplementation
  name: VerifyIfUploadRequiredImplementation
  nameWithType: FileFolderExtensions.VerifyIfUploadRequiredImplementation
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.VerifyIfUploadRequiredImplementation
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.SetFileProperties*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.SetFileProperties
  name: SetFileProperties
  nameWithType: FileFolderExtensions.SetFileProperties
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.SetFileProperties
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.SetFilePropertiesAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.SetFilePropertiesAsync
  name: SetFilePropertiesAsync
  nameWithType: FileFolderExtensions.SetFilePropertiesAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.SetFilePropertiesAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevel*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevel
  name: PublishFileToLevel
  nameWithType: FileFolderExtensions.PublishFileToLevel
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevel
- uid: Microsoft.SharePoint.Client.FileLevel
  commentId: T:Microsoft.SharePoint.Client.FileLevel
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: FileLevel
  nameWithType: FileLevel
  fullName: Microsoft.SharePoint.Client.FileLevel
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevelAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevelAsync
  name: PublishFileToLevelAsync
  nameWithType: FileFolderExtensions.PublishFileToLevelAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.PublishFileToLevelAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionAsync*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionAsync
  name: ResetFileToPreviousVersionAsync
  nameWithType: FileFolderExtensions.ResetFileToPreviousVersionAsync
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionAsync
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersion*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersion
  name: ResetFileToPreviousVersion
  nameWithType: FileFolderExtensions.ResetFileToPreviousVersion
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersion
- uid: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionImplementation*
  commentId: Overload:Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionImplementation
  name: ResetFileToPreviousVersionImplementation
  nameWithType: FileFolderExtensions.ResetFileToPreviousVersionImplementation
  fullName: Microsoft.SharePoint.Client.FileFolderExtensions.ResetFileToPreviousVersionImplementation

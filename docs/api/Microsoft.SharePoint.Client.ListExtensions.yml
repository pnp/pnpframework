### YamlMime:ManagedReference
items:
- uid: Microsoft.SharePoint.Client.ListExtensions
  commentId: T:Microsoft.SharePoint.Client.ListExtensions
  id: ListExtensions
  parent: Microsoft.SharePoint.Client
  children:
  - Microsoft.SharePoint.Client.ListExtensions.AddIndexedPropertyBagKey(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.AddRemoteEventReceiver(Microsoft.SharePoint.Client.List,System.String,System.String,Microsoft.SharePoint.Client.EventReceiverType,Microsoft.SharePoint.Client.EventReceiverSynchronization,System.Boolean)
  - Microsoft.SharePoint.Client.ListExtensions.AddRemoteEventReceiver(Microsoft.SharePoint.Client.List,System.String,System.String,Microsoft.SharePoint.Client.EventReceiverType,Microsoft.SharePoint.Client.EventReceiverSynchronization,System.Int32,System.Boolean)
  - Microsoft.SharePoint.Client.ListExtensions.AddWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.DateTime,System.String,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.AddWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.Int32,System.String,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues(Microsoft.SharePoint.Client.List)
  - Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue})
  - Microsoft.SharePoint.Client.ListExtensions.CreateDocumentLibrary(Microsoft.SharePoint.Client.Web,System.String,System.Boolean,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.CreateList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.ListTemplateType,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)
  - Microsoft.SharePoint.Client.ListExtensions.CreateList(Microsoft.SharePoint.Client.Web,System.Guid,System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)
  - Microsoft.SharePoint.Client.ListExtensions.CreateView(Microsoft.SharePoint.Client.List,System.String,Microsoft.SharePoint.Client.ViewType,System.String[],System.UInt32,System.Boolean,System.String,System.Boolean,System.Boolean)
  - Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXML(Microsoft.SharePoint.Client.List,System.Xml.XmlDocument)
  - Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXML(Microsoft.SharePoint.Client.Web,System.String,System.Xml.XmlDocument)
  - Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLFile(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLFile(Microsoft.SharePoint.Client.Web,System.String,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLString(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLString(Microsoft.SharePoint.Client.Web,System.String,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.EnableClassicAudienceTargeting(Microsoft.SharePoint.Client.List)
  - Microsoft.SharePoint.Client.ListExtensions.EnableModernAudienceTargeting(Microsoft.SharePoint.Client.List)
  - Microsoft.SharePoint.Client.ListExtensions.GetDefaultColumnValues(Microsoft.SharePoint.Client.List)
  - Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverById(Microsoft.SharePoint.Client.List,System.Guid)
  - Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverByName(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.GetIndexedPropertyBagKeys(Microsoft.SharePoint.Client.List)
  - Microsoft.SharePoint.Client.ListExtensions.GetListById(Microsoft.SharePoint.Client.Web,System.Guid,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[])
  - Microsoft.SharePoint.Client.ListExtensions.GetListByTitle(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[])
  - Microsoft.SharePoint.Client.ListExtensions.GetListByUrl(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[])
  - Microsoft.SharePoint.Client.ListExtensions.GetListID(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.GetPagesLibrary(Microsoft.SharePoint.Client.Web)
  - Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueDateTime(Microsoft.SharePoint.Client.List,System.String,System.DateTime)
  - Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueInt(Microsoft.SharePoint.Client.List,System.String,System.Int32)
  - Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueString(Microsoft.SharePoint.Client.List,System.String,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.GetViewById(Microsoft.SharePoint.Client.List,System.Guid,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.View,System.Object}}[])
  - Microsoft.SharePoint.Client.ListExtensions.GetViewByName(Microsoft.SharePoint.Client.List,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.View,System.Object}}[])
  - Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptions(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptionsAsync(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.GetWebRelativeUrl(Microsoft.SharePoint.Client.List)
  - Microsoft.SharePoint.Client.ListExtensions.IsCreatedFromTemplate(Microsoft.SharePoint.Client.List)
  - Microsoft.SharePoint.Client.ListExtensions.ListExists(Microsoft.SharePoint.Client.Web,System.Guid)
  - Microsoft.SharePoint.Client.ListExtensions.ListExists(Microsoft.SharePoint.Client.Web,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.ListExists(Microsoft.SharePoint.Client.Web,System.Uri)
  - Microsoft.SharePoint.Client.ListExtensions.PropertyBagContainsKey(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.ReIndexList(Microsoft.SharePoint.Client.List)
  - Microsoft.SharePoint.Client.ListExtensions.RemoveContentTypeByName(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.RemoveIndexedPropertyBagKey(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.RemovePropertyBagValue(Microsoft.SharePoint.Client.List,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.WebhookSubscription,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription(Microsoft.SharePoint.Client.List,System.Guid,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue})
  - Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue},System.Boolean)
  - Microsoft.SharePoint.Client.ListExtensions.SetJSLinkCustomizations(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.PageType,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.SetJSLinkCustomizations(Microsoft.SharePoint.Client.List,System.String,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.SetListPermission(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Principal,Microsoft.SharePoint.Client.RoleType)
  - Microsoft.SharePoint.Client.ListExtensions.SetListPermission(Microsoft.SharePoint.Client.List,PnP.Framework.Enums.BuiltInIdentity,Microsoft.SharePoint.Client.RoleType)
  - Microsoft.SharePoint.Client.ListExtensions.SetLocalizationLabelsForList(Microsoft.SharePoint.Client.List,System.String,System.String,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.SetLocalizationLabelsForList(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue(Microsoft.SharePoint.Client.List,System.String,System.DateTime)
  - Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue(Microsoft.SharePoint.Client.List,System.String,System.Int32)
  - Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue(Microsoft.SharePoint.Client.List,System.String,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.UpdateListVersioning(Microsoft.SharePoint.Client.List,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.SharePoint.Client.ListExtensions.UpdateListVersioning(Microsoft.SharePoint.Client.Web,System.String,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web,System.String,System.String,Microsoft.SharePoint.Client.Taxonomy.Term,System.Boolean)
  - Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Guid,System.Boolean)
  - Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Guid,System.Guid,System.Boolean)
  - Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.WebhookSubscription,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,System.Guid,System.DateTime,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,System.Guid,System.String,System.DateTime,System.String)
  - Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.String,System.DateTime,System.String)
  langs:
  - csharp
  - vb
  name: ListExtensions
  nameWithType: ListExtensions
  fullName: Microsoft.SharePoint.Client.ListExtensions
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ListExtensions
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 27
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nClass that provides generic list creation and manipulation methods\n"
  example: []
  syntax:
    content: public static class ListExtensions
    content.vb: Public Module ListExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.SharePoint.Client.ListExtensions.AddRemoteEventReceiver(Microsoft.SharePoint.Client.List,System.String,System.String,Microsoft.SharePoint.Client.EventReceiverType,Microsoft.SharePoint.Client.EventReceiverSynchronization,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.AddRemoteEventReceiver(Microsoft.SharePoint.Client.List,System.String,System.String,Microsoft.SharePoint.Client.EventReceiverType,Microsoft.SharePoint.Client.EventReceiverSynchronization,System.Boolean)
  id: AddRemoteEventReceiver(Microsoft.SharePoint.Client.List,System.String,System.String,Microsoft.SharePoint.Client.EventReceiverType,Microsoft.SharePoint.Client.EventReceiverSynchronization,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: AddRemoteEventReceiver(List, String, String, EventReceiverType, EventReceiverSynchronization, Boolean)
  nameWithType: ListExtensions.AddRemoteEventReceiver(List, String, String, EventReceiverType, EventReceiverSynchronization, Boolean)
  fullName: Microsoft.SharePoint.Client.ListExtensions.AddRemoteEventReceiver(Microsoft.SharePoint.Client.List, System.String, System.String, Microsoft.SharePoint.Client.EventReceiverType, Microsoft.SharePoint.Client.EventReceiverSynchronization, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddRemoteEventReceiver
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 48
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRegisters a remote event receiver\n"
  example: []
  syntax:
    content: public static EventReceiverDefinition AddRemoteEventReceiver(this List list, string name, string url, EventReceiverType eventReceiverType, EventReceiverSynchronization synchronization, bool force)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process
    - id: name
      type: System.String
      description: The name of the event receiver (needs to be unique among the event receivers registered on this list)
    - id: url
      type: System.String
      description: The URL of the remote WCF service that handles the event
    - id: eventReceiverType
      type: Microsoft.SharePoint.Client.EventReceiverType
      description: ''
    - id: synchronization
      type: Microsoft.SharePoint.Client.EventReceiverSynchronization
      description: ''
    - id: force
      type: System.Boolean
      description: If True any event already registered with the same name will be removed first.
    return:
      type: Microsoft.SharePoint.Client.EventReceiverDefinition
      description: Returns an EventReceiverDefinition if succeeded. Returns null if failed.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRemoteEventReceiver(list As List, name As String, url As String, eventReceiverType As EventReceiverType, synchronization As EventReceiverSynchronization, force As Boolean) As EventReceiverDefinition
  overload: Microsoft.SharePoint.Client.ListExtensions.AddRemoteEventReceiver*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.AddRemoteEventReceiver(Microsoft.SharePoint.Client.List,System.String,System.String,Microsoft.SharePoint.Client.EventReceiverType,Microsoft.SharePoint.Client.EventReceiverSynchronization,System.Int32,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.AddRemoteEventReceiver(Microsoft.SharePoint.Client.List,System.String,System.String,Microsoft.SharePoint.Client.EventReceiverType,Microsoft.SharePoint.Client.EventReceiverSynchronization,System.Int32,System.Boolean)
  id: AddRemoteEventReceiver(Microsoft.SharePoint.Client.List,System.String,System.String,Microsoft.SharePoint.Client.EventReceiverType,Microsoft.SharePoint.Client.EventReceiverSynchronization,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: AddRemoteEventReceiver(List, String, String, EventReceiverType, EventReceiverSynchronization, Int32, Boolean)
  nameWithType: ListExtensions.AddRemoteEventReceiver(List, String, String, EventReceiverType, EventReceiverSynchronization, Int32, Boolean)
  fullName: Microsoft.SharePoint.Client.ListExtensions.AddRemoteEventReceiver(Microsoft.SharePoint.Client.List, System.String, System.String, Microsoft.SharePoint.Client.EventReceiverType, Microsoft.SharePoint.Client.EventReceiverSynchronization, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddRemoteEventReceiver
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 64
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRegisters a remote event receiver\n"
  example: []
  syntax:
    content: public static EventReceiverDefinition AddRemoteEventReceiver(this List list, string name, string url, EventReceiverType eventReceiverType, EventReceiverSynchronization synchronization, int sequenceNumber, bool force)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process
    - id: name
      type: System.String
      description: The name of the event receiver (needs to be unique among the event receivers registered on this list)
    - id: url
      type: System.String
      description: The URL of the remote WCF service that handles the event
    - id: eventReceiverType
      type: Microsoft.SharePoint.Client.EventReceiverType
      description: ''
    - id: synchronization
      type: Microsoft.SharePoint.Client.EventReceiverSynchronization
      description: ''
    - id: sequenceNumber
      type: System.Int32
      description: ''
    - id: force
      type: System.Boolean
      description: If True any event already registered with the same name will be removed first.
    return:
      type: Microsoft.SharePoint.Client.EventReceiverDefinition
      description: Returns an EventReceiverDefinition if succeeded. Returns null if failed.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRemoteEventReceiver(list As List, name As String, url As String, eventReceiverType As EventReceiverType, synchronization As EventReceiverSynchronization, sequenceNumber As Integer, force As Boolean) As EventReceiverDefinition
  overload: Microsoft.SharePoint.Client.ListExtensions.AddRemoteEventReceiver*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverById(Microsoft.SharePoint.Client.List,System.Guid)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverById(Microsoft.SharePoint.Client.List,System.Guid)
  id: GetEventReceiverById(Microsoft.SharePoint.Client.List,System.Guid)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetEventReceiverById(List, Guid)
  nameWithType: ListExtensions.GetEventReceiverById(List, Guid)
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverById(Microsoft.SharePoint.Client.List, System.Guid)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetEventReceiverById
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 107
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns an event receiver definition\n"
  example: []
  syntax:
    content: public static EventReceiverDefinition GetEventReceiverById(this List list, Guid id)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The target list
    - id: id
      type: System.Guid
      description: Id of the event receiver
    return:
      type: Microsoft.SharePoint.Client.EventReceiverDefinition
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetEventReceiverById(list As List, id As Guid) As EventReceiverDefinition
  overload: Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverByName(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverByName(Microsoft.SharePoint.Client.List,System.String)
  id: GetEventReceiverByName(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetEventReceiverByName(List, String)
  nameWithType: ListExtensions.GetEventReceiverByName(List, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverByName(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetEventReceiverByName
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 130
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns an event receiver definition\n"
  example: []
  syntax:
    content: public static EventReceiverDefinition GetEventReceiverByName(this List list, string name)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process
    - id: name
      type: System.String
      description: Name of the event receiver
    return:
      type: Microsoft.SharePoint.Client.EventReceiverDefinition
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetEventReceiverByName(list As List, name As String) As EventReceiverDefinition
  overload: Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverByName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.AddWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.DateTime,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.AddWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.DateTime,System.String,System.String)
  id: AddWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.DateTime,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: AddWebhookSubscription(List, String, DateTime, String, String)
  nameWithType: ListExtensions.AddWebhookSubscription(List, String, DateTime, String, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.AddWebhookSubscription(Microsoft.SharePoint.Client.List, System.String, System.DateTime, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddWebhookSubscription
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 160
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdd the a Webhook subscription to a list\nNote: If the access token is not specified, it will cost a dummy request to retrieve it\n"
  example: []
  syntax:
    content: public static WebhookSubscription AddWebhookSubscription(this List list, string notificationUrl, DateTime expirationDate, string clientState = null, string accessToken = null)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to add a Webhook subscription to
    - id: notificationUrl
      type: System.String
      description: The Webhook endpoint URL
    - id: expirationDate
      type: System.DateTime
      description: The expiration date of the subscription
    - id: clientState
      type: System.String
      description: The client state to use in the Webhook subscription
    - id: accessToken
      type: System.String
      description: (optional) The access token to SharePoint
    return:
      type: PnP.Framework.Entities.WebhookSubscription
      description: The added subscription object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddWebhookSubscription(list As List, notificationUrl As String, expirationDate As Date, clientState As String = Nothing, accessToken As String = Nothing) As WebhookSubscription
  overload: Microsoft.SharePoint.Client.ListExtensions.AddWebhookSubscription*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.AddWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.Int32,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.AddWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.Int32,System.String,System.String)
  id: AddWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.Int32,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: AddWebhookSubscription(List, String, Int32, String, String)
  nameWithType: ListExtensions.AddWebhookSubscription(List, String, Int32, String, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.AddWebhookSubscription(Microsoft.SharePoint.Client.List, System.String, System.Int32, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddWebhookSubscription
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 196
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdd the a Webhook subscription to a list\nNote: If the access token is not specified, it will cost a dummy request to retrieve it\n"
  example: []
  syntax:
    content: public static WebhookSubscription AddWebhookSubscription(this List list, string notificationUrl, int validityInMonths = 6, string clientState = null, string accessToken = null)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to add a Webhook subscription to
    - id: notificationUrl
      type: System.String
      description: The Webhook endpoint URL
    - id: validityInMonths
      type: System.Int32
      description: The validity of the subscriptions in months
    - id: clientState
      type: System.String
      description: The client state to use in the Webhook subscription
    - id: accessToken
      type: System.String
      description: (optional) The access token to SharePoint
    return:
      type: PnP.Framework.Entities.WebhookSubscription
      description: The added subscription object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddWebhookSubscription(list As List, notificationUrl As String, validityInMonths As Integer = 6, clientState As String = Nothing, accessToken As String = Nothing) As WebhookSubscription
  overload: Microsoft.SharePoint.Client.ListExtensions.AddWebhookSubscription*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.String,System.DateTime,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.String,System.DateTime,System.String)
  id: UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.String,System.DateTime,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: UpdateWebhookSubscription(List, String, String, DateTime, String)
  nameWithType: ListExtensions.UpdateWebhookSubscription(List, String, String, DateTime, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List, System.String, System.String, System.DateTime, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UpdateWebhookSubscription
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 225
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUpdates a Webhook subscription from the list\nNote: If the access token is not specified, it will cost a dummy request to retrieve it\n"
  example: []
  syntax:
    content: public static bool UpdateWebhookSubscription(this List list, string subscriptionId, string webHookEndPoint, DateTime expirationDateTime, string accessToken = null)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to remove the Webhook subscription from
    - id: subscriptionId
      type: System.String
      description: The id of the subscription to remove
    - id: webHookEndPoint
      type: System.String
      description: Url of the web hook service endpoint (the one that will be called during an event)
    - id: expirationDateTime
      type: System.DateTime
      description: New web hook expiration date
    - id: accessToken
      type: System.String
      description: (optional) The access token to SharePoint
    return:
      type: System.Boolean
      description: <code>true</code> if the update succeeded, <code>false</code> otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateWebhookSubscription(list As List, subscriptionId As String, webHookEndPoint As String, expirationDateTime As Date, accessToken As String = Nothing) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,System.Guid,System.DateTime,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,System.Guid,System.DateTime,System.String)
  id: UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,System.Guid,System.DateTime,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: UpdateWebhookSubscription(List, Guid, DateTime, String)
  nameWithType: ListExtensions.UpdateWebhookSubscription(List, Guid, DateTime, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List, System.Guid, System.DateTime, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UpdateWebhookSubscription
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 253
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUpdates a Webhook subscription from the list\nNote: If the access token is not specified, it will cost a dummy request to retrieve it\n"
  example: []
  syntax:
    content: public static bool UpdateWebhookSubscription(this List list, Guid subscriptionId, DateTime expirationDateTime, string accessToken = null)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to remove the Webhook subscription from
    - id: subscriptionId
      type: System.Guid
      description: The id of the subscription to remove
    - id: expirationDateTime
      type: System.DateTime
      description: New web hook expiration date
    - id: accessToken
      type: System.String
      description: (optional) The access token to SharePoint
    return:
      type: System.Boolean
      description: <code>true</code> if the update succeeded, <code>false</code> otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateWebhookSubscription(list As List, subscriptionId As Guid, expirationDateTime As Date, accessToken As String = Nothing) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,System.Guid,System.String,System.DateTime,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,System.Guid,System.String,System.DateTime,System.String)
  id: UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,System.Guid,System.String,System.DateTime,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: UpdateWebhookSubscription(List, Guid, String, DateTime, String)
  nameWithType: ListExtensions.UpdateWebhookSubscription(List, Guid, String, DateTime, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List, System.Guid, System.String, System.DateTime, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UpdateWebhookSubscription
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 268
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUpdates a Webhook subscription from the list\nNote: If the access token is not specified, it will cost a dummy request to retrieve it\n"
  example: []
  syntax:
    content: public static bool UpdateWebhookSubscription(this List list, Guid subscriptionId, string webHookEndPoint, DateTime expirationDateTime, string accessToken = null)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to remove the Webhook subscription from
    - id: subscriptionId
      type: System.Guid
      description: The id of the subscription to remove
    - id: webHookEndPoint
      type: System.String
      description: Url of the web hook service endpoint (the one that will be called during an event)
    - id: expirationDateTime
      type: System.DateTime
      description: New web hook expiration date
    - id: accessToken
      type: System.String
      description: (optional) The access token to SharePoint
    return:
      type: System.Boolean
      description: <code>true</code> if the update succeeded, <code>false</code> otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateWebhookSubscription(list As List, subscriptionId As Guid, webHookEndPoint As String, expirationDateTime As Date, accessToken As String = Nothing) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.WebhookSubscription,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.WebhookSubscription,System.String)
  id: UpdateWebhookSubscription(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.WebhookSubscription,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: UpdateWebhookSubscription(List, WebhookSubscription, String)
  nameWithType: ListExtensions.UpdateWebhookSubscription(List, WebhookSubscription, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription(Microsoft.SharePoint.Client.List, PnP.Framework.Entities.WebhookSubscription, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UpdateWebhookSubscription
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 281
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUpdates a Webhook subscription from the list\nNote: If the access token is not specified, it will cost a dummy request to retrieve it\n"
  example: []
  syntax:
    content: public static bool UpdateWebhookSubscription(this List list, WebhookSubscription subscription, string accessToken = null)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to remove the Webhook subscription from
    - id: subscription
      type: PnP.Framework.Entities.WebhookSubscription
      description: The subscription to update
    - id: accessToken
      type: System.String
      description: (optional) The access token to SharePoint
    return:
      type: System.Boolean
      description: <code>true</code> if the update succeeded, <code>false</code> otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateWebhookSubscription(list As List, subscription As WebhookSubscription, accessToken As String = Nothing) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.String)
  id: RemoveWebhookSubscription(Microsoft.SharePoint.Client.List,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: RemoveWebhookSubscription(List, String, String)
  nameWithType: ListExtensions.RemoveWebhookSubscription(List, String, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription(Microsoft.SharePoint.Client.List, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RemoveWebhookSubscription
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 294
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemove a Webhook subscription from the list\nNote: If the access token is not specified, it will cost a dummy request to retrieve it\n"
  example: []
  syntax:
    content: public static bool RemoveWebhookSubscription(this List list, string subscriptionId, string accessToken = null)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to remove the Webhook subscription from
    - id: subscriptionId
      type: System.String
      description: The id of the subscription to remove
    - id: accessToken
      type: System.String
      description: (optional) The access token to SharePoint
    return:
      type: System.Boolean
      description: <code>true</code> if the removal succeeded, <code>false</code> otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RemoveWebhookSubscription(list As List, subscriptionId As String, accessToken As String = Nothing) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription(Microsoft.SharePoint.Client.List,System.Guid,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription(Microsoft.SharePoint.Client.List,System.Guid,System.String)
  id: RemoveWebhookSubscription(Microsoft.SharePoint.Client.List,System.Guid,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: RemoveWebhookSubscription(List, Guid, String)
  nameWithType: ListExtensions.RemoveWebhookSubscription(List, Guid, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription(Microsoft.SharePoint.Client.List, System.Guid, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RemoveWebhookSubscription
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 321
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemove a Webhook subscription from the list\nNote: If the access token is not specified, it will cost a dummy request to retrieve it\n"
  example: []
  syntax:
    content: public static bool RemoveWebhookSubscription(this List list, Guid subscriptionId, string accessToken = null)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to remove the Webhook subscription from
    - id: subscriptionId
      type: System.Guid
      description: The id of the subscription to remove
    - id: accessToken
      type: System.String
      description: (optional) The access token to SharePoint
    return:
      type: System.Boolean
      description: <code>true</code> if the removal succeeded, <code>false</code> otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RemoveWebhookSubscription(list As List, subscriptionId As Guid, accessToken As String = Nothing) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.WebhookSubscription,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.WebhookSubscription,System.String)
  id: RemoveWebhookSubscription(Microsoft.SharePoint.Client.List,PnP.Framework.Entities.WebhookSubscription,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: RemoveWebhookSubscription(List, WebhookSubscription, String)
  nameWithType: ListExtensions.RemoveWebhookSubscription(List, WebhookSubscription, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription(Microsoft.SharePoint.Client.List, PnP.Framework.Entities.WebhookSubscription, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RemoveWebhookSubscription
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 334
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemove a Webhook subscription from the list\nNote: If the access token is not specified, it will cost a dummy request to retrieve it\n"
  example: []
  syntax:
    content: public static bool RemoveWebhookSubscription(this List list, WebhookSubscription subscription, string accessToken = null)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to remove the Webhook subscription from
    - id: subscription
      type: PnP.Framework.Entities.WebhookSubscription
      description: The subscription to remove
    - id: accessToken
      type: System.String
      description: (optional) The access token to SharePoint
    return:
      type: System.Boolean
      description: <code>true</code> if the removal succeeded, <code>false</code> otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RemoveWebhookSubscription(list As List, subscription As WebhookSubscription, accessToken As String = Nothing) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptions(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptions(Microsoft.SharePoint.Client.List,System.String)
  id: GetWebhookSubscriptions(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetWebhookSubscriptions(List, String)
  nameWithType: ListExtensions.GetWebhookSubscriptions(List, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptions(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetWebhookSubscriptions
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 346
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGet all the existing Webhooks subscriptions of the list\nNote: If the access token is not specified, it will cost a dummy request to retrieve it\n"
  example: []
  syntax:
    content: public static IList<WebhookSubscription> GetWebhookSubscriptions(this List list, string accessToken = null)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to get the subscriptions of
    - id: accessToken
      type: System.String
      description: (optional) The access token to SharePoint
    return:
      type: System.Collections.Generic.IList{PnP.Framework.Entities.WebhookSubscription}
      description: The collection of Webhooks subscriptions of the list
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetWebhookSubscriptions(list As List, accessToken As String = Nothing) As IList(Of WebhookSubscription)
  overload: Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptions*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptionsAsync(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptionsAsync(Microsoft.SharePoint.Client.List,System.String)
  id: GetWebhookSubscriptionsAsync(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetWebhookSubscriptionsAsync(List, String)
  nameWithType: ListExtensions.GetWebhookSubscriptionsAsync(List, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptionsAsync(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetWebhookSubscriptionsAsync
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 372
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAsync get all the existing Webhooks subscriptions of the list\nNote: If the access token is not specified, it will cost a dummy request to retrieve it\n"
  example: []
  syntax:
    content: public static async Task<IList<WebhookSubscription>> GetWebhookSubscriptionsAsync(this List list, string accessToken = null)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to get the subscriptions of
    - id: accessToken
      type: System.String
      description: (optional) The access token to SharePoint
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{PnP.Framework.Entities.WebhookSubscription}}
      description: The collection of Webhooks subscriptions of the list
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetWebhookSubscriptionsAsync(list As List, accessToken As String = Nothing) As Task(Of IList(Of WebhookSubscription))
  overload: Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptionsAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue(Microsoft.SharePoint.Client.List,System.String,System.Int32)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue(Microsoft.SharePoint.Client.List,System.String,System.Int32)
  id: SetPropertyBagValue(Microsoft.SharePoint.Client.List,System.String,System.Int32)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: SetPropertyBagValue(List, String, Int32)
  nameWithType: ListExtensions.SetPropertyBagValue(List, String, Int32)
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue(Microsoft.SharePoint.Client.List, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetPropertyBagValue
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 403
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSets a key/value pair in the list property bag\n"
  example: []
  syntax:
    content: public static void SetPropertyBagValue(this List list, string key, int value)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process
    - id: key
      type: System.String
      description: Key for the property bag entry
    - id: value
      type: System.Int32
      description: Integer value for the property bag entry
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetPropertyBagValue(list As List, key As String, value As Integer)
  overload: Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue(Microsoft.SharePoint.Client.List,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue(Microsoft.SharePoint.Client.List,System.String,System.String)
  id: SetPropertyBagValue(Microsoft.SharePoint.Client.List,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: SetPropertyBagValue(List, String, String)
  nameWithType: ListExtensions.SetPropertyBagValue(List, String, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue(Microsoft.SharePoint.Client.List, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetPropertyBagValue
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 415
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSets a key/value pair in the list property bag\n"
  example: []
  syntax:
    content: public static void SetPropertyBagValue(this List list, string key, string value)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List that will hold the property bag entry
    - id: key
      type: System.String
      description: Key for the property bag entry
    - id: value
      type: System.String
      description: String value for the property bag entry
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetPropertyBagValue(list As List, key As String, value As String)
  overload: Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue(Microsoft.SharePoint.Client.List,System.String,System.DateTime)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue(Microsoft.SharePoint.Client.List,System.String,System.DateTime)
  id: SetPropertyBagValue(Microsoft.SharePoint.Client.List,System.String,System.DateTime)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: SetPropertyBagValue(List, String, DateTime)
  nameWithType: ListExtensions.SetPropertyBagValue(List, String, DateTime)
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue(Microsoft.SharePoint.Client.List, System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetPropertyBagValue
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 426
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSets a key/value pair in the list property bag\n"
  example: []
  syntax:
    content: public static void SetPropertyBagValue(this List list, string key, DateTime value)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process
    - id: key
      type: System.String
      description: Key for the property bag entry
    - id: value
      type: System.DateTime
      description: Datetime value for the property bag entry
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetPropertyBagValue(list As List, key As String, value As Date)
  overload: Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.RemovePropertyBagValue(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.RemovePropertyBagValue(Microsoft.SharePoint.Client.List,System.String)
  id: RemovePropertyBagValue(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: RemovePropertyBagValue(List, String)
  nameWithType: ListExtensions.RemovePropertyBagValue(List, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.RemovePropertyBagValue(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RemovePropertyBagValue
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 454
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemoves a property bag value from the property bag\n"
  example: []
  syntax:
    content: public static void RemovePropertyBagValue(this List list, string key)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process
    - id: key
      type: System.String
      description: The key to remove
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RemovePropertyBagValue(list As List, key As String)
  overload: Microsoft.SharePoint.Client.ListExtensions.RemovePropertyBagValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueInt(Microsoft.SharePoint.Client.List,System.String,System.Int32)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueInt(Microsoft.SharePoint.Client.List,System.String,System.Int32)
  id: GetPropertyBagValueInt(Microsoft.SharePoint.Client.List,System.String,System.Int32)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetPropertyBagValueInt(List, String, Int32)
  nameWithType: ListExtensions.GetPropertyBagValueInt(List, String, Int32)
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueInt(Microsoft.SharePoint.Client.List, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetPropertyBagValueInt
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 486
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGet int typed property bag value. If does not contain, returns default value.\n"
  example: []
  syntax:
    content: public static int? GetPropertyBagValueInt(this List list, string key, int defaultValue)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to read the property bag value from
    - id: key
      type: System.String
      description: Key of the property bag entry to return
    - id: defaultValue
      type: System.Int32
      description: Default value of the property bag
    return:
      type: System.Nullable{System.Int32}
      description: Value of the property bag entry as integer
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPropertyBagValueInt(list As List, key As String, defaultValue As Integer) As Integer?
  overload: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueInt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueString(Microsoft.SharePoint.Client.List,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueString(Microsoft.SharePoint.Client.List,System.String,System.String)
  id: GetPropertyBagValueString(Microsoft.SharePoint.Client.List,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetPropertyBagValueString(List, String, String)
  nameWithType: ListExtensions.GetPropertyBagValueString(List, String, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueString(Microsoft.SharePoint.Client.List, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetPropertyBagValueString
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 506
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGet string typed property bag value. If does not contain, returns given default value.\n"
  example: []
  syntax:
    content: public static string GetPropertyBagValueString(this List list, string key, string defaultValue)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to read the property bag value from
    - id: key
      type: System.String
      description: Key of the property bag entry to return
    - id: defaultValue
      type: System.String
      description: Default value of the property bag
    return:
      type: System.String
      description: Value of the property bag entry as string
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPropertyBagValueString(list As List, key As String, defaultValue As String) As String
  overload: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueDateTime(Microsoft.SharePoint.Client.List,System.String,System.DateTime)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueDateTime(Microsoft.SharePoint.Client.List,System.String,System.DateTime)
  id: GetPropertyBagValueDateTime(Microsoft.SharePoint.Client.List,System.String,System.DateTime)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetPropertyBagValueDateTime(List, String, DateTime)
  nameWithType: ListExtensions.GetPropertyBagValueDateTime(List, String, DateTime)
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueDateTime(Microsoft.SharePoint.Client.List, System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetPropertyBagValueDateTime
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 526
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGet DateTime typed property bag value. If does not contain, returns default value.\n"
  example: []
  syntax:
    content: public static DateTime? GetPropertyBagValueDateTime(this List list, string key, DateTime defaultValue)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process
    - id: key
      type: System.String
      description: Key of the property bag entry to return
    - id: defaultValue
      type: System.DateTime
      description: ''
    return:
      type: System.Nullable{System.DateTime}
      description: Value of the property bag entry as integer
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPropertyBagValueDateTime(list As List, key As String, defaultValue As Date) As Date?
  overload: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.PropertyBagContainsKey(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.PropertyBagContainsKey(Microsoft.SharePoint.Client.List,System.String)
  id: PropertyBagContainsKey(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: PropertyBagContainsKey(List, String)
  nameWithType: ListExtensions.PropertyBagContainsKey(List, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.PropertyBagContainsKey(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: PropertyBagContainsKey
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 566
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if the given property bag entry exists\n"
  example: []
  syntax:
    content: public static bool PropertyBagContainsKey(this List list, string key)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to be processed
    - id: key
      type: System.String
      description: Key of the property bag entry to check
    return:
      type: System.Boolean
      description: True if the entry exists, false otherwise
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PropertyBagContainsKey(list As List, key As String) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.PropertyBagContainsKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.GetIndexedPropertyBagKeys(Microsoft.SharePoint.Client.List)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetIndexedPropertyBagKeys(Microsoft.SharePoint.Client.List)
  id: GetIndexedPropertyBagKeys(Microsoft.SharePoint.Client.List)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetIndexedPropertyBagKeys(List)
  nameWithType: ListExtensions.GetIndexedPropertyBagKeys(List)
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetIndexedPropertyBagKeys(Microsoft.SharePoint.Client.List)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetIndexedPropertyBagKeys
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 602
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns all keys in the property bag that have been marked for indexing\n"
  example: []
  syntax:
    content: public static IEnumerable<string> GetIndexedPropertyBagKeys(this List list)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: all indexed property bag keys
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIndexedPropertyBagKeys(list As List) As IEnumerable(Of String)
  overload: Microsoft.SharePoint.Client.ListExtensions.GetIndexedPropertyBagKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.AddIndexedPropertyBagKey(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.AddIndexedPropertyBagKey(Microsoft.SharePoint.Client.List,System.String)
  id: AddIndexedPropertyBagKey(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: AddIndexedPropertyBagKey(List, String)
  nameWithType: ListExtensions.AddIndexedPropertyBagKey(List, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.AddIndexedPropertyBagKey(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddIndexedPropertyBagKey
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 624
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nMarks a property bag key for indexing\n"
  example: []
  syntax:
    content: public static bool AddIndexedPropertyBagKey(this List list, string key)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process
    - id: key
      type: System.String
      description: The key to mark for indexing
    return:
      type: System.Boolean
      description: Returns True if succeeded
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddIndexedPropertyBagKey(list As List, key As String) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.AddIndexedPropertyBagKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.RemoveIndexedPropertyBagKey(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.RemoveIndexedPropertyBagKey(Microsoft.SharePoint.Client.List,System.String)
  id: RemoveIndexedPropertyBagKey(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: RemoveIndexedPropertyBagKey(List, String)
  nameWithType: ListExtensions.RemoveIndexedPropertyBagKey(List, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.RemoveIndexedPropertyBagKey(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RemoveIndexedPropertyBagKey
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 643
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nUnmarks a property bag key for indexing\n"
  example: []
  syntax:
    content: public static bool RemoveIndexedPropertyBagKey(this List list, string key)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process
    - id: key
      type: System.String
      description: The key to unmark for indexed. Case-sensitive
    return:
      type: System.Boolean
      description: Returns True if succeeded
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RemoveIndexedPropertyBagKey(list As List, key As String) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.RemoveIndexedPropertyBagKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.IsCreatedFromTemplate(Microsoft.SharePoint.Client.List)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.IsCreatedFromTemplate(Microsoft.SharePoint.Client.List)
  id: IsCreatedFromTemplate(Microsoft.SharePoint.Client.List)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: IsCreatedFromTemplate(List)
  nameWithType: ListExtensions.IsCreatedFromTemplate(List)
  fullName: Microsoft.SharePoint.Client.ListExtensions.IsCreatedFromTemplate(Microsoft.SharePoint.Client.List)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: IsCreatedFromTemplate
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 666
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  syntax:
    content: public static bool IsCreatedFromTemplate(this List list)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsCreatedFromTemplate(list As List) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.IsCreatedFromTemplate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.RemoveContentTypeByName(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.RemoveContentTypeByName(Microsoft.SharePoint.Client.List,System.String)
  id: RemoveContentTypeByName(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: RemoveContentTypeByName(List, String)
  nameWithType: ListExtensions.RemoveContentTypeByName(List, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.RemoveContentTypeByName(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: RemoveContentTypeByName
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 708
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemoves a content type from a list/library by name\n"
  example: []
  syntax:
    content: public static void RemoveContentTypeByName(this List list, string contentTypeName)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list
    - id: contentTypeName
      type: System.String
      description: The content type name to remove from the list
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RemoveContentTypeByName(list As List, contentTypeName As String)
  overload: Microsoft.SharePoint.Client.ListExtensions.RemoveContentTypeByName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when contentTypeName is a zero-length string or contains only white space
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: contentTypeName is null
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateDocumentLibrary(Microsoft.SharePoint.Client.Web,System.String,System.Boolean,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.CreateDocumentLibrary(Microsoft.SharePoint.Client.Web,System.String,System.Boolean,System.String)
  id: CreateDocumentLibrary(Microsoft.SharePoint.Client.Web,System.String,System.Boolean,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: CreateDocumentLibrary(Web, String, Boolean, String)
  nameWithType: ListExtensions.CreateDocumentLibrary(Web, String, Boolean, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateDocumentLibrary(Microsoft.SharePoint.Client.Web, System.String, System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateDocumentLibrary
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 741
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdds a document library to a web. Execute Query is called during this implementation\n"
  example: []
  syntax:
    content: public static List CreateDocumentLibrary(this Web web, string listName, bool enableVersioning = false, string urlPath = "")
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listName
      type: System.String
      description: Name of the library
    - id: enableVersioning
      type: System.Boolean
      description: Enable versioning on the list
    - id: urlPath
      type: System.String
      description: Path of the url
    return:
      type: Microsoft.SharePoint.Client.List
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateDocumentLibrary(web As Web, listName As String, enableVersioning As Boolean = False, urlPath As String = "") As List
  overload: Microsoft.SharePoint.Client.ListExtensions.CreateDocumentLibrary*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when listName is a zero-length string or contains only white space
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: listName is null
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.ListExists(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.ListExists(Microsoft.SharePoint.Client.Web,System.String)
  id: ListExists(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: ListExists(Web, String)
  nameWithType: ListExtensions.ListExists(Web, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.ListExists(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ListExists
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 761
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if list exists on the particular site based on the list Title property.\n"
  example: []
  syntax:
    content: public static bool ListExists(this Web web, string listTitle)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listTitle
      type: System.String
      description: Title of the list to be checked.
    return:
      type: System.Boolean
      description: True if the list exists
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ListExists(web As Web, listTitle As String) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.ListExists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when listTitle is a zero-length string or contains only white space
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: listTitle is null
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.ListExists(Microsoft.SharePoint.Client.Web,System.Uri)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.ListExists(Microsoft.SharePoint.Client.Web,System.Uri)
  id: ListExists(Microsoft.SharePoint.Client.Web,System.Uri)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: ListExists(Web, Uri)
  nameWithType: ListExtensions.ListExists(Web, Uri)
  fullName: Microsoft.SharePoint.Client.ListExtensions.ListExists(Microsoft.SharePoint.Client.Web, System.Uri)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ListExists
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 784
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if list exists on the particular site based on the list&apos;s site relative path.\n"
  example: []
  syntax:
    content: public static bool ListExists(this Web web, Uri siteRelativeUrlPath)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: siteRelativeUrlPath
      type: System.Uri
      description: Site relative path of the list
    return:
      type: System.Boolean
      description: True if the list exists
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ListExists(web As Web, siteRelativeUrlPath As Uri) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.ListExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.ListExists(Microsoft.SharePoint.Client.Web,System.Guid)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.ListExists(Microsoft.SharePoint.Client.Web,System.Guid)
  id: ListExists(Microsoft.SharePoint.Client.Web,System.Guid)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: ListExists(Web, Guid)
  nameWithType: ListExtensions.ListExists(Web, Guid)
  fullName: Microsoft.SharePoint.Client.ListExtensions.ListExists(Microsoft.SharePoint.Client.Web, System.Guid)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ListExists
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 807
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nChecks if list exists on the particular site based on the list id property.\n"
  example: []
  syntax:
    content: public static bool ListExists(this Web web, Guid id)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: id
      type: System.Guid
      description: The id of the list to be checked.
    return:
      type: System.Boolean
      description: True if the list exists
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ListExists(web As Web, id As Guid) As Boolean
  overload: Microsoft.SharePoint.Client.ListExtensions.ListExists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when listTitle is a zero-length string or contains only white space
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: listTitle is null
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.ListTemplateType,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.CreateList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.ListTemplateType,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)
  id: CreateList(Microsoft.SharePoint.Client.Web,Microsoft.SharePoint.Client.ListTemplateType,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: CreateList(Web, ListTemplateType, String, Boolean, Boolean, String, Boolean, Boolean)
  nameWithType: ListExtensions.CreateList(Web, ListTemplateType, String, Boolean, Boolean, String, Boolean, Boolean)
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateList(Microsoft.SharePoint.Client.Web, Microsoft.SharePoint.Client.ListTemplateType, System.String, System.Boolean, System.Boolean, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateList
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 839
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdds a default list to a site\n"
  example: []
  syntax:
    content: public static List CreateList(this Web web, ListTemplateType listType, string listName, bool enableVersioning, bool updateAndExecuteQuery = true, string urlPath = "", bool enableContentTypes = false, bool hidden = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listType
      type: Microsoft.SharePoint.Client.ListTemplateType
      description: Built in list template type
    - id: listName
      type: System.String
      description: Name of the list
    - id: enableVersioning
      type: System.Boolean
      description: Enable versioning on the list
    - id: updateAndExecuteQuery
      type: System.Boolean
      description: (Optional) Perform list update and executequery, defaults to true
    - id: urlPath
      type: System.String
      description: (Optional) URL to use for the list
    - id: enableContentTypes
      type: System.Boolean
      description: (Optional) Enable content type management
    - id: hidden
      type: System.Boolean
      description: (Optional) Hide the list from the SharePoint UI
    return:
      type: Microsoft.SharePoint.Client.List
      description: The newly created list
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateList(web As Web, listType As ListTemplateType, listName As String, enableVersioning As Boolean, updateAndExecuteQuery As Boolean = True, urlPath As String = "", enableContentTypes As Boolean = False, hidden As Boolean = False) As List
  overload: Microsoft.SharePoint.Client.ListExtensions.CreateList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateList(Microsoft.SharePoint.Client.Web,System.Guid,System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.CreateList(Microsoft.SharePoint.Client.Web,System.Guid,System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)
  id: CreateList(Microsoft.SharePoint.Client.Web,System.Guid,System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: CreateList(Web, Guid, Int32, String, Boolean, Boolean, String, Boolean)
  nameWithType: ListExtensions.CreateList(Web, Guid, Int32, String, Boolean, Boolean, String, Boolean)
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateList(Microsoft.SharePoint.Client.Web, System.Guid, System.Int32, System.String, System.Boolean, System.Boolean, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateList
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 856
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nAdds a custom list to a site\n"
  example: []
  syntax:
    content: public static List CreateList(this Web web, Guid featureId, int listType, string listName, bool enableVersioning, bool updateAndExecuteQuery = true, string urlPath = "", bool enableContentTypes = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: featureId
      type: System.Guid
      description: Feature that contains the list template
    - id: listType
      type: System.Int32
      description: Type ID of the list, within the feature
    - id: listName
      type: System.String
      description: Name of the list
    - id: enableVersioning
      type: System.Boolean
      description: Enable versioning on the list
    - id: updateAndExecuteQuery
      type: System.Boolean
      description: (Optional) Perform list update and executequery, defaults to true
    - id: urlPath
      type: System.String
      description: (Optional) URL to use for the list
    - id: enableContentTypes
      type: System.Boolean
      description: (Optional) Enable content type management
    return:
      type: Microsoft.SharePoint.Client.List
      description: The newly created list
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateList(web As Web, featureId As Guid, listType As Integer, listName As String, enableVersioning As Boolean, updateAndExecuteQuery As Boolean = True, urlPath As String = "", enableContentTypes As Boolean = False) As List
  overload: Microsoft.SharePoint.Client.ListExtensions.CreateList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.UpdateListVersioning(Microsoft.SharePoint.Client.Web,System.String,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.UpdateListVersioning(Microsoft.SharePoint.Client.Web,System.String,System.Boolean,System.Boolean,System.Boolean)
  id: UpdateListVersioning(Microsoft.SharePoint.Client.Web,System.String,System.Boolean,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: UpdateListVersioning(Web, String, Boolean, Boolean, Boolean)
  nameWithType: ListExtensions.UpdateListVersioning(Web, String, Boolean, Boolean, Boolean)
  fullName: Microsoft.SharePoint.Client.ListExtensions.UpdateListVersioning(Microsoft.SharePoint.Client.Web, System.String, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UpdateListVersioning
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 918
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nEnable/disable versioning on a list\n"
  example: []
  syntax:
    content: public static void UpdateListVersioning(this Web web, string listName, bool enableVersioning, bool enableMinorVersioning = true, bool updateAndExecuteQuery = true)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listName
      type: System.String
      description: List to operate on
    - id: enableVersioning
      type: System.Boolean
      description: True to enable versioning, false to disable
    - id: enableMinorVersioning
      type: System.Boolean
      description: Enable/Disable minor versioning
    - id: updateAndExecuteQuery
      type: System.Boolean
      description: Perform list update and executequery, defaults to true
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub UpdateListVersioning(web As Web, listName As String, enableVersioning As Boolean, enableMinorVersioning As Boolean = True, updateAndExecuteQuery As Boolean = True)
  overload: Microsoft.SharePoint.Client.ListExtensions.UpdateListVersioning*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when listName is a zero-length string or contains only white space
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: listName is null
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.UpdateListVersioning(Microsoft.SharePoint.Client.List,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.UpdateListVersioning(Microsoft.SharePoint.Client.List,System.Boolean,System.Boolean,System.Boolean)
  id: UpdateListVersioning(Microsoft.SharePoint.Client.List,System.Boolean,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: UpdateListVersioning(List, Boolean, Boolean, Boolean)
  nameWithType: ListExtensions.UpdateListVersioning(List, Boolean, Boolean, Boolean)
  fullName: Microsoft.SharePoint.Client.ListExtensions.UpdateListVersioning(Microsoft.SharePoint.Client.List, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UpdateListVersioning
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 945
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nEnable/disable versioning on a list\n"
  example: []
  syntax:
    content: public static void UpdateListVersioning(this List list, bool enableVersioning, bool enableMinorVersioning = true, bool updateAndExecuteQuery = true)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to be processed
    - id: enableVersioning
      type: System.Boolean
      description: True to enable versioning, false to disable
    - id: enableMinorVersioning
      type: System.Boolean
      description: Enable/Disable minor versioning
    - id: updateAndExecuteQuery
      type: System.Boolean
      description: Perform list update and executequery, defaults to true
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub UpdateListVersioning(list As List, enableVersioning As Boolean, enableMinorVersioning As Boolean = True, updateAndExecuteQuery As Boolean = True)
  overload: Microsoft.SharePoint.Client.ListExtensions.UpdateListVersioning*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Guid,System.Guid,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Guid,System.Guid,System.Boolean)
  id: UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.Guid,System.Guid,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: UpdateTaxonomyFieldDefaultValue(Web, String, String, String, Guid, Guid, Boolean)
  nameWithType: ListExtensions.UpdateTaxonomyFieldDefaultValue(Web, String, String, String, Guid, Guid, Boolean)
  fullName: Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.Guid, System.Guid, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UpdateTaxonomyFieldDefaultValue
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 967
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSets the default value for a managed metadata column in the specified list. This operation will not change existing items in the list.\n"
  example: []
  syntax:
    content: public static void UpdateTaxonomyFieldDefaultValue(this Web web, string termName, string listName, string fieldInternalName, Guid groupGuid, Guid termSetGuid, bool systemUpdate = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Extension web
    - id: termName
      type: System.String
      description: Name of a specific term which should be set as the default on the managed metadata field
    - id: listName
      type: System.String
      description: Name of list which contains the managed metadata field of which the default needs to be set
    - id: fieldInternalName
      type: System.String
      description: Internal name of the managed metadata field for which the default needs to be set
    - id: groupGuid
      type: System.Guid
      description: TermGroup Guid of the Term Group which contains the managed metadata item which should be set as the default
    - id: termSetGuid
      type: System.Guid
      description: TermSet Guid of the Term Set which contains the managed metadata item which should be set as the default
    - id: systemUpdate
      type: System.Boolean
      description: If set to true, will do a system udpate to the item. Default value is false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub UpdateTaxonomyFieldDefaultValue(web As Web, termName As String, listName As String, fieldInternalName As String, groupGuid As Guid, termSetGuid As Guid, systemUpdate As Boolean = False)
  overload: Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Guid,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Guid,System.Boolean)
  id: UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web,System.String,System.String,System.Guid,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: UpdateTaxonomyFieldDefaultValue(Web, String, String, Guid, Boolean)
  nameWithType: ListExtensions.UpdateTaxonomyFieldDefaultValue(Web, String, String, Guid, Boolean)
  fullName: Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web, System.String, System.String, System.Guid, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UpdateTaxonomyFieldDefaultValue
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 990
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSets the default value for a managed metadata column in the specified list. This operation will not change existing items in the list.\n"
  example: []
  syntax:
    content: public static void UpdateTaxonomyFieldDefaultValue(this Web web, string listName, string fieldInternalName, Guid termGuid, bool systemUpdate = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Extension web
    - id: listName
      type: System.String
      description: Name of list which contains the managed metadata field of which the default needs to be set
    - id: fieldInternalName
      type: System.String
      description: Internal name of the managed metadata field for which the default needs to be set
    - id: termGuid
      type: System.Guid
      description: Term Guid of the Term which represents the managed metadata item which should be set as the default
    - id: systemUpdate
      type: System.Boolean
      description: If set to true, will do a system udpate to the item. Default value is false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub UpdateTaxonomyFieldDefaultValue(web As Web, listName As String, fieldInternalName As String, termGuid As Guid, systemUpdate As Boolean = False)
  overload: Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web,System.String,System.String,Microsoft.SharePoint.Client.Taxonomy.Term,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web,System.String,System.String,Microsoft.SharePoint.Client.Taxonomy.Term,System.Boolean)
  id: UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web,System.String,System.String,Microsoft.SharePoint.Client.Taxonomy.Term,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: UpdateTaxonomyFieldDefaultValue(Web, String, String, Term, Boolean)
  nameWithType: ListExtensions.UpdateTaxonomyFieldDefaultValue(Web, String, String, Term, Boolean)
  fullName: Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue(Microsoft.SharePoint.Client.Web, System.String, System.String, Microsoft.SharePoint.Client.Taxonomy.Term, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UpdateTaxonomyFieldDefaultValue
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1007
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSets the default value for a managed metadata column in the specified list. This operation will not change existing items in the list.\n"
  example: []
  syntax:
    content: public static void UpdateTaxonomyFieldDefaultValue(this Web web, string listName, string fieldInternalName, Term term, bool systemUpdate = false)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Extension web
    - id: listName
      type: System.String
      description: Name of list which contains the managed metadata field of which the default needs to be set
    - id: fieldInternalName
      type: System.String
      description: Internal name of the managed metadata field for which the default needs to be set
    - id: term
      type: Microsoft.SharePoint.Client.Taxonomy.Term
      description: Managed metadata Term which represents the managed metadata item which should be set as the default
    - id: systemUpdate
      type: System.Boolean
      description: If set to true, will do a system udpate to the item. Default value is false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub UpdateTaxonomyFieldDefaultValue(web As Web, listName As String, fieldInternalName As String, term As Term, systemUpdate As Boolean = False)
  overload: Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.SetJSLinkCustomizations(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.PageType,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.SetJSLinkCustomizations(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.PageType,System.String)
  id: SetJSLinkCustomizations(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.PageType,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: SetJSLinkCustomizations(List, PageType, String)
  nameWithType: ListExtensions.SetJSLinkCustomizations(List, PageType, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetJSLinkCustomizations(Microsoft.SharePoint.Client.List, Microsoft.SharePoint.Client.PageType, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetJSLinkCustomizations
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1048
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSets JS link customization for a list form\n"
  example: []
  syntax:
    content: public static void SetJSLinkCustomizations(this List list, PageType pageType, string jslink)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: SharePoint list
    - id: pageType
      type: Microsoft.SharePoint.Client.PageType
      description: Type of form
    - id: jslink
      type: System.String
      description: >
        JSLink to set to the form. Set to empty string to remove the set JSLink customization.

        Specify multiple values separated by pipe symbol. For e.g.: ~sitecollection/_catalogs/masterpage/jquery-2.1.0.min.js|~sitecollection/_catalogs/masterpage/custom.js
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetJSLinkCustomizations(list As List, pageType As PageType, jslink As String)
  overload: Microsoft.SharePoint.Client.ListExtensions.SetJSLinkCustomizations*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.SetJSLinkCustomizations(Microsoft.SharePoint.Client.List,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.SetJSLinkCustomizations(Microsoft.SharePoint.Client.List,System.String,System.String)
  id: SetJSLinkCustomizations(Microsoft.SharePoint.Client.List,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: SetJSLinkCustomizations(List, String, String)
  nameWithType: ListExtensions.SetJSLinkCustomizations(List, String, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetJSLinkCustomizations(Microsoft.SharePoint.Client.List, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetJSLinkCustomizations
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1067
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSets JS link customization for a list view page\n"
  example: []
  syntax:
    content: public static void SetJSLinkCustomizations(this List list, string serverRelativeUrl, string jslink)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: SharePoint list
    - id: serverRelativeUrl
      type: System.String
      description: url of the view page
    - id: jslink
      type: System.String
      description: >
        JSLink to set to the form. Set to empty string to remove the set JSLink customization.

        Specify multiple values separated by pipe symbol. For e.g.: ~sitecollection/_catalogs/masterpage/jquery-2.1.0.min.js|~sitecollection/_catalogs/masterpage/custom.js
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetJSLinkCustomizations(list As List, serverRelativeUrl As String, jslink As String)
  overload: Microsoft.SharePoint.Client.ListExtensions.SetJSLinkCustomizations*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.SetLocalizationLabelsForList(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.SetLocalizationLabelsForList(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String)
  id: SetLocalizationLabelsForList(Microsoft.SharePoint.Client.Web,System.String,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: SetLocalizationLabelsForList(Web, String, String, String, String)
  nameWithType: ListExtensions.SetLocalizationLabelsForList(Web, String, String, String, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetLocalizationLabelsForList(Microsoft.SharePoint.Client.Web, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetLocalizationLabelsForList
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1108
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCan be used to set translations for different cultures. \n<a href=\"http://blogs.msdn.com/b/vesku/archive/2014/03/20/office365-multilingual-content-types-site-columns-and-site-other-elements.aspx\">http://blogs.msdn.com/b/vesku/archive/2014/03/20/office365-multilingual-content-types-site-columns-and-site-other-elements.aspx</a>\n"
  example: []
  syntax:
    content: public static void SetLocalizationLabelsForList(this Web web, string listTitle, string cultureName, string titleResource, string descriptionResource)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listTitle
      type: System.String
      description: Title of the list
    - id: cultureName
      type: System.String
      description: Culture name like en-us or fi-fi
    - id: titleResource
      type: System.String
      description: Localized Title string
    - id: descriptionResource
      type: System.String
      description: Localized Description string
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetLocalizationLabelsForList(web As Web, listTitle As String, cultureName As String, titleResource As String, descriptionResource As String)
  overload: Microsoft.SharePoint.Client.ListExtensions.SetLocalizationLabelsForList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when listTitle, cultureName, titleResource, descriptionResource is a zero-length string or contains only white space
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: listTitle, cultureName, titleResource, descriptionResource is null
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.SetLocalizationLabelsForList(Microsoft.SharePoint.Client.List,System.String,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.SetLocalizationLabelsForList(Microsoft.SharePoint.Client.List,System.String,System.String,System.String)
  id: SetLocalizationLabelsForList(Microsoft.SharePoint.Client.List,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: SetLocalizationLabelsForList(List, String, String, String)
  nameWithType: ListExtensions.SetLocalizationLabelsForList(List, String, String, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetLocalizationLabelsForList(Microsoft.SharePoint.Client.List, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetLocalizationLabelsForList
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1150
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCan be used to set translations for different cultures. \n"
  example:
  - "\nlist.SetLocalizationForSiteLabels(&quot;fi-fi&quot;, &quot;Name of the site in Finnish&quot;, &quot;Description in Finnish&quot;);\n"
  syntax:
    content: public static void SetLocalizationLabelsForList(this List list, string cultureName, string titleResource, string descriptionResource)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: 'List to be processed '
    - id: cultureName
      type: System.String
      description: Culture name like en-us or fi-fi
    - id: titleResource
      type: System.String
      description: Localized Title string
    - id: descriptionResource
      type: System.String
      description: Localized Description string
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetLocalizationLabelsForList(list As List, cultureName As String, titleResource As String, descriptionResource As String)
  overload: Microsoft.SharePoint.Client.ListExtensions.SetLocalizationLabelsForList*
  see:
  - linkType: HRef
    linkId: http://blogs.msdn.com/b/vesku/archive/2014/03/20/office365-multilingual-content-types-site-columns-and-site-other-elements.aspx
    altText: http://blogs.msdn.com/b/vesku/archive/2014/03/20/office365-multilingual-content-types-site-columns-and-site-other-elements.aspx
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.GetListID(Microsoft.SharePoint.Client.Web,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetListID(Microsoft.SharePoint.Client.Web,System.String)
  id: GetListID(Microsoft.SharePoint.Client.Web,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetListID(Web, String)
  nameWithType: ListExtensions.GetListID(Web, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetListID(Microsoft.SharePoint.Client.Web, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetListID
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1166
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nReturns the GUID id of a list\n"
  example: []
  syntax:
    content: public static Guid GetListID(this Web web, string listName)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listName
      type: System.String
      description: List to operate on
    return:
      type: System.Guid
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetListID(web As Web, listName As String) As Guid
  overload: Microsoft.SharePoint.Client.ListExtensions.GetListID*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when listName is a zero-length string or contains only white space
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: listName is null
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.GetListById(Microsoft.SharePoint.Client.Web,System.Guid,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetListById(Microsoft.SharePoint.Client.Web,System.Guid,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[])
  id: GetListById(Microsoft.SharePoint.Client.Web,System.Guid,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetListById(Web, Guid, Expression<Func<List, Object>>[])
  nameWithType: ListExtensions.GetListById(Web, Guid, Expression<Func<List, Object>>[])
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetListById(Microsoft.SharePoint.Client.Web, System.Guid, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.List, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetListById
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1191
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGet List by using Id\n"
  example: []
  syntax:
    content: public static List GetListById(this Web web, Guid listId, params Expression<Func<List, object>>[] expressions)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web containing the list
    - id: listId
      type: System.Guid
      description: The Id of the list
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[]
      description: Additional list of lambda expressions of properties to load alike l => l.BaseType
    return:
      type: Microsoft.SharePoint.Client.List
      description: Loaded list instance matching specified Id
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetListById(web As Web, listId As Guid, ParamArray expressions As Expression(Of Func(Of List, Object))()) As List
  overload: Microsoft.SharePoint.Client.ListExtensions.GetListById*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when listId is an empty Guid
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: listId is null
  nameWithType.vb: ListExtensions.GetListById(Web, Guid, Expression(Of Func(Of List, Object))())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ListExtensions.GetListById(Microsoft.SharePoint.Client.Web, System.Guid, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.List, System.Object))())
  name.vb: GetListById(Web, Guid, Expression(Of Func(Of List, Object))())
- uid: Microsoft.SharePoint.Client.ListExtensions.GetListByTitle(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetListByTitle(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[])
  id: GetListByTitle(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetListByTitle(Web, String, Expression<Func<List, Object>>[])
  nameWithType: ListExtensions.GetListByTitle(Web, String, Expression<Func<List, Object>>[])
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetListByTitle(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.List, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetListByTitle
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1227
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGet list by using Title\n"
  example: []
  syntax:
    content: public static List GetListByTitle(this Web web, string listTitle, params Expression<Func<List, object>>[] expressions)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Site to be processed - can be root web or sub site
    - id: listTitle
      type: System.String
      description: Title of the list to return
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[]
      description: Additional list of lambda expressions of properties to load alike l => l.BaseType
    return:
      type: Microsoft.SharePoint.Client.List
      description: Loaded list instance matching to title or null
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetListByTitle(web As Web, listTitle As String, ParamArray expressions As Expression(Of Func(Of List, Object))()) As List
  overload: Microsoft.SharePoint.Client.ListExtensions.GetListByTitle*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when listTitle is a zero-length string or contains only white space
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: listTitle is null
  nameWithType.vb: ListExtensions.GetListByTitle(Web, String, Expression(Of Func(Of List, Object))())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ListExtensions.GetListByTitle(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.List, System.Object))())
  name.vb: GetListByTitle(Web, String, Expression(Of Func(Of List, Object))())
- uid: Microsoft.SharePoint.Client.ListExtensions.GetListByUrl(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetListByUrl(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[])
  id: GetListByUrl(Microsoft.SharePoint.Client.Web,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetListByUrl(Web, String, Expression<Func<List, Object>>[])
  nameWithType: ListExtensions.GetListByUrl(Web, String, Expression<Func<List, Object>>[])
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetListByUrl(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.List, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetListByUrl
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1254
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGet list by using Url\n"
  example: []
  syntax:
    content: public static List GetListByUrl(this Web web, string webRelativeUrl, params Expression<Func<List, object>>[] expressions)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web (site) to be processed
    - id: webRelativeUrl
      type: System.String
      description: Url of list relative to the web (site), e.g. lists/testlist
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[]
      description: Additional list of lambda expressions of properties to load alike l => l.BaseType
    return:
      type: Microsoft.SharePoint.Client.List
      description: Returns list if found, null if no list is found.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetListByUrl(web As Web, webRelativeUrl As String, ParamArray expressions As Expression(Of Func(Of List, Object))()) As List
  overload: Microsoft.SharePoint.Client.ListExtensions.GetListByUrl*
  nameWithType.vb: ListExtensions.GetListByUrl(Web, String, Expression(Of Func(Of List, Object))())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ListExtensions.GetListByUrl(Microsoft.SharePoint.Client.Web, System.String, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.List, System.Object))())
  name.vb: GetListByUrl(Web, String, Expression(Of Func(Of List, Object))())
- uid: Microsoft.SharePoint.Client.ListExtensions.GetPagesLibrary(Microsoft.SharePoint.Client.Web)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetPagesLibrary(Microsoft.SharePoint.Client.Web)
  id: GetPagesLibrary(Microsoft.SharePoint.Client.Web)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetPagesLibrary(Web)
  nameWithType: ListExtensions.GetPagesLibrary(Web)
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetPagesLibrary(Microsoft.SharePoint.Client.Web)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetPagesLibrary
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1301
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGets the publishing pages library of the web based on site language\n"
  example: []
  syntax:
    content: public static List GetPagesLibrary(this Web web)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: The web.
    return:
      type: Microsoft.SharePoint.Client.List
      description: The publishing pages library. Returns null if library was not found.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPagesLibrary(web As Web) As List
  overload: Microsoft.SharePoint.Client.ListExtensions.GetPagesLibrary*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nCould not load pages library URL name from &apos;cmscore&apos; resources file.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.GetWebRelativeUrl(Microsoft.SharePoint.Client.List)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetWebRelativeUrl(Microsoft.SharePoint.Client.List)
  id: GetWebRelativeUrl(Microsoft.SharePoint.Client.List)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetWebRelativeUrl(List)
  nameWithType: ListExtensions.GetWebRelativeUrl(List)
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetWebRelativeUrl(Microsoft.SharePoint.Client.List)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetWebRelativeUrl
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1327
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGets the web relative URL.\nAllow users to get the web relative URL of a list.  \nThis is useful when exporting lists as it can then be used as a parameter to Web.GetListByUrl().\n"
  example: []
  syntax:
    content: public static string GetWebRelativeUrl(this List list)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to export the URL of.
    return:
      type: System.String
      description: The web relative URL of the list.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetWebRelativeUrl(list As List) As String
  overload: Microsoft.SharePoint.Client.ListExtensions.GetWebRelativeUrl*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.SetListPermission(Microsoft.SharePoint.Client.List,PnP.Framework.Enums.BuiltInIdentity,Microsoft.SharePoint.Client.RoleType)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.SetListPermission(Microsoft.SharePoint.Client.List,PnP.Framework.Enums.BuiltInIdentity,Microsoft.SharePoint.Client.RoleType)
  id: SetListPermission(Microsoft.SharePoint.Client.List,PnP.Framework.Enums.BuiltInIdentity,Microsoft.SharePoint.Client.RoleType)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: SetListPermission(List, BuiltInIdentity, RoleType)
  nameWithType: ListExtensions.SetListPermission(List, BuiltInIdentity, RoleType)
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetListPermission(Microsoft.SharePoint.Client.List, PnP.Framework.Enums.BuiltInIdentity, Microsoft.SharePoint.Client.RoleType)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetListPermission
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1363
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet custom permission to the list\n"
  example: []
  syntax:
    content: public static void SetListPermission(this List list, BuiltInIdentity user, RoleType roleType)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List on which permission to be set
    - id: user
      type: PnP.Framework.Enums.BuiltInIdentity
      description: Built in user
    - id: roleType
      type: Microsoft.SharePoint.Client.RoleType
      description: Role type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetListPermission(list As List, user As BuiltInIdentity, roleType As RoleType)
  overload: Microsoft.SharePoint.Client.ListExtensions.SetListPermission*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.SetListPermission(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Principal,Microsoft.SharePoint.Client.RoleType)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.SetListPermission(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Principal,Microsoft.SharePoint.Client.RoleType)
  id: SetListPermission(Microsoft.SharePoint.Client.List,Microsoft.SharePoint.Client.Principal,Microsoft.SharePoint.Client.RoleType)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: SetListPermission(List, Principal, RoleType)
  nameWithType: ListExtensions.SetListPermission(List, Principal, RoleType)
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetListPermission(Microsoft.SharePoint.Client.List, Microsoft.SharePoint.Client.Principal, Microsoft.SharePoint.Client.RoleType)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetListPermission
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1396
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nSet custom permission to the list\n"
  example: []
  syntax:
    content: public static void SetListPermission(this List list, Principal principal, RoleType roleType)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List on which permission to be set
    - id: principal
      type: Microsoft.SharePoint.Client.Principal
      description: SharePoint Group or User
    - id: roleType
      type: Microsoft.SharePoint.Client.RoleType
      description: Role type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetListPermission(list As List, principal As Principal, roleType As RoleType)
  overload: Microsoft.SharePoint.Client.ListExtensions.SetListPermission*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLFile(Microsoft.SharePoint.Client.Web,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLFile(Microsoft.SharePoint.Client.Web,System.String,System.String)
  id: CreateViewsFromXMLFile(Microsoft.SharePoint.Client.Web,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: CreateViewsFromXMLFile(Web, String, String)
  nameWithType: ListExtensions.CreateViewsFromXMLFile(Web, String, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLFile(Microsoft.SharePoint.Client.Web, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateViewsFromXMLFile
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1425
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreates list views based on specific xml structure from file\n"
  example: []
  syntax:
    content: public static void CreateViewsFromXMLFile(this Web web, string listUrl, string filePath)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to process
    - id: listUrl
      type: System.String
      description: List Url
    - id: filePath
      type: System.String
      description: Path of the file
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CreateViewsFromXMLFile(web As Web, listUrl As String, filePath As String)
  overload: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLString(Microsoft.SharePoint.Client.Web,System.String,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLString(Microsoft.SharePoint.Client.Web,System.String,System.String)
  id: CreateViewsFromXMLString(Microsoft.SharePoint.Client.Web,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: CreateViewsFromXMLString(Web, String, String)
  nameWithType: ListExtensions.CreateViewsFromXMLString(Web, String, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLString(Microsoft.SharePoint.Client.Web, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateViewsFromXMLString
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1444
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreates views based on specific xml structure from string\n"
  example: []
  syntax:
    content: public static void CreateViewsFromXMLString(this Web web, string listUrl, string xmlString)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to process
    - id: listUrl
      type: System.String
      description: List Url
    - id: xmlString
      type: System.String
      description: Path of the file
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CreateViewsFromXMLString(web As Web, listUrl As String, xmlString As String)
  overload: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXML(Microsoft.SharePoint.Client.Web,System.String,System.Xml.XmlDocument)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXML(Microsoft.SharePoint.Client.Web,System.String,System.Xml.XmlDocument)
  id: CreateViewsFromXML(Microsoft.SharePoint.Client.Web,System.String,System.Xml.XmlDocument)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: CreateViewsFromXML(Web, String, XmlDocument)
  nameWithType: ListExtensions.CreateViewsFromXML(Web, String, XmlDocument)
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXML(Microsoft.SharePoint.Client.Web, System.String, System.Xml.XmlDocument)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateViewsFromXML
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1463
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreate list views based on xml structure loaded to memory\n"
  example: []
  syntax:
    content: public static void CreateViewsFromXML(this Web web, string listUrl, XmlDocument xmlDoc)
    parameters:
    - id: web
      type: Microsoft.SharePoint.Client.Web
      description: Web to process
    - id: listUrl
      type: System.String
      description: List Url
    - id: xmlDoc
      type: System.Xml.XmlDocument
      description: XmlDocument object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CreateViewsFromXML(web As Web, listUrl As String, xmlDoc As XmlDocument)
  overload: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXML*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLFile(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLFile(Microsoft.SharePoint.Client.List,System.String)
  id: CreateViewsFromXMLFile(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: CreateViewsFromXMLFile(List, String)
  nameWithType: ListExtensions.CreateViewsFromXMLFile(List, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLFile(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateViewsFromXMLFile
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1485
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreate list views based on specific xml structure in external file\n"
  example: []
  syntax:
    content: public static void CreateViewsFromXMLFile(this List list, string filePath)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    - id: filePath
      type: System.String
      description: Path of the file
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CreateViewsFromXMLFile(list As List, filePath As String)
  overload: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLString(Microsoft.SharePoint.Client.List,System.String)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLString(Microsoft.SharePoint.Client.List,System.String)
  id: CreateViewsFromXMLString(Microsoft.SharePoint.Client.List,System.String)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: CreateViewsFromXMLString(List, String)
  nameWithType: ListExtensions.CreateViewsFromXMLString(List, String)
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLString(Microsoft.SharePoint.Client.List, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateViewsFromXMLString
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1503
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreate list views based on specific xml structure in string \n"
  example: []
  syntax:
    content: public static void CreateViewsFromXMLString(this List list, string xmlString)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    - id: xmlString
      type: System.String
      description: XML string to create view
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CreateViewsFromXMLString(list As List, xmlString As String)
  overload: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXML(Microsoft.SharePoint.Client.List,System.Xml.XmlDocument)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXML(Microsoft.SharePoint.Client.List,System.Xml.XmlDocument)
  id: CreateViewsFromXML(Microsoft.SharePoint.Client.List,System.Xml.XmlDocument)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: CreateViewsFromXML(List, XmlDocument)
  nameWithType: ListExtensions.CreateViewsFromXML(List, XmlDocument)
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXML(Microsoft.SharePoint.Client.List, System.Xml.XmlDocument)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateViewsFromXML
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1518
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nActual implementation of the view creation logic based on given xml\n"
  example: []
  syntax:
    content: public static void CreateViewsFromXML(this List list, XmlDocument xmlDoc)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    - id: xmlDoc
      type: System.Xml.XmlDocument
      description: XmlDocument object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CreateViewsFromXML(list As List, xmlDoc As XmlDocument)
  overload: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXML*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateView(Microsoft.SharePoint.Client.List,System.String,Microsoft.SharePoint.Client.ViewType,System.String[],System.UInt32,System.Boolean,System.String,System.Boolean,System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.CreateView(Microsoft.SharePoint.Client.List,System.String,Microsoft.SharePoint.Client.ViewType,System.String[],System.UInt32,System.Boolean,System.String,System.Boolean,System.Boolean)
  id: CreateView(Microsoft.SharePoint.Client.List,System.String,Microsoft.SharePoint.Client.ViewType,System.String[],System.UInt32,System.Boolean,System.String,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: CreateView(List, String, ViewType, String[], UInt32, Boolean, String, Boolean, Boolean)
  nameWithType: ListExtensions.CreateView(List, String, ViewType, String[], UInt32, Boolean, String, Boolean, Boolean)
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateView(Microsoft.SharePoint.Client.List, System.String, Microsoft.SharePoint.Client.ViewType, System.String[], System.UInt32, System.Boolean, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateView
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1554
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nCreate view to existing list\n"
  example: []
  syntax:
    content: public static View CreateView(this List list, string viewName, ViewType viewType, string[] viewFields, uint rowLimit, bool setAsDefault, string query = null, bool personal = false, bool paged = false)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    - id: viewName
      type: System.String
      description: Name of the view
    - id: viewType
      type: Microsoft.SharePoint.Client.ViewType
      description: Type of the view
    - id: viewFields
      type: System.String[]
      description: Fields of the view
    - id: rowLimit
      type: System.UInt32
      description: Row limit of the view
    - id: setAsDefault
      type: System.Boolean
      description: Set as default view
    - id: query
      type: System.String
      description: Query for view creation
    - id: personal
      type: System.Boolean
      description: Personal View
    - id: paged
      type: System.Boolean
      description: Paged view
    return:
      type: Microsoft.SharePoint.Client.View
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateView(list As List, viewName As String, viewType As ViewType, viewFields As String(), rowLimit As UInteger, setAsDefault As Boolean, query As String = Nothing, personal As Boolean = False, paged As Boolean = False) As View
  overload: Microsoft.SharePoint.Client.ListExtensions.CreateView*
  nameWithType.vb: ListExtensions.CreateView(List, String, ViewType, String(), UInt32, Boolean, String, Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ListExtensions.CreateView(Microsoft.SharePoint.Client.List, System.String, Microsoft.SharePoint.Client.ViewType, System.String(), System.UInt32, System.Boolean, System.String, System.Boolean, System.Boolean)
  name.vb: CreateView(List, String, ViewType, String(), UInt32, Boolean, String, Boolean, Boolean)
- uid: Microsoft.SharePoint.Client.ListExtensions.GetViewById(Microsoft.SharePoint.Client.List,System.Guid,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.View,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetViewById(Microsoft.SharePoint.Client.List,System.Guid,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.View,System.Object}}[])
  id: GetViewById(Microsoft.SharePoint.Client.List,System.Guid,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.View,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetViewById(List, Guid, Expression<Func<View, Object>>[])
  nameWithType: ListExtensions.GetViewById(List, Guid, Expression<Func<View, Object>>[])
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetViewById(Microsoft.SharePoint.Client.List, System.Guid, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.View, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetViewById
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1596
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGets a view by Id\n"
  example: []
  syntax:
    content: public static View GetViewById(this List list, Guid id, params Expression<Func<View, object>>[] expressions)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    - id: id
      type: System.Guid
      description: Id to the view to extract
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.View,System.Object}}[]
      description: List of lambda expressions of properties to load when retrieving the object
    return:
      type: Microsoft.SharePoint.Client.View
      description: returns null if not found
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetViewById(list As List, id As Guid, ParamArray expressions As Expression(Of Func(Of View, Object))()) As View
  overload: Microsoft.SharePoint.Client.ListExtensions.GetViewById*
  nameWithType.vb: ListExtensions.GetViewById(List, Guid, Expression(Of Func(Of View, Object))())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ListExtensions.GetViewById(Microsoft.SharePoint.Client.List, System.Guid, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.View, System.Object))())
  name.vb: GetViewById(List, Guid, Expression(Of Func(Of View, Object))())
- uid: Microsoft.SharePoint.Client.ListExtensions.GetViewByName(Microsoft.SharePoint.Client.List,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.View,System.Object}}[])
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetViewByName(Microsoft.SharePoint.Client.List,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.View,System.Object}}[])
  id: GetViewByName(Microsoft.SharePoint.Client.List,System.String,System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.View,System.Object}}[])
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetViewByName(List, String, Expression<Func<View, Object>>[])
  nameWithType: ListExtensions.GetViewByName(List, String, Expression<Func<View, Object>>[])
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetViewByName(Microsoft.SharePoint.Client.List, System.String, System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.View, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetViewByName
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1629
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nGets a view by Name\n"
  example: []
  syntax:
    content: public static View GetViewByName(this List list, string name, params Expression<Func<View, object>>[] expressions)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    - id: name
      type: System.String
      description: Name of the view
    - id: expressions
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.View,System.Object}}[]
      description: List of lambda expressions of properties to load when retrieving the object
    return:
      type: Microsoft.SharePoint.Client.View
      description: returns null if not found
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetViewByName(list As List, name As String, ParamArray expressions As Expression(Of Func(Of View, Object))()) As View
  overload: Microsoft.SharePoint.Client.ListExtensions.GetViewByName*
  nameWithType.vb: ListExtensions.GetViewByName(List, String, Expression(Of Func(Of View, Object))())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ListExtensions.GetViewByName(Microsoft.SharePoint.Client.List, System.String, System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.View, System.Object))())
  name.vb: GetViewByName(List, String, Expression(Of Func(Of View, Object))())
- uid: Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue})
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue})
  id: SetDefaultColumnValues(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: SetDefaultColumnValues(List, IEnumerable<IDefaultColumnValue>)
  nameWithType: ListExtensions.SetDefaultColumnValues(List, IEnumerable<IDefaultColumnValue>)
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues(Microsoft.SharePoint.Client.List, System.Collections.Generic.IEnumerable<PnP.Framework.Entities.IDefaultColumnValue>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetDefaultColumnValues
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1803
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\n<p>Sets default values for column values.</p>\n<p>In order to for instance set the default Enterprise Metadata keyword field to a term, add the enterprise metadata keyword to a library (internal name &quot;TaxKeyword&quot;)</p>\n<p> </p>\n<p>Column values are defined by the DefaultColumnValue class that has 3 properties:</p>\n<p>RelativeFolderPath : / to set a default value for the root of the document library, or /foldername to specify a subfolder</p>\n<p>FieldInternalName : The name of the field to set. For instance &quot;TaxKeyword&quot; to set the Enterprise Metadata field</p>\n<p>Terms : A collection of Taxonomy terms to set</p>\n<p></p>\n<p>Supported column types: Metadata, Text, Choice, MultiChoice, People, Boolean, DateTime, Number, Currency</p>\n"
  example: []
  syntax:
    content: public static void SetDefaultColumnValues(this List list, IEnumerable<IDefaultColumnValue> columnValues)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    - id: columnValues
      type: System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue}
      description: Column Values
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetDefaultColumnValues(list As List, columnValues As IEnumerable(Of IDefaultColumnValue))
  overload: Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues*
  nameWithType.vb: ListExtensions.SetDefaultColumnValues(List, IEnumerable(Of IDefaultColumnValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues(Microsoft.SharePoint.Client.List, System.Collections.Generic.IEnumerable(Of PnP.Framework.Entities.IDefaultColumnValue))
  name.vb: SetDefaultColumnValues(List, IEnumerable(Of IDefaultColumnValue))
- uid: Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue},System.Boolean)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue},System.Boolean)
  id: SetDefaultColumnValues(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue},System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: SetDefaultColumnValues(List, IEnumerable<IDefaultColumnValue>, Boolean)
  nameWithType: ListExtensions.SetDefaultColumnValues(List, IEnumerable<IDefaultColumnValue>, Boolean)
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues(Microsoft.SharePoint.Client.List, System.Collections.Generic.IEnumerable<PnP.Framework.Entities.IDefaultColumnValue>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetDefaultColumnValues
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1970
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\n<p>Sets default values for column values.</p>\n<p>In order to for instance set the default Enterprise Metadata keyword field to a term, add the enterprise metadata keyword to a library (internal name &quot;TaxKeyword&quot;)</p>\n<p> </p>\n<p>Column values are defined by the DefaultColumnValue class that has 3 properties:</p>\n<p>RelativeFolderPath : / to set a default value for the root of the document library, or /foldername to specify a subfolder</p>\n<p>FieldInternalName : The name of the field to set. For instance &quot;TaxKeyword&quot; to set the Enterprise Metadata field</p>\n<p>Terms : A collection of Taxonomy terms to set</p>\n<p></p>\n<p>Supported column types: Metadata, Text, Choice, MultiChoice, People, Boolean, DateTime, Number, Currency</p>\n"
  example: []
  syntax:
    content: public static void SetDefaultColumnValues(this List list, IEnumerable<IDefaultColumnValue> columnValues, bool overwriteExistingDefaultColumnValues)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process.
    - id: columnValues
      type: System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue}
      description: The default column values.
    - id: overwriteExistingDefaultColumnValues
      type: System.Boolean
      description: If true, the currrent default column values will be overwritten.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetDefaultColumnValues(list As List, columnValues As IEnumerable(Of IDefaultColumnValue), overwriteExistingDefaultColumnValues As Boolean)
  overload: Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues*
  nameWithType.vb: ListExtensions.SetDefaultColumnValues(List, IEnumerable(Of IDefaultColumnValue), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues(Microsoft.SharePoint.Client.List, System.Collections.Generic.IEnumerable(Of PnP.Framework.Entities.IDefaultColumnValue), System.Boolean)
  name.vb: SetDefaultColumnValues(List, IEnumerable(Of IDefaultColumnValue), Boolean)
- uid: Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues(Microsoft.SharePoint.Client.List)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues(Microsoft.SharePoint.Client.List)
  id: ClearDefaultColumnValues(Microsoft.SharePoint.Client.List)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: ClearDefaultColumnValues(List)
  nameWithType: ListExtensions.ClearDefaultColumnValues(List)
  fullName: Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues(Microsoft.SharePoint.Client.List)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ClearDefaultColumnValues
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 1986
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemove all default column values that are defined for this list.\n"
  example: []
  syntax:
    content: public static void ClearDefaultColumnValues(this List list)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ClearDefaultColumnValues(list As List)
  overload: Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue})
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue})
  id: ClearDefaultColumnValues(Microsoft.SharePoint.Client.List,System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue})
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: ClearDefaultColumnValues(List, IEnumerable<IDefaultColumnValue>)
  nameWithType: ListExtensions.ClearDefaultColumnValues(List, IEnumerable<IDefaultColumnValue>)
  fullName: Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues(Microsoft.SharePoint.Client.List, System.Collections.Generic.IEnumerable<PnP.Framework.Entities.IDefaultColumnValue>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ClearDefaultColumnValues
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 2025
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nRemoves the provided default column values from the specified folder(s) from list, if they were set.\n"
  example: []
  syntax:
    content: public static void ClearDefaultColumnValues(this List list, IEnumerable<IDefaultColumnValue> columnValues)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: The list to process.
    - id: columnValues
      type: System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue}
      description: The default column values that must be cleared.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ClearDefaultColumnValues(list As List, columnValues As IEnumerable(Of IDefaultColumnValue))
  overload: Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues*
  nameWithType.vb: ListExtensions.ClearDefaultColumnValues(List, IEnumerable(Of IDefaultColumnValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues(Microsoft.SharePoint.Client.List, System.Collections.Generic.IEnumerable(Of PnP.Framework.Entities.IDefaultColumnValue))
  name.vb: ClearDefaultColumnValues(List, IEnumerable(Of IDefaultColumnValue))
- uid: Microsoft.SharePoint.Client.ListExtensions.GetDefaultColumnValues(Microsoft.SharePoint.Client.List)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.GetDefaultColumnValues(Microsoft.SharePoint.Client.List)
  id: GetDefaultColumnValues(Microsoft.SharePoint.Client.List)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: GetDefaultColumnValues(List)
  nameWithType: ListExtensions.GetDefaultColumnValues(List)
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetDefaultColumnValues(Microsoft.SharePoint.Client.List)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetDefaultColumnValues
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 2158
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\n<p>Gets default values for column values.</p>\n<p></p>\n<p>The returned list contains one dictionary per default setting per folder.</p>\n<p>Each dictionary has the following keys set: Path, Field, Value</p>\n<p></p>\n<p>Path: Relative path to the library/folder</p>\n<p>Field: Internal name of the field which has a default value</p>\n<p>Value: The default value for the field</p>\n"
  example: []
  syntax:
    content: public static List<Dictionary<string, string>> GetDefaultColumnValues(this List list)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.String}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDefaultColumnValues(list As List) As List(Of Dictionary(Of String, String))
  overload: Microsoft.SharePoint.Client.ListExtensions.GetDefaultColumnValues*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.ReIndexList(Microsoft.SharePoint.Client.List)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.ReIndexList(Microsoft.SharePoint.Client.List)
  id: ReIndexList(Microsoft.SharePoint.Client.List)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: ReIndexList(List)
  nameWithType: ListExtensions.ReIndexList(List)
  fullName: Microsoft.SharePoint.Client.ListExtensions.ReIndexList(Microsoft.SharePoint.Client.List)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ReIndexList
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 2243
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nQueues a list for a full crawl the next incremental crawl\n"
  example: []
  syntax:
    content: public static void ReIndexList(this List list)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: List to process
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ReIndexList(list As List)
  overload: Microsoft.SharePoint.Client.ListExtensions.ReIndexList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.EnableClassicAudienceTargeting(Microsoft.SharePoint.Client.List)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.EnableClassicAudienceTargeting(Microsoft.SharePoint.Client.List)
  id: EnableClassicAudienceTargeting(Microsoft.SharePoint.Client.List)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: EnableClassicAudienceTargeting(List)
  nameWithType: ListExtensions.EnableClassicAudienceTargeting(List)
  fullName: Microsoft.SharePoint.Client.ListExtensions.EnableClassicAudienceTargeting(Microsoft.SharePoint.Client.List)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnableClassicAudienceTargeting
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 2274
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  summary: "\nEnable Classic Audience Targeting on a List\n"
  example: []
  syntax:
    content: public static void EnableClassicAudienceTargeting(this List list)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub EnableClassicAudienceTargeting(list As List)
  overload: Microsoft.SharePoint.Client.ListExtensions.EnableClassicAudienceTargeting*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SharePoint.Client.ListExtensions.EnableModernAudienceTargeting(Microsoft.SharePoint.Client.List)
  commentId: M:Microsoft.SharePoint.Client.ListExtensions.EnableModernAudienceTargeting(Microsoft.SharePoint.Client.List)
  id: EnableModernAudienceTargeting(Microsoft.SharePoint.Client.List)
  isExtensionMethod: true
  parent: Microsoft.SharePoint.Client.ListExtensions
  langs:
  - csharp
  - vb
  name: EnableModernAudienceTargeting(List)
  nameWithType: ListExtensions.EnableModernAudienceTargeting(List)
  fullName: Microsoft.SharePoint.Client.ListExtensions.EnableModernAudienceTargeting(Microsoft.SharePoint.Client.List)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ListExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnableModernAudienceTargeting
    path: ../src/lib/PnP.Framework/Extensions/ListExtensions.cs
    startLine: 2304
  assemblies:
  - PnP.Framework
  namespace: Microsoft.SharePoint.Client
  syntax:
    content: public static void EnableModernAudienceTargeting(this List list)
    parameters:
    - id: list
      type: Microsoft.SharePoint.Client.List
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub EnableModernAudienceTargeting(list As List)
  overload: Microsoft.SharePoint.Client.ListExtensions.EnableModernAudienceTargeting*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.SharePoint.Client
  commentId: N:Microsoft.SharePoint.Client
  name: Microsoft.SharePoint.Client
  nameWithType: Microsoft.SharePoint.Client
  fullName: Microsoft.SharePoint.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.SharePoint.Client.ListExtensions.AddRemoteEventReceiver*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.AddRemoteEventReceiver
  name: AddRemoteEventReceiver
  nameWithType: ListExtensions.AddRemoteEventReceiver
  fullName: Microsoft.SharePoint.Client.ListExtensions.AddRemoteEventReceiver
- uid: Microsoft.SharePoint.Client.List
  commentId: T:Microsoft.SharePoint.Client.List
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: List
  nameWithType: List
  fullName: Microsoft.SharePoint.Client.List
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.SharePoint.Client.EventReceiverType
  commentId: T:Microsoft.SharePoint.Client.EventReceiverType
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: EventReceiverType
  nameWithType: EventReceiverType
  fullName: Microsoft.SharePoint.Client.EventReceiverType
- uid: Microsoft.SharePoint.Client.EventReceiverSynchronization
  commentId: T:Microsoft.SharePoint.Client.EventReceiverSynchronization
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: EventReceiverSynchronization
  nameWithType: EventReceiverSynchronization
  fullName: Microsoft.SharePoint.Client.EventReceiverSynchronization
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.SharePoint.Client.EventReceiverDefinition
  commentId: T:Microsoft.SharePoint.Client.EventReceiverDefinition
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: EventReceiverDefinition
  nameWithType: EventReceiverDefinition
  fullName: Microsoft.SharePoint.Client.EventReceiverDefinition
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverById*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverById
  name: GetEventReceiverById
  nameWithType: ListExtensions.GetEventReceiverById
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverById
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverByName*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverByName
  name: GetEventReceiverByName
  nameWithType: ListExtensions.GetEventReceiverByName
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetEventReceiverByName
- uid: Microsoft.SharePoint.Client.ListExtensions.AddWebhookSubscription*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.AddWebhookSubscription
  name: AddWebhookSubscription
  nameWithType: ListExtensions.AddWebhookSubscription
  fullName: Microsoft.SharePoint.Client.ListExtensions.AddWebhookSubscription
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: PnP.Framework.Entities.WebhookSubscription
  commentId: T:PnP.Framework.Entities.WebhookSubscription
  parent: PnP.Framework.Entities
  name: WebhookSubscription
  nameWithType: WebhookSubscription
  fullName: PnP.Framework.Entities.WebhookSubscription
- uid: PnP.Framework.Entities
  commentId: N:PnP.Framework.Entities
  name: PnP.Framework.Entities
  nameWithType: PnP.Framework.Entities
  fullName: PnP.Framework.Entities
- uid: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription
  name: UpdateWebhookSubscription
  nameWithType: ListExtensions.UpdateWebhookSubscription
  fullName: Microsoft.SharePoint.Client.ListExtensions.UpdateWebhookSubscription
- uid: Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription
  name: RemoveWebhookSubscription
  nameWithType: ListExtensions.RemoveWebhookSubscription
  fullName: Microsoft.SharePoint.Client.ListExtensions.RemoveWebhookSubscription
- uid: Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptions*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptions
  name: GetWebhookSubscriptions
  nameWithType: ListExtensions.GetWebhookSubscriptions
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptions
- uid: System.Collections.Generic.IList{PnP.Framework.Entities.WebhookSubscription}
  commentId: T:System.Collections.Generic.IList{PnP.Framework.Entities.WebhookSubscription}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<WebhookSubscription>
  nameWithType: IList<WebhookSubscription>
  fullName: System.Collections.Generic.IList<PnP.Framework.Entities.WebhookSubscription>
  nameWithType.vb: IList(Of WebhookSubscription)
  fullName.vb: System.Collections.Generic.IList(Of PnP.Framework.Entities.WebhookSubscription)
  name.vb: IList(Of WebhookSubscription)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Entities.WebhookSubscription
    name: WebhookSubscription
    nameWithType: WebhookSubscription
    fullName: PnP.Framework.Entities.WebhookSubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Entities.WebhookSubscription
    name: WebhookSubscription
    nameWithType: WebhookSubscription
    fullName: PnP.Framework.Entities.WebhookSubscription
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptionsAsync*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptionsAsync
  name: GetWebhookSubscriptionsAsync
  nameWithType: ListExtensions.GetWebhookSubscriptionsAsync
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetWebhookSubscriptionsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{PnP.Framework.Entities.WebhookSubscription}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{PnP.Framework.Entities.WebhookSubscription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<WebhookSubscription>>
  nameWithType: Task<IList<WebhookSubscription>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<PnP.Framework.Entities.WebhookSubscription>>
  nameWithType.vb: Task(Of IList(Of WebhookSubscription))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of PnP.Framework.Entities.WebhookSubscription))
  name.vb: Task(Of IList(Of WebhookSubscription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Entities.WebhookSubscription
    name: WebhookSubscription
    nameWithType: WebhookSubscription
    fullName: PnP.Framework.Entities.WebhookSubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Entities.WebhookSubscription
    name: WebhookSubscription
    nameWithType: WebhookSubscription
    fullName: PnP.Framework.Entities.WebhookSubscription
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue
  name: SetPropertyBagValue
  nameWithType: ListExtensions.SetPropertyBagValue
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetPropertyBagValue
- uid: Microsoft.SharePoint.Client.ListExtensions.RemovePropertyBagValue*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.RemovePropertyBagValue
  name: RemovePropertyBagValue
  nameWithType: ListExtensions.RemovePropertyBagValue
  fullName: Microsoft.SharePoint.Client.ListExtensions.RemovePropertyBagValue
- uid: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueInt*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueInt
  name: GetPropertyBagValueInt
  nameWithType: ListExtensions.GetPropertyBagValueInt
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueInt
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueString*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueString
  name: GetPropertyBagValueString
  nameWithType: ListExtensions.GetPropertyBagValueString
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueString
- uid: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueDateTime*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueDateTime
  name: GetPropertyBagValueDateTime
  nameWithType: ListExtensions.GetPropertyBagValueDateTime
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetPropertyBagValueDateTime
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.ListExtensions.PropertyBagContainsKey*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.PropertyBagContainsKey
  name: PropertyBagContainsKey
  nameWithType: ListExtensions.PropertyBagContainsKey
  fullName: Microsoft.SharePoint.Client.ListExtensions.PropertyBagContainsKey
- uid: Microsoft.SharePoint.Client.ListExtensions.GetIndexedPropertyBagKeys*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetIndexedPropertyBagKeys
  name: GetIndexedPropertyBagKeys
  nameWithType: ListExtensions.GetIndexedPropertyBagKeys
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetIndexedPropertyBagKeys
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.ListExtensions.AddIndexedPropertyBagKey*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.AddIndexedPropertyBagKey
  name: AddIndexedPropertyBagKey
  nameWithType: ListExtensions.AddIndexedPropertyBagKey
  fullName: Microsoft.SharePoint.Client.ListExtensions.AddIndexedPropertyBagKey
- uid: Microsoft.SharePoint.Client.ListExtensions.RemoveIndexedPropertyBagKey*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.RemoveIndexedPropertyBagKey
  name: RemoveIndexedPropertyBagKey
  nameWithType: ListExtensions.RemoveIndexedPropertyBagKey
  fullName: Microsoft.SharePoint.Client.ListExtensions.RemoveIndexedPropertyBagKey
- uid: Microsoft.SharePoint.Client.ListExtensions.IsCreatedFromTemplate*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.IsCreatedFromTemplate
  name: IsCreatedFromTemplate
  nameWithType: ListExtensions.IsCreatedFromTemplate
  fullName: Microsoft.SharePoint.Client.ListExtensions.IsCreatedFromTemplate
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: Microsoft.SharePoint.Client.ListExtensions.RemoveContentTypeByName*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.RemoveContentTypeByName
  name: RemoveContentTypeByName
  nameWithType: ListExtensions.RemoveContentTypeByName
  fullName: Microsoft.SharePoint.Client.ListExtensions.RemoveContentTypeByName
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateDocumentLibrary*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.CreateDocumentLibrary
  name: CreateDocumentLibrary
  nameWithType: ListExtensions.CreateDocumentLibrary
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateDocumentLibrary
- uid: Microsoft.SharePoint.Client.Web
  commentId: T:Microsoft.SharePoint.Client.Web
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: Web
  nameWithType: Web
  fullName: Microsoft.SharePoint.Client.Web
- uid: Microsoft.SharePoint.Client.ListExtensions.ListExists*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.ListExists
  name: ListExists
  nameWithType: ListExtensions.ListExists
  fullName: Microsoft.SharePoint.Client.ListExtensions.ListExists
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateList*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.CreateList
  name: CreateList
  nameWithType: ListExtensions.CreateList
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateList
- uid: Microsoft.SharePoint.Client.ListTemplateType
  commentId: T:Microsoft.SharePoint.Client.ListTemplateType
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: ListTemplateType
  nameWithType: ListTemplateType
  fullName: Microsoft.SharePoint.Client.ListTemplateType
- uid: Microsoft.SharePoint.Client.ListExtensions.UpdateListVersioning*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.UpdateListVersioning
  name: UpdateListVersioning
  nameWithType: ListExtensions.UpdateListVersioning
  fullName: Microsoft.SharePoint.Client.ListExtensions.UpdateListVersioning
- uid: Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue
  name: UpdateTaxonomyFieldDefaultValue
  nameWithType: ListExtensions.UpdateTaxonomyFieldDefaultValue
  fullName: Microsoft.SharePoint.Client.ListExtensions.UpdateTaxonomyFieldDefaultValue
- uid: Microsoft.SharePoint.Client.Taxonomy.Term
  commentId: T:Microsoft.SharePoint.Client.Taxonomy.Term
  parent: Microsoft.SharePoint.Client.Taxonomy
  isExternal: true
  name: Term
  nameWithType: Term
  fullName: Microsoft.SharePoint.Client.Taxonomy.Term
- uid: Microsoft.SharePoint.Client.Taxonomy
  commentId: N:Microsoft.SharePoint.Client.Taxonomy
  isExternal: true
  name: Microsoft.SharePoint.Client.Taxonomy
  nameWithType: Microsoft.SharePoint.Client.Taxonomy
  fullName: Microsoft.SharePoint.Client.Taxonomy
- uid: Microsoft.SharePoint.Client.ListExtensions.SetJSLinkCustomizations*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.SetJSLinkCustomizations
  name: SetJSLinkCustomizations
  nameWithType: ListExtensions.SetJSLinkCustomizations
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetJSLinkCustomizations
- uid: Microsoft.SharePoint.Client.PageType
  commentId: T:Microsoft.SharePoint.Client.PageType
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: PageType
  nameWithType: PageType
  fullName: Microsoft.SharePoint.Client.PageType
- uid: Microsoft.SharePoint.Client.ListExtensions.SetLocalizationLabelsForList*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.SetLocalizationLabelsForList
  name: SetLocalizationLabelsForList
  nameWithType: ListExtensions.SetLocalizationLabelsForList
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetLocalizationLabelsForList
- uid: Microsoft.SharePoint.Client.ListExtensions.GetListID*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetListID
  name: GetListID
  nameWithType: ListExtensions.GetListID
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetListID
- uid: Microsoft.SharePoint.Client.ListExtensions.GetListById*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetListById
  name: GetListById
  nameWithType: ListExtensions.GetListById
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetListById
- uid: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.List,System.Object}}[]
  isExternal: true
  name: Expression<Func<List, Object>>[]
  nameWithType: Expression<Func<List, Object>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.List, System.Object>>[]
  nameWithType.vb: Expression(Of Func(Of List, Object))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.List, System.Object))()
  name.vb: Expression(Of Func(Of List, Object))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SharePoint.Client.List
    name: List
    nameWithType: List
    fullName: Microsoft.SharePoint.Client.List
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SharePoint.Client.List
    name: List
    nameWithType: List
    fullName: Microsoft.SharePoint.Client.List
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.SharePoint.Client.ListExtensions.GetListByTitle*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetListByTitle
  name: GetListByTitle
  nameWithType: ListExtensions.GetListByTitle
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetListByTitle
- uid: Microsoft.SharePoint.Client.ListExtensions.GetListByUrl*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetListByUrl
  name: GetListByUrl
  nameWithType: ListExtensions.GetListByUrl
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetListByUrl
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: Microsoft.SharePoint.Client.ListExtensions.GetPagesLibrary*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetPagesLibrary
  name: GetPagesLibrary
  nameWithType: ListExtensions.GetPagesLibrary
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetPagesLibrary
- uid: Microsoft.SharePoint.Client.ListExtensions.GetWebRelativeUrl*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetWebRelativeUrl
  name: GetWebRelativeUrl
  nameWithType: ListExtensions.GetWebRelativeUrl
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetWebRelativeUrl
- uid: Microsoft.SharePoint.Client.ListExtensions.SetListPermission*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.SetListPermission
  name: SetListPermission
  nameWithType: ListExtensions.SetListPermission
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetListPermission
- uid: PnP.Framework.Enums.BuiltInIdentity
  commentId: T:PnP.Framework.Enums.BuiltInIdentity
  parent: PnP.Framework.Enums
  name: BuiltInIdentity
  nameWithType: BuiltInIdentity
  fullName: PnP.Framework.Enums.BuiltInIdentity
- uid: Microsoft.SharePoint.Client.RoleType
  commentId: T:Microsoft.SharePoint.Client.RoleType
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: RoleType
  nameWithType: RoleType
  fullName: Microsoft.SharePoint.Client.RoleType
- uid: PnP.Framework.Enums
  commentId: N:PnP.Framework.Enums
  name: PnP.Framework.Enums
  nameWithType: PnP.Framework.Enums
  fullName: PnP.Framework.Enums
- uid: Microsoft.SharePoint.Client.Principal
  commentId: T:Microsoft.SharePoint.Client.Principal
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: Principal
  nameWithType: Principal
  fullName: Microsoft.SharePoint.Client.Principal
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLFile*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLFile
  name: CreateViewsFromXMLFile
  nameWithType: ListExtensions.CreateViewsFromXMLFile
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLFile
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLString*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLString
  name: CreateViewsFromXMLString
  nameWithType: ListExtensions.CreateViewsFromXMLString
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXMLString
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXML*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXML
  name: CreateViewsFromXML
  nameWithType: ListExtensions.CreateViewsFromXML
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateViewsFromXML
- uid: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  parent: System.Xml
  isExternal: true
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.SharePoint.Client.ListExtensions.CreateView*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.CreateView
  name: CreateView
  nameWithType: ListExtensions.CreateView
  fullName: Microsoft.SharePoint.Client.ListExtensions.CreateView
- uid: Microsoft.SharePoint.Client.ViewType
  commentId: T:Microsoft.SharePoint.Client.ViewType
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: ViewType
  nameWithType: ViewType
  fullName: Microsoft.SharePoint.Client.ViewType
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.SharePoint.Client.View
  commentId: T:Microsoft.SharePoint.Client.View
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: View
  nameWithType: View
  fullName: Microsoft.SharePoint.Client.View
- uid: Microsoft.SharePoint.Client.ListExtensions.GetViewById*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetViewById
  name: GetViewById
  nameWithType: ListExtensions.GetViewById
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetViewById
- uid: System.Linq.Expressions.Expression{System.Func{Microsoft.SharePoint.Client.View,System.Object}}[]
  isExternal: true
  name: Expression<Func<View, Object>>[]
  nameWithType: Expression<Func<View, Object>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.View, System.Object>>[]
  nameWithType.vb: Expression(Of Func(Of View, Object))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.SharePoint.Client.View, System.Object))()
  name.vb: Expression(Of Func(Of View, Object))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SharePoint.Client.View
    name: View
    nameWithType: View
    fullName: Microsoft.SharePoint.Client.View
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SharePoint.Client.View
    name: View
    nameWithType: View
    fullName: Microsoft.SharePoint.Client.View
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.SharePoint.Client.ListExtensions.GetViewByName*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetViewByName
  name: GetViewByName
  nameWithType: ListExtensions.GetViewByName
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetViewByName
- uid: Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues
  name: SetDefaultColumnValues
  nameWithType: ListExtensions.SetDefaultColumnValues
  fullName: Microsoft.SharePoint.Client.ListExtensions.SetDefaultColumnValues
- uid: System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue}
  commentId: T:System.Collections.Generic.IEnumerable{PnP.Framework.Entities.IDefaultColumnValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IDefaultColumnValue>
  nameWithType: IEnumerable<IDefaultColumnValue>
  fullName: System.Collections.Generic.IEnumerable<PnP.Framework.Entities.IDefaultColumnValue>
  nameWithType.vb: IEnumerable(Of IDefaultColumnValue)
  fullName.vb: System.Collections.Generic.IEnumerable(Of PnP.Framework.Entities.IDefaultColumnValue)
  name.vb: IEnumerable(Of IDefaultColumnValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Entities.IDefaultColumnValue
    name: IDefaultColumnValue
    nameWithType: IDefaultColumnValue
    fullName: PnP.Framework.Entities.IDefaultColumnValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Entities.IDefaultColumnValue
    name: IDefaultColumnValue
    nameWithType: IDefaultColumnValue
    fullName: PnP.Framework.Entities.IDefaultColumnValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues
  name: ClearDefaultColumnValues
  nameWithType: ListExtensions.ClearDefaultColumnValues
  fullName: Microsoft.SharePoint.Client.ListExtensions.ClearDefaultColumnValues
- uid: Microsoft.SharePoint.Client.ListExtensions.GetDefaultColumnValues*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.GetDefaultColumnValues
  name: GetDefaultColumnValues
  nameWithType: ListExtensions.GetDefaultColumnValues
  fullName: Microsoft.SharePoint.Client.ListExtensions.GetDefaultColumnValues
- uid: System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.String}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Dictionary<String, String>>
  nameWithType: List<Dictionary<String, String>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.Dictionary<System.String, System.String>>
  nameWithType.vb: List(Of Dictionary(Of String, String))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: List(Of Dictionary(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SharePoint.Client.ListExtensions.ReIndexList*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.ReIndexList
  name: ReIndexList
  nameWithType: ListExtensions.ReIndexList
  fullName: Microsoft.SharePoint.Client.ListExtensions.ReIndexList
- uid: Microsoft.SharePoint.Client.ListExtensions.EnableClassicAudienceTargeting*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.EnableClassicAudienceTargeting
  name: EnableClassicAudienceTargeting
  nameWithType: ListExtensions.EnableClassicAudienceTargeting
  fullName: Microsoft.SharePoint.Client.ListExtensions.EnableClassicAudienceTargeting
- uid: Microsoft.SharePoint.Client.ListExtensions.EnableModernAudienceTargeting*
  commentId: Overload:Microsoft.SharePoint.Client.ListExtensions.EnableModernAudienceTargeting
  name: EnableModernAudienceTargeting
  nameWithType: ListExtensions.EnableModernAudienceTargeting
  fullName: Microsoft.SharePoint.Client.ListExtensions.EnableModernAudienceTargeting

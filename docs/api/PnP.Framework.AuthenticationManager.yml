### YamlMime:ManagedReference
items:
- uid: PnP.Framework.AuthenticationManager
  commentId: T:PnP.Framework.AuthenticationManager
  id: AuthenticationManager
  parent: PnP.Framework
  children:
  - PnP.Framework.AuthenticationManager.#ctor
  - PnP.Framework.AuthenticationManager.#ctor(PnP.Core.Services.IAuthenticationProvider)
  - PnP.Framework.AuthenticationManager.#ctor(PnP.Core.Services.PnPContext)
  - PnP.Framework.AuthenticationManager.#ctor(System.Security.SecureString)
  - PnP.Framework.AuthenticationManager.#ctor(System.String,System.Action{System.String,System.Int32},System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.#ctor(System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.#ctor(System.String,System.Security.SecureString,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,Microsoft.Identity.Client.UserAssertion,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,System.Security.SecureString,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache},Microsoft.Identity.Client.Extensibility.ICustomWebUi)
  - PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.ClearTokenCache
  - PnP.Framework.AuthenticationManager.ClearTokenCacheAsync
  - PnP.Framework.AuthenticationManager.CLIENTID_PNPMANAGEMENTSHELL
  - PnP.Framework.AuthenticationManager.CLIENTID_SPOMANAGEMENTSHELL
  - PnP.Framework.AuthenticationManager.CookieContainer
  - PnP.Framework.AuthenticationManager.CreateWithAccessToken(System.Security.SecureString)
  - PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String,System.String,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.CreateWithCredentials(System.String,System.Security.SecureString,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.CreateWithCredentials(System.String,System.String,System.Security.SecureString,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.CreateWithDeviceLogin(System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.CreateWithDeviceLogin(System.String,System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin(System.String,System.Action{System.String,System.Int32},System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin(System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache},Microsoft.Identity.Client.Extensibility.ICustomWebUi)
  - PnP.Framework.AuthenticationManager.CreateWithOnBehalfOf(System.String,System.String,Microsoft.Identity.Client.UserAssertion,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  - PnP.Framework.AuthenticationManager.CreateWithPnPCoreSdk(PnP.Core.Services.IAuthenticationProvider)
  - PnP.Framework.AuthenticationManager.CreateWithPnPCoreSdk(PnP.Core.Services.PnPContext)
  - PnP.Framework.AuthenticationManager.Dispose
  - PnP.Framework.AuthenticationManager.Dispose(System.Boolean)
  - PnP.Framework.AuthenticationManager.GetAccessToken(System.String,Microsoft.Identity.Client.Prompt)
  - PnP.Framework.AuthenticationManager.GetAccessToken(System.String,System.Threading.CancellationToken,Microsoft.Identity.Client.Prompt)
  - PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String,Microsoft.Identity.Client.Prompt)
  - PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String,System.Threading.CancellationToken,Microsoft.Identity.Client.Prompt)
  - PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String[],Microsoft.Identity.Client.Prompt)
  - PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String[],System.Threading.CancellationToken,Microsoft.Identity.Client.Prompt,System.Uri)
  - PnP.Framework.AuthenticationManager.GetAccessTokenContext(System.String,System.Func{System.String,System.String})
  - PnP.Framework.AuthenticationManager.GetAccessTokenContext(System.String,System.String)
  - PnP.Framework.AuthenticationManager.GetACSAppOnlyContext(System.String,System.String,System.String)
  - PnP.Framework.AuthenticationManager.GetACSAppOnlyContext(System.String,System.String,System.String,PnP.Framework.AzureEnvironment)
  - PnP.Framework.AuthenticationManager.GetACSAppOnlyContext(System.String,System.String,System.String,System.String,System.String,System.String)
  - PnP.Framework.AuthenticationManager.GetACSEndPoint(PnP.Framework.AzureEnvironment)
  - PnP.Framework.AuthenticationManager.GetACSEndPointPrefix(PnP.Framework.AzureEnvironment)
  - PnP.Framework.AuthenticationManager.GetAzureADLoginEndPoint(PnP.Framework.AzureEnvironment)
  - PnP.Framework.AuthenticationManager.GetBuilderWithAuthority(Microsoft.Identity.Client.ConfidentialClientApplicationBuilder,PnP.Framework.AzureEnvironment,System.String)
  - PnP.Framework.AuthenticationManager.GetBuilderWithAuthority(Microsoft.Identity.Client.PublicClientApplicationBuilder,PnP.Framework.AzureEnvironment)
  - PnP.Framework.AuthenticationManager.GetContext(System.String)
  - PnP.Framework.AuthenticationManager.GetContext(System.String,System.Threading.CancellationToken)
  - PnP.Framework.AuthenticationManager.GetContextAsync(System.String)
  - PnP.Framework.AuthenticationManager.GetContextAsync(System.String,System.Threading.CancellationToken)
  - PnP.Framework.AuthenticationManager.GetGraphEndPoint
  - PnP.Framework.AuthenticationManager.GetGraphEndPoint(PnP.Framework.AzureEnvironment)
  - PnP.Framework.AuthenticationManager.GetOnPremisesContext(System.String)
  - PnP.Framework.AuthenticationManager.GetOnPremisesContext(System.String,System.Net.ICredentials)
  - PnP.Framework.AuthenticationManager.GetOnPremisesContext(System.String,System.String,System.Security.SecureString)
  - PnP.Framework.AuthenticationManager.GetSharePointDomainSuffix(PnP.Framework.AzureEnvironment)
  langs:
  - csharp
  - vb
  name: AuthenticationManager
  nameWithType: AuthenticationManager
  fullName: PnP.Framework.AuthenticationManager
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AuthenticationManager
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 70
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nThis manager class can be used to obtain a SharePoint Client Context object\n"
  example: []
  syntax:
    content: 'public class AuthenticationManager : IDisposable'
    content.vb: >-
      Public Class AuthenticationManager
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - PnP.Framework.AuthenticationManager.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  - PnP.Framework.AuthenticationManager.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.AuthenticationManager,{T}}},{T},System.Boolean,System.Boolean)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  - System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: PnP.Framework.AuthenticationManager.CLIENTID_SPOMANAGEMENTSHELL
  commentId: F:PnP.Framework.AuthenticationManager.CLIENTID_SPOMANAGEMENTSHELL
  id: CLIENTID_SPOMANAGEMENTSHELL
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CLIENTID_SPOMANAGEMENTSHELL
  nameWithType: AuthenticationManager.CLIENTID_SPOMANAGEMENTSHELL
  fullName: PnP.Framework.AuthenticationManager.CLIENTID_SPOMANAGEMENTSHELL
  type: Field
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CLIENTID_SPOMANAGEMENTSHELL
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 75
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nThe client id of the Microsoft SharePoint Online Management Shell application\n"
  example: []
  syntax:
    content: public const string CLIENTID_SPOMANAGEMENTSHELL = "9bc3ab49-b65d-410a-85ad-de819febfddc"
    return:
      type: System.String
    content.vb: Public Const CLIENTID_SPOMANAGEMENTSHELL As String = "9bc3ab49-b65d-410a-85ad-de819febfddc"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: PnP.Framework.AuthenticationManager.CLIENTID_PNPMANAGEMENTSHELL
  commentId: F:PnP.Framework.AuthenticationManager.CLIENTID_PNPMANAGEMENTSHELL
  id: CLIENTID_PNPMANAGEMENTSHELL
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CLIENTID_PNPMANAGEMENTSHELL
  nameWithType: AuthenticationManager.CLIENTID_PNPMANAGEMENTSHELL
  fullName: PnP.Framework.AuthenticationManager.CLIENTID_PNPMANAGEMENTSHELL
  type: Field
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CLIENTID_PNPMANAGEMENTSHELL
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 79
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nThe client id of the Microsoft 365 Patters and Practices Management Shell application\n"
  example: []
  syntax:
    content: public const string CLIENTID_PNPMANAGEMENTSHELL = "31359c7f-bd7e-475c-86db-fdb8c937548e"
    return:
      type: System.String
    content.vb: Public Const CLIENTID_PNPMANAGEMENTSHELL As String = "31359c7f-bd7e-475c-86db-fdb8c937548e"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: PnP.Framework.AuthenticationManager.CookieContainer
  commentId: P:PnP.Framework.AuthenticationManager.CookieContainer
  id: CookieContainer
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CookieContainer
  nameWithType: AuthenticationManager.CookieContainer
  fullName: PnP.Framework.AuthenticationManager.CookieContainer
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CookieContainer
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 97
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  syntax:
    content: public CookieContainer CookieContainer { get; set; }
    parameters: []
    return:
      type: System.Net.CookieContainer
    content.vb: Public Property CookieContainer As CookieContainer
  overload: PnP.Framework.AuthenticationManager.CookieContainer*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.CreateWithAccessToken(System.Security.SecureString)
  commentId: M:PnP.Framework.AuthenticationManager.CreateWithAccessToken(System.Security.SecureString)
  id: CreateWithAccessToken(System.Security.SecureString)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CreateWithAccessToken(SecureString)
  nameWithType: AuthenticationManager.CreateWithAccessToken(SecureString)
  fullName: PnP.Framework.AuthenticationManager.CreateWithAccessToken(System.Security.SecureString)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateWithAccessToken
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 113
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  syntax:
    content: public static AuthenticationManager CreateWithAccessToken(SecureString accessToken)
    parameters:
    - id: accessToken
      type: System.Security.SecureString
    return:
      type: PnP.Framework.AuthenticationManager
    content.vb: Public Shared Function CreateWithAccessToken(accessToken As SecureString) As AuthenticationManager
  overload: PnP.Framework.AuthenticationManager.CreateWithAccessToken*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.AuthenticationManager.CreateWithDeviceLogin(System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.CreateWithDeviceLogin(System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: CreateWithDeviceLogin(System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CreateWithDeviceLogin(String, Func<DeviceCodeResult, Task>, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.CreateWithDeviceLogin(String, Func<DeviceCodeResult, Task>, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.CreateWithDeviceLogin(System.String, System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task>, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateWithDeviceLogin
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 125
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts through device code authentication\n"
  example: []
  syntax:
    content: public static AuthenticationManager CreateWithDeviceLogin(string clientId, Func<DeviceCodeResult, Task> deviceCodeCallback, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: deviceCodeCallback
      type: System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task}
      description: The callback that will be called with device code information.
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    return:
      type: PnP.Framework.AuthenticationManager
    content.vb: Public Shared Function CreateWithDeviceLogin(clientId As String, deviceCodeCallback As Func(Of DeviceCodeResult, Task), azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing) As AuthenticationManager
  overload: PnP.Framework.AuthenticationManager.CreateWithDeviceLogin*
  nameWithType.vb: AuthenticationManager.CreateWithDeviceLogin(String, Func(Of DeviceCodeResult, Task), AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.AuthenticationManager.CreateWithDeviceLogin(System.String, System.Func(Of Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task), PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: CreateWithDeviceLogin(String, Func(Of DeviceCodeResult, Task), AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.CreateWithDeviceLogin(System.String,System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.CreateWithDeviceLogin(System.String,System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: CreateWithDeviceLogin(System.String,System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CreateWithDeviceLogin(String, String, Func<DeviceCodeResult, Task>, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.CreateWithDeviceLogin(String, String, Func<DeviceCodeResult, Task>, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.CreateWithDeviceLogin(System.String, System.String, System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task>, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateWithDeviceLogin
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 138
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts through device code authentication\n"
  example: []
  syntax:
    content: public static AuthenticationManager CreateWithDeviceLogin(string clientId, string tenantId, Func<DeviceCodeResult, Task> deviceCodeCallback, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: tenantId
      type: System.String
      description: Optional tenant id or tenant url
    - id: deviceCodeCallback
      type: System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task}
      description: The callback that will be called with device code information.
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    return:
      type: PnP.Framework.AuthenticationManager
    content.vb: Public Shared Function CreateWithDeviceLogin(clientId As String, tenantId As String, deviceCodeCallback As Func(Of DeviceCodeResult, Task), azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing) As AuthenticationManager
  overload: PnP.Framework.AuthenticationManager.CreateWithDeviceLogin*
  nameWithType.vb: AuthenticationManager.CreateWithDeviceLogin(String, String, Func(Of DeviceCodeResult, Task), AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.AuthenticationManager.CreateWithDeviceLogin(System.String, System.String, System.Func(Of Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task), PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: CreateWithDeviceLogin(String, String, Func(Of DeviceCodeResult, Task), AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin(System.String,System.Action{System.String,System.Int32},System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin(System.String,System.Action{System.String,System.Int32},System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: CreateWithInteractiveLogin(System.String,System.Action{System.String,System.Int32},System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CreateWithInteractiveLogin(String, Action<String, Int32>, String, String, String, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.CreateWithInteractiveLogin(String, Action<String, Int32>, String, String, String, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin(System.String, System.Action<System.String, System.Int32>, System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateWithInteractiveLogin
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 153
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire access tokens and client contexts using the Azure AD Interactive flow.\n"
  example: []
  syntax:
    content: public static AuthenticationManager CreateWithInteractiveLogin(string clientId, Action<string, int> openBrowserCallback, string tenantId = null, string successMessageHtml = null, string failureMessageHtml = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: openBrowserCallback
      type: System.Action{System.String,System.Int32}
      description: This callback will be called providing the URL and port to open during the authentication flow
    - id: tenantId
      type: System.String
      description: Optional tenant id or tenant url
    - id: successMessageHtml
      type: System.String
      description: Allows you to override the success message. Notice that a success header message will be added.
    - id: failureMessageHtml
      type: System.String
      description: llows you to override the failure message. Notice that a failed header message will be added and the error message will be appended.
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called to register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    return:
      type: PnP.Framework.AuthenticationManager
    content.vb: Public Shared Function CreateWithInteractiveLogin(clientId As String, openBrowserCallback As Action(Of String, Integer), tenantId As String = Nothing, successMessageHtml As String = Nothing, failureMessageHtml As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing) As AuthenticationManager
  overload: PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin*
  nameWithType.vb: AuthenticationManager.CreateWithInteractiveLogin(String, Action(Of String, Int32), String, String, String, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin(System.String, System.Action(Of System.String, System.Int32), System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: CreateWithInteractiveLogin(String, Action(Of String, Int32), String, String, String, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin(System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache},Microsoft.Identity.Client.Extensibility.ICustomWebUi)
  commentId: M:PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin(System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache},Microsoft.Identity.Client.Extensibility.ICustomWebUi)
  id: CreateWithInteractiveLogin(System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache},Microsoft.Identity.Client.Extensibility.ICustomWebUi)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CreateWithInteractiveLogin(String, String, String, AzureEnvironment, Action<ITokenCache>, ICustomWebUi)
  nameWithType: AuthenticationManager.CreateWithInteractiveLogin(String, String, String, AzureEnvironment, Action<ITokenCache>, ICustomWebUi)
  fullName: PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin(System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>, Microsoft.Identity.Client.Extensibility.ICustomWebUi)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateWithInteractiveLogin
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 167
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire access tokens and client contexts using the Azure AD Interactive flow.\n"
  example: []
  syntax:
    content: public static AuthenticationManager CreateWithInteractiveLogin(string clientId, string redirectUrl = null, string tenantId = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null, ICustomWebUi customWebUi = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: redirectUrl
      type: System.String
      description: Optional redirect URL to use for authentication as set up in the Azure AD Application
    - id: tenantId
      type: System.String
      description: Optional tenant id or tenant url
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    - id: customWebUi
      type: Microsoft.Identity.Client.Extensibility.ICustomWebUi
      description: Optional ICustomWebUi object to fully customize the feedback behavior
    return:
      type: PnP.Framework.AuthenticationManager
    content.vb: Public Shared Function CreateWithInteractiveLogin(clientId As String, redirectUrl As String = Nothing, tenantId As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing, customWebUi As ICustomWebUi = Nothing) As AuthenticationManager
  overload: PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin*
  nameWithType.vb: AuthenticationManager.CreateWithInteractiveLogin(String, String, String, AzureEnvironment, Action(Of ITokenCache), ICustomWebUi)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin(System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache), Microsoft.Identity.Client.Extensibility.ICustomWebUi)
  name.vb: CreateWithInteractiveLogin(String, String, String, AzureEnvironment, Action(Of ITokenCache), ICustomWebUi)
- uid: PnP.Framework.AuthenticationManager.CreateWithCredentials(System.String,System.Security.SecureString,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.CreateWithCredentials(System.String,System.Security.SecureString,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: CreateWithCredentials(System.String,System.Security.SecureString,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CreateWithCredentials(String, SecureString, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.CreateWithCredentials(String, SecureString, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.CreateWithCredentials(System.String, System.Security.SecureString, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateWithCredentials
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 179
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts. It uses the PnP Management Shell multi-tenant Azure AD application ID to authenticate. By default tokens will be cached in memory.\n"
  example: []
  syntax:
    content: public static AuthenticationManager CreateWithCredentials(string username, SecureString password, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: username
      type: System.String
      description: The username to use for authentication
    - id: password
      type: System.Security.SecureString
      description: The password to use for authentication
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    return:
      type: PnP.Framework.AuthenticationManager
    content.vb: Public Shared Function CreateWithCredentials(username As String, password As SecureString, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing) As AuthenticationManager
  overload: PnP.Framework.AuthenticationManager.CreateWithCredentials*
  nameWithType.vb: AuthenticationManager.CreateWithCredentials(String, SecureString, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.AuthenticationManager.CreateWithCredentials(System.String, System.Security.SecureString, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: CreateWithCredentials(String, SecureString, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.CreateWithCredentials(System.String,System.String,System.Security.SecureString,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.CreateWithCredentials(System.String,System.String,System.Security.SecureString,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: CreateWithCredentials(System.String,System.String,System.Security.SecureString,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CreateWithCredentials(String, String, SecureString, String, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.CreateWithCredentials(String, String, SecureString, String, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.CreateWithCredentials(System.String, System.String, System.Security.SecureString, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateWithCredentials
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 193
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts.\n"
  example: []
  syntax:
    content: public static AuthenticationManager CreateWithCredentials(string clientId, string username, SecureString password, string redirectUrl = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: username
      type: System.String
      description: The username to use for authentication
    - id: password
      type: System.Security.SecureString
      description: The password to use for authentication
    - id: redirectUrl
      type: System.String
      description: Optional redirect URL to use for authentication as set up in the Azure AD Application
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    return:
      type: PnP.Framework.AuthenticationManager
    content.vb: Public Shared Function CreateWithCredentials(clientId As String, username As String, password As SecureString, redirectUrl As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing) As AuthenticationManager
  overload: PnP.Framework.AuthenticationManager.CreateWithCredentials*
  nameWithType.vb: AuthenticationManager.CreateWithCredentials(String, String, SecureString, String, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.AuthenticationManager.CreateWithCredentials(System.String, System.String, System.Security.SecureString, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: CreateWithCredentials(String, String, SecureString, String, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: CreateWithCertificate(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CreateWithCertificate(String, X509Certificate2, String, String, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.CreateWithCertificate(String, X509Certificate2, String, String, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String, System.Security.Cryptography.X509Certificates.X509Certificate2, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateWithCertificate
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 207
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts.\n"
  example: []
  syntax:
    content: public static AuthenticationManager CreateWithCertificate(string clientId, X509Certificate2 certificate, string tenantId, string redirectUrl = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: A valid certificate
    - id: tenantId
      type: System.String
      description: Tenant id or tenant url
    - id: redirectUrl
      type: System.String
      description: Optional redirect URL to use for authentication as set up in the Azure AD Application
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    return:
      type: PnP.Framework.AuthenticationManager
    content.vb: Public Shared Function CreateWithCertificate(clientId As String, certificate As X509Certificate2, tenantId As String, redirectUrl As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing) As AuthenticationManager
  overload: PnP.Framework.AuthenticationManager.CreateWithCertificate*
  nameWithType.vb: AuthenticationManager.CreateWithCertificate(String, X509Certificate2, String, String, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String, System.Security.Cryptography.X509Certificates.X509Certificate2, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: CreateWithCertificate(String, X509Certificate2, String, String, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String,System.String,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String,System.String,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: CreateWithCertificate(System.String,System.String,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CreateWithCertificate(String, String, String, String, String, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.CreateWithCertificate(String, String, String, String, String, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String, System.String, System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateWithCertificate
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 222
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts.\n"
  example: []
  syntax:
    content: public static AuthenticationManager CreateWithCertificate(string clientId, string certificatePath, string certificatePassword, string tenantId, string redirectUrl = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: certificatePath
      type: System.String
      description: A valid path to a certificate file
    - id: certificatePassword
      type: System.String
      description: The password for the certificate
    - id: tenantId
      type: System.String
      description: 'The tenant id (guid) or name (e.g. contoso.onmicrosoft.com) '
    - id: redirectUrl
      type: System.String
      description: Optional redirect URL to use for authentication as set up in the Azure AD Application
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    return:
      type: PnP.Framework.AuthenticationManager
    content.vb: Public Shared Function CreateWithCertificate(clientId As String, certificatePath As String, certificatePassword As String, tenantId As String, redirectUrl As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing) As AuthenticationManager
  overload: PnP.Framework.AuthenticationManager.CreateWithCertificate*
  nameWithType.vb: AuthenticationManager.CreateWithCertificate(String, String, String, String, String, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String, System.String, System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: CreateWithCertificate(String, String, String, String, String, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: CreateWithCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CreateWithCertificate(String, StoreName, StoreLocation, String, String, String, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.CreateWithCertificate(String, StoreName, StoreLocation, String, String, String, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String, System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.StoreLocation, System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateWithCertificate
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 238
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts.\n"
  example: []
  syntax:
    content: public static AuthenticationManager CreateWithCertificate(string clientId, StoreName storeName, StoreLocation storeLocation, string thumbPrint, string tenantId, string redirectUrl = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
      description: The name of the certificate store to find the certificate in.
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: The location of the certificate store to find the certificate in.
    - id: thumbPrint
      type: System.String
      description: The thumbprint of the certificate to use.
    - id: tenantId
      type: System.String
      description: 'The tenant id (guid) or name (e.g. contoso.onmicrosoft.com) '
    - id: redirectUrl
      type: System.String
      description: Optional redirect URL to use for authentication as set up in the Azure AD Application
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    return:
      type: PnP.Framework.AuthenticationManager
    content.vb: Public Shared Function CreateWithCertificate(clientId As String, storeName As StoreName, storeLocation As StoreLocation, thumbPrint As String, tenantId As String, redirectUrl As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing) As AuthenticationManager
  overload: PnP.Framework.AuthenticationManager.CreateWithCertificate*
  nameWithType.vb: AuthenticationManager.CreateWithCertificate(String, StoreName, StoreLocation, String, String, String, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.AuthenticationManager.CreateWithCertificate(System.String, System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.StoreLocation, System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: CreateWithCertificate(String, StoreName, StoreLocation, String, String, String, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.CreateWithOnBehalfOf(System.String,System.String,Microsoft.Identity.Client.UserAssertion,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.CreateWithOnBehalfOf(System.String,System.String,Microsoft.Identity.Client.UserAssertion,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: CreateWithOnBehalfOf(System.String,System.String,Microsoft.Identity.Client.UserAssertion,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CreateWithOnBehalfOf(String, String, UserAssertion, String, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.CreateWithOnBehalfOf(String, String, UserAssertion, String, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.CreateWithOnBehalfOf(System.String, System.String, Microsoft.Identity.Client.UserAssertion, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateWithOnBehalfOf
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 252
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContext.\n"
  example: []
  syntax:
    content: public static AuthenticationManager CreateWithOnBehalfOf(string clientId, string clientSecret, UserAssertion userAssertion, string tenantId = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication.
    - id: clientSecret
      type: System.String
      description: The client secret of the Azure AD application to use for authentication.
    - id: userAssertion
      type: Microsoft.Identity.Client.UserAssertion
      description: The user assertion (token) of the user on whose behalf to acquire the context
    - id: tenantId
      type: System.String
      description: Optional tenant id or tenant url
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    return:
      type: PnP.Framework.AuthenticationManager
    content.vb: Public Shared Function CreateWithOnBehalfOf(clientId As String, clientSecret As String, userAssertion As UserAssertion, tenantId As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing) As AuthenticationManager
  overload: PnP.Framework.AuthenticationManager.CreateWithOnBehalfOf*
  nameWithType.vb: AuthenticationManager.CreateWithOnBehalfOf(String, String, UserAssertion, String, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.AuthenticationManager.CreateWithOnBehalfOf(System.String, System.String, Microsoft.Identity.Client.UserAssertion, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: CreateWithOnBehalfOf(String, String, UserAssertion, String, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.CreateWithPnPCoreSdk(PnP.Core.Services.IAuthenticationProvider)
  commentId: M:PnP.Framework.AuthenticationManager.CreateWithPnPCoreSdk(PnP.Core.Services.IAuthenticationProvider)
  id: CreateWithPnPCoreSdk(PnP.Core.Services.IAuthenticationProvider)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CreateWithPnPCoreSdk(IAuthenticationProvider)
  nameWithType: AuthenticationManager.CreateWithPnPCoreSdk(IAuthenticationProvider)
  fullName: PnP.Framework.AuthenticationManager.CreateWithPnPCoreSdk(PnP.Core.Services.IAuthenticationProvider)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateWithPnPCoreSdk
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 262
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire an authenticated ClientContext.\n"
  example: []
  syntax:
    content: public static AuthenticationManager CreateWithPnPCoreSdk(IAuthenticationProvider authenticationProvider)
    parameters:
    - id: authenticationProvider
      type: PnP.Core.Services.IAuthenticationProvider
      description: PnP Core SDK authentication provider that will deliver the access token
    return:
      type: PnP.Framework.AuthenticationManager
      description: ''
    content.vb: Public Shared Function CreateWithPnPCoreSdk(authenticationProvider As IAuthenticationProvider) As AuthenticationManager
  overload: PnP.Framework.AuthenticationManager.CreateWithPnPCoreSdk*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.AuthenticationManager.CreateWithPnPCoreSdk(PnP.Core.Services.PnPContext)
  commentId: M:PnP.Framework.AuthenticationManager.CreateWithPnPCoreSdk(PnP.Core.Services.PnPContext)
  id: CreateWithPnPCoreSdk(PnP.Core.Services.PnPContext)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: CreateWithPnPCoreSdk(PnPContext)
  nameWithType: AuthenticationManager.CreateWithPnPCoreSdk(PnPContext)
  fullName: PnP.Framework.AuthenticationManager.CreateWithPnPCoreSdk(PnP.Core.Services.PnPContext)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CreateWithPnPCoreSdk
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 272
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire an authenticated ClientContext.\n"
  example: []
  syntax:
    content: public static AuthenticationManager CreateWithPnPCoreSdk(PnPContext pnpContext)
    parameters:
    - id: pnpContext
      type: PnP.Core.Services.PnPContext
      description: PnP Core SDK authentication provider that will deliver the access token
    return:
      type: PnP.Framework.AuthenticationManager
      description: ''
    content.vb: Public Shared Function CreateWithPnPCoreSdk(pnpContext As PnPContext) As AuthenticationManager
  overload: PnP.Framework.AuthenticationManager.CreateWithPnPCoreSdk*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.AuthenticationManager.#ctor
  commentId: M:PnP.Framework.AuthenticationManager.#ctor
  id: '#ctor'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager()
  nameWithType: AuthenticationManager.AuthenticationManager()
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager()
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 282
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nEmpty constructor, to be used if you want to execute ACS based authentication methods.\n"
  example: []
  syntax:
    content: public AuthenticationManager()
    content.vb: Public Sub New
  overload: PnP.Framework.AuthenticationManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.#ctor(System.Security.SecureString)
  commentId: M:PnP.Framework.AuthenticationManager.#ctor(System.Security.SecureString)
  id: '#ctor(System.Security.SecureString)'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager(SecureString)
  nameWithType: AuthenticationManager.AuthenticationManager(SecureString)
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager(System.Security.SecureString)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 295
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  syntax:
    content: public AuthenticationManager(SecureString accessToken)
    parameters:
    - id: accessToken
      type: System.Security.SecureString
    content.vb: Public Sub New(accessToken As SecureString)
  overload: PnP.Framework.AuthenticationManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.#ctor(System.String,System.Security.SecureString,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.#ctor(System.String,System.Security.SecureString,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: '#ctor(System.String,System.Security.SecureString,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager(String, SecureString, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.AuthenticationManager(String, SecureString, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.Security.SecureString, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 307
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts. It uses the PnP Management Shell multi-tenant Azure AD application ID to authenticate. By default tokens will be cached in memory.\n"
  example: []
  syntax:
    content: public AuthenticationManager(string username, SecureString password, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: username
      type: System.String
      description: The username to use for authentication
    - id: password
      type: System.Security.SecureString
      description: The password to use for authentication
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    content.vb: Public Sub New(username As String, password As SecureString, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing)
  overload: PnP.Framework.AuthenticationManager.#ctor*
  nameWithType.vb: AuthenticationManager.AuthenticationManager(String, SecureString, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.Security.SecureString, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: AuthenticationManager(String, SecureString, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,System.Security.SecureString,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,System.Security.SecureString,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: '#ctor(System.String,System.String,System.Security.SecureString,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager(String, String, SecureString, String, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.AuthenticationManager(String, String, SecureString, String, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.String, System.Security.SecureString, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 320
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts.\n"
  example: []
  syntax:
    content: public AuthenticationManager(string clientId, string username, SecureString password, string redirectUrl = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: username
      type: System.String
      description: The username to use for authentication
    - id: password
      type: System.Security.SecureString
      description: The password to use for authentication
    - id: redirectUrl
      type: System.String
      description: Optional redirect URL to use for authentication as set up in the Azure AD Application
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    content.vb: Public Sub New(clientId As String, username As String, password As SecureString, redirectUrl As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing)
  overload: PnP.Framework.AuthenticationManager.#ctor*
  nameWithType.vb: AuthenticationManager.AuthenticationManager(String, String, SecureString, String, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.String, System.Security.SecureString, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: AuthenticationManager(String, String, SecureString, String, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.#ctor(System.String,System.Action{System.String,System.Int32},System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.#ctor(System.String,System.Action{System.String,System.Int32},System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: '#ctor(System.String,System.Action{System.String,System.Int32},System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager(String, Action<String, Int32>, String, String, String, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.AuthenticationManager(String, Action<String, Int32>, String, String, String, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.Action<System.String, System.Int32>, System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 351
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire access tokens and client contexts using the Azure AD Interactive flow.\n"
  example: []
  syntax:
    content: public AuthenticationManager(string clientId, Action<string, int> openBrowserCallback, string tenantId = null, string successMessageHtml = null, string failureMessageHtml = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: openBrowserCallback
      type: System.Action{System.String,System.Int32}
      description: This callback will be called providing the URL and port to open during the authentication flow
    - id: tenantId
      type: System.String
      description: Optional tenant id or tenant url
    - id: successMessageHtml
      type: System.String
      description: Allows you to override the success message. Notice that a success header message will be added.
    - id: failureMessageHtml
      type: System.String
      description: llows you to override the failure message. Notice that a failed header message will be added and the error message will be appended.
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called to register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    content.vb: Public Sub New(clientId As String, openBrowserCallback As Action(Of String, Integer), tenantId As String = Nothing, successMessageHtml As String = Nothing, failureMessageHtml As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing)
  overload: PnP.Framework.AuthenticationManager.#ctor*
  nameWithType.vb: AuthenticationManager.AuthenticationManager(String, Action(Of String, Int32), String, String, String, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.Action(Of System.String, System.Int32), System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: AuthenticationManager(String, Action(Of String, Int32), String, String, String, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache},Microsoft.Identity.Client.Extensibility.ICustomWebUi)
  commentId: M:PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache},Microsoft.Identity.Client.Extensibility.ICustomWebUi)
  id: '#ctor(System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache},Microsoft.Identity.Client.Extensibility.ICustomWebUi)'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager(String, String, String, AzureEnvironment, Action<ITokenCache>, ICustomWebUi)
  nameWithType: AuthenticationManager.AuthenticationManager(String, String, String, AzureEnvironment, Action<ITokenCache>, ICustomWebUi)
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>, Microsoft.Identity.Client.Extensibility.ICustomWebUi)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 364
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire access tokens and client contexts using the Azure AD Interactive flow.\n"
  example: []
  syntax:
    content: public AuthenticationManager(string clientId, string redirectUrl = null, string tenantId = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null, ICustomWebUi customWebUi = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: redirectUrl
      type: System.String
      description: Optional redirect URL to use for authentication as set up in the Azure AD Application
    - id: tenantId
      type: System.String
      description: Optional tenant id or tenant url
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    - id: customWebUi
      type: Microsoft.Identity.Client.Extensibility.ICustomWebUi
      description: Optional ICustomWebUi object to fully customize the feedback behavior
    content.vb: Public Sub New(clientId As String, redirectUrl As String = Nothing, tenantId As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing, customWebUi As ICustomWebUi = Nothing)
  overload: PnP.Framework.AuthenticationManager.#ctor*
  nameWithType.vb: AuthenticationManager.AuthenticationManager(String, String, String, AzureEnvironment, Action(Of ITokenCache), ICustomWebUi)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache), Microsoft.Identity.Client.Extensibility.ICustomWebUi)
  name.vb: AuthenticationManager(String, String, String, AzureEnvironment, Action(Of ITokenCache), ICustomWebUi)
- uid: PnP.Framework.AuthenticationManager.#ctor(System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.#ctor(System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: '#ctor(System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager(String, Func<DeviceCodeResult, Task>, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.AuthenticationManager(String, Func<DeviceCodeResult, Task>, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task>, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 397
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts through device code authentication\n"
  example: []
  syntax:
    content: public AuthenticationManager(string clientId, Func<DeviceCodeResult, Task> deviceCodeCallback, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: deviceCodeCallback
      type: System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task}
      description: The callback that will be called with device code information.
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    content.vb: Public Sub New(clientId As String, deviceCodeCallback As Func(Of DeviceCodeResult, Task), azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing)
  overload: PnP.Framework.AuthenticationManager.#ctor*
  nameWithType.vb: AuthenticationManager.AuthenticationManager(String, Func(Of DeviceCodeResult, Task), AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.Func(Of Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task), PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: AuthenticationManager(String, Func(Of DeviceCodeResult, Task), AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: '#ctor(System.String,System.String,System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task},PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager(String, String, Func<DeviceCodeResult, Task>, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.AuthenticationManager(String, String, Func<DeviceCodeResult, Task>, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.String, System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task>, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 410
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts through device code authentication\n"
  example: []
  syntax:
    content: public AuthenticationManager(string clientId, string tenantId, Func<DeviceCodeResult, Task> deviceCodeCallback, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: tenantId
      type: System.String
      description: Optional tenant id or tenant url
    - id: deviceCodeCallback
      type: System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task}
      description: The callback that will be called with device code information.
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    content.vb: Public Sub New(clientId As String, tenantId As String, deviceCodeCallback As Func(Of DeviceCodeResult, Task), azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing)
  overload: PnP.Framework.AuthenticationManager.#ctor*
  nameWithType.vb: AuthenticationManager.AuthenticationManager(String, String, Func(Of DeviceCodeResult, Task), AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.String, System.Func(Of Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task), PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: AuthenticationManager(String, String, Func(Of DeviceCodeResult, Task), AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: '#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager(String, X509Certificate2, String, String, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.AuthenticationManager(String, X509Certificate2, String, String, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.Security.Cryptography.X509Certificates.X509Certificate2, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 446
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts.\n"
  example: []
  syntax:
    content: public AuthenticationManager(string clientId, X509Certificate2 certificate, string tenantId, string redirectUrl = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: A valid certificate
    - id: tenantId
      type: System.String
      description: Tenant id or tenant url
    - id: redirectUrl
      type: System.String
      description: Optional redirect URL to use for authentication as set up in the Azure AD Application
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    content.vb: Public Sub New(clientId As String, certificate As X509Certificate2, tenantId As String, redirectUrl As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing)
  overload: PnP.Framework.AuthenticationManager.#ctor*
  nameWithType.vb: AuthenticationManager.AuthenticationManager(String, X509Certificate2, String, String, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.Security.Cryptography.X509Certificates.X509Certificate2, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: AuthenticationManager(String, X509Certificate2, String, String, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: '#ctor(System.String,System.String,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager(String, String, String, String, String, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.AuthenticationManager(String, String, String, String, String, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.String, System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 483
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts.\n"
  example: []
  syntax:
    content: public AuthenticationManager(string clientId, string certificatePath, string certificatePassword, string tenantId, string redirectUrl = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: certificatePath
      type: System.String
      description: A valid path to a certificate file
    - id: certificatePassword
      type: System.String
      description: The password for the certificate
    - id: tenantId
      type: System.String
      description: 'The tenant id (guid) or name (e.g. contoso.onmicrosoft.com) '
    - id: redirectUrl
      type: System.String
      description: Optional redirect URL to use for authentication as set up in the Azure AD Application
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    content.vb: Public Sub New(clientId As String, certificatePath As String, certificatePassword As String, tenantId As String, redirectUrl As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing)
  overload: PnP.Framework.AuthenticationManager.#ctor*
  nameWithType.vb: AuthenticationManager.AuthenticationManager(String, String, String, String, String, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.String, System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: AuthenticationManager(String, String, String, String, String, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: '#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.String,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager(String, StoreName, StoreLocation, String, String, String, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.AuthenticationManager(String, StoreName, StoreLocation, String, String, String, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.StoreLocation, System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 543
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContexts.\n"
  example: []
  syntax:
    content: public AuthenticationManager(string clientId, StoreName storeName, StoreLocation storeLocation, string thumbPrint, string tenantId, string redirectUrl = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
      description: The name of the certificate store to find the certificate in.
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: The location of the certificate store to find the certificate in.
    - id: thumbPrint
      type: System.String
      description: The thumbprint of the certificate to use.
    - id: tenantId
      type: System.String
      description: 'The tenant id (guid) or name (e.g. contoso.onmicrosoft.com) '
    - id: redirectUrl
      type: System.String
      description: Optional redirect URL to use for authentication as set up in the Azure AD Application
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: If present, after setting up the base flow for authentication this callback will be called register a custom tokencache. See https://aka.ms/msal-net-token-cache-serialization.
    content.vb: Public Sub New(clientId As String, storeName As StoreName, storeLocation As StoreLocation, thumbPrint As String, tenantId As String, redirectUrl As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing)
  overload: PnP.Framework.AuthenticationManager.#ctor*
  nameWithType.vb: AuthenticationManager.AuthenticationManager(String, StoreName, StoreLocation, String, String, String, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.StoreLocation, System.String, System.String, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: AuthenticationManager(String, StoreName, StoreLocation, String, String, String, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,Microsoft.Identity.Client.UserAssertion,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  commentId: M:PnP.Framework.AuthenticationManager.#ctor(System.String,System.String,Microsoft.Identity.Client.UserAssertion,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})
  id: '#ctor(System.String,System.String,Microsoft.Identity.Client.UserAssertion,System.String,PnP.Framework.AzureEnvironment,System.Action{Microsoft.Identity.Client.ITokenCache})'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager(String, String, UserAssertion, String, AzureEnvironment, Action<ITokenCache>)
  nameWithType: AuthenticationManager.AuthenticationManager(String, String, UserAssertion, String, AzureEnvironment, Action<ITokenCache>)
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.String, Microsoft.Identity.Client.UserAssertion, System.String, PnP.Framework.AzureEnvironment, System.Action<Microsoft.Identity.Client.ITokenCache>)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 580
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates a new instance of the Authentication Manager to acquire authenticated ClientContext.\n"
  example: []
  syntax:
    content: public AuthenticationManager(string clientId, string clientSecret, UserAssertion userAssertion, string tenantId = null, AzureEnvironment azureEnvironment = AzureEnvironment.Production, Action<ITokenCache> tokenCacheCallback = null)
    parameters:
    - id: clientId
      type: System.String
      description: The client id of the Azure AD application to use for authentication.
    - id: clientSecret
      type: System.String
      description: The client secret of the Azure AD application to use for authentication.
    - id: userAssertion
      type: Microsoft.Identity.Client.UserAssertion
      description: The user assertion (token) of the user on whose behalf to acquire the context
    - id: tenantId
      type: System.String
      description: Optional tenant id or tenant url
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
      description: The azure environment to use. Defaults to AzureEnvironment.Production
    - id: tokenCacheCallback
      type: System.Action{Microsoft.Identity.Client.ITokenCache}
      description: ''
    content.vb: Public Sub New(clientId As String, clientSecret As String, userAssertion As UserAssertion, tenantId As String = Nothing, azureEnvironment As AzureEnvironment = AzureEnvironment.Production, tokenCacheCallback As Action(Of ITokenCache) = Nothing)
  overload: PnP.Framework.AuthenticationManager.#ctor*
  nameWithType.vb: AuthenticationManager.AuthenticationManager(String, String, UserAssertion, String, AzureEnvironment, Action(Of ITokenCache))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.AuthenticationManager.AuthenticationManager(System.String, System.String, Microsoft.Identity.Client.UserAssertion, System.String, PnP.Framework.AzureEnvironment, System.Action(Of Microsoft.Identity.Client.ITokenCache))
  name.vb: AuthenticationManager(String, String, UserAssertion, String, AzureEnvironment, Action(Of ITokenCache))
- uid: PnP.Framework.AuthenticationManager.#ctor(PnP.Core.Services.IAuthenticationProvider)
  commentId: M:PnP.Framework.AuthenticationManager.#ctor(PnP.Core.Services.IAuthenticationProvider)
  id: '#ctor(PnP.Core.Services.IAuthenticationProvider)'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager(IAuthenticationProvider)
  nameWithType: AuthenticationManager.AuthenticationManager(IAuthenticationProvider)
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager(PnP.Core.Services.IAuthenticationProvider)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 614
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates an AuthenticationManager for the given PnP Core SDK <xref href=\"PnP.Core.Services.IAuthenticationProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public AuthenticationManager(IAuthenticationProvider authenticationProvider)
    parameters:
    - id: authenticationProvider
      type: PnP.Core.Services.IAuthenticationProvider
      description: PnP Core SDK <xref href="PnP.Core.Services.IAuthenticationProvider" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(authenticationProvider As IAuthenticationProvider)
  overload: PnP.Framework.AuthenticationManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.#ctor(PnP.Core.Services.PnPContext)
  commentId: M:PnP.Framework.AuthenticationManager.#ctor(PnP.Core.Services.PnPContext)
  id: '#ctor(PnP.Core.Services.PnPContext)'
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: AuthenticationManager(PnPContext)
  nameWithType: AuthenticationManager.AuthenticationManager(PnPContext)
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager(PnP.Core.Services.PnPContext)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 625
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nCreates an AuthenticationManager for the given PnP Core SDK\n"
  example: []
  syntax:
    content: public AuthenticationManager(PnPContext pnPContext)
    parameters:
    - id: pnPContext
      type: PnP.Core.Services.PnPContext
      description: PnP Core SDK<xref href="PnP.Core.Services.PnPContext" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(pnPContext As PnPContext)
  overload: PnP.Framework.AuthenticationManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetAccessToken(System.String,Microsoft.Identity.Client.Prompt)
  commentId: M:PnP.Framework.AuthenticationManager.GetAccessToken(System.String,Microsoft.Identity.Client.Prompt)
  id: GetAccessToken(System.String,Microsoft.Identity.Client.Prompt)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetAccessToken(String, Prompt)
  nameWithType: AuthenticationManager.GetAccessToken(String, Prompt)
  fullName: PnP.Framework.AuthenticationManager.GetAccessToken(System.String, Microsoft.Identity.Client.Prompt)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetAccessToken
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 640
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns an access token for a given site.\n"
  example: []
  syntax:
    content: public string GetAccessToken(string siteUrl, Prompt prompt = default(Prompt))
    parameters:
    - id: siteUrl
      type: System.String
      description: ''
    - id: prompt
      type: Microsoft.Identity.Client.Prompt
      description: The prompt style to use. Notice that this only works with the Interactive Login flow, for all other flows this parameter is ignored.
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetAccessToken(siteUrl As String, prompt As Prompt = Nothing) As String
  overload: PnP.Framework.AuthenticationManager.GetAccessToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String,Microsoft.Identity.Client.Prompt)
  commentId: M:PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String,Microsoft.Identity.Client.Prompt)
  id: GetAccessTokenAsync(System.String,Microsoft.Identity.Client.Prompt)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetAccessTokenAsync(String, Prompt)
  nameWithType: AuthenticationManager.GetAccessTokenAsync(String, Prompt)
  fullName: PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String, Microsoft.Identity.Client.Prompt)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetAccessTokenAsync
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 651
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns an access token for a given site.\n"
  example: []
  syntax:
    content: public async Task<string> GetAccessTokenAsync(string siteUrl, Prompt prompt = default(Prompt))
    parameters:
    - id: siteUrl
      type: System.String
      description: ''
    - id: prompt
      type: Microsoft.Identity.Client.Prompt
      description: The prompt style to use. Notice that this only works with the Interactive Login flow, for all other flows this parameter is ignored.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Function GetAccessTokenAsync(siteUrl As String, prompt As Prompt = Nothing) As Task(Of String)
  overload: PnP.Framework.AuthenticationManager.GetAccessTokenAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetAccessToken(System.String,System.Threading.CancellationToken,Microsoft.Identity.Client.Prompt)
  commentId: M:PnP.Framework.AuthenticationManager.GetAccessToken(System.String,System.Threading.CancellationToken,Microsoft.Identity.Client.Prompt)
  id: GetAccessToken(System.String,System.Threading.CancellationToken,Microsoft.Identity.Client.Prompt)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetAccessToken(String, CancellationToken, Prompt)
  nameWithType: AuthenticationManager.GetAccessToken(String, CancellationToken, Prompt)
  fullName: PnP.Framework.AuthenticationManager.GetAccessToken(System.String, System.Threading.CancellationToken, Microsoft.Identity.Client.Prompt)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetAccessToken
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 663
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns an access token for a given site.\n"
  example: []
  syntax:
    content: public string GetAccessToken(string siteUrl, CancellationToken cancellationToken, Prompt prompt = default(Prompt))
    parameters:
    - id: siteUrl
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Optional cancellation token to cancel the request
    - id: prompt
      type: Microsoft.Identity.Client.Prompt
      description: The prompt style to use. Notice that this only works with the Interactive Login flow, for all other flows this parameter is ignored.
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetAccessToken(siteUrl As String, cancellationToken As CancellationToken, prompt As Prompt = Nothing) As String
  overload: PnP.Framework.AuthenticationManager.GetAccessToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String,System.Threading.CancellationToken,Microsoft.Identity.Client.Prompt)
  commentId: M:PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String,System.Threading.CancellationToken,Microsoft.Identity.Client.Prompt)
  id: GetAccessTokenAsync(System.String,System.Threading.CancellationToken,Microsoft.Identity.Client.Prompt)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetAccessTokenAsync(String, CancellationToken, Prompt)
  nameWithType: AuthenticationManager.GetAccessTokenAsync(String, CancellationToken, Prompt)
  fullName: PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String, System.Threading.CancellationToken, Microsoft.Identity.Client.Prompt)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetAccessTokenAsync
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 679
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns an access token for a given site.\n"
  example: []
  syntax:
    content: public async Task<string> GetAccessTokenAsync(string siteUrl, CancellationToken cancellationToken, Prompt prompt = default(Prompt))
    parameters:
    - id: siteUrl
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Optional cancellation token to cancel the request
    - id: prompt
      type: Microsoft.Identity.Client.Prompt
      description: The prompt style to use. Notice that this only works with the Interactive Login flow, for all other flows this parameter is ignored.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Function GetAccessTokenAsync(siteUrl As String, cancellationToken As CancellationToken, prompt As Prompt = Nothing) As Task(Of String)
  overload: PnP.Framework.AuthenticationManager.GetAccessTokenAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String[],Microsoft.Identity.Client.Prompt)
  commentId: M:PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String[],Microsoft.Identity.Client.Prompt)
  id: GetAccessTokenAsync(System.String[],Microsoft.Identity.Client.Prompt)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetAccessTokenAsync(String[], Prompt)
  nameWithType: AuthenticationManager.GetAccessTokenAsync(String[], Prompt)
  fullName: PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String[], Microsoft.Identity.Client.Prompt)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetAccessTokenAsync
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 694
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns an access token for the given scopes.\n"
  example: []
  syntax:
    content: public async Task<string> GetAccessTokenAsync(string[] scopes, Prompt prompt = default(Prompt))
    parameters:
    - id: scopes
      type: System.String[]
      description: The scopes to retrieve the access token for
    - id: prompt
      type: Microsoft.Identity.Client.Prompt
      description: The prompt style to use. Notice that this only works with the Interactive Login flow, for all other flows this parameter is ignored.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Function GetAccessTokenAsync(scopes As String(), prompt As Prompt = Nothing) As Task(Of String)
  overload: PnP.Framework.AuthenticationManager.GetAccessTokenAsync*
  nameWithType.vb: AuthenticationManager.GetAccessTokenAsync(String(), Prompt)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String(), Microsoft.Identity.Client.Prompt)
  name.vb: GetAccessTokenAsync(String(), Prompt)
- uid: PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String[],System.Threading.CancellationToken,Microsoft.Identity.Client.Prompt,System.Uri)
  commentId: M:PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String[],System.Threading.CancellationToken,Microsoft.Identity.Client.Prompt,System.Uri)
  id: GetAccessTokenAsync(System.String[],System.Threading.CancellationToken,Microsoft.Identity.Client.Prompt,System.Uri)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetAccessTokenAsync(String[], CancellationToken, Prompt, Uri)
  nameWithType: AuthenticationManager.GetAccessTokenAsync(String[], CancellationToken, Prompt, Uri)
  fullName: PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String[], System.Threading.CancellationToken, Microsoft.Identity.Client.Prompt, System.Uri)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetAccessTokenAsync
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 708
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns an access token for the given scopes.\n"
  example: []
  syntax:
    content: public async Task<string> GetAccessTokenAsync(string[] scopes, CancellationToken cancellationToken, Prompt prompt = default(Prompt), Uri uri = null)
    parameters:
    - id: scopes
      type: System.String[]
      description: The scopes to retrieve the access token for
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Optional cancellation token to cancel the request
    - id: prompt
      type: Microsoft.Identity.Client.Prompt
      description: The prompt style to use. Notice that this only works with the Interactive Login flow, for all other flows this parameter is ignored.
    - id: uri
      type: System.Uri
      description: for ClientContextType.PnPCoreSdk case as by interface definition needed for GetAccessTokenAsync
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Function GetAccessTokenAsync(scopes As String(), cancellationToken As CancellationToken, prompt As Prompt = Nothing, uri As Uri = Nothing) As Task(Of String)
  overload: PnP.Framework.AuthenticationManager.GetAccessTokenAsync*
  nameWithType.vb: AuthenticationManager.GetAccessTokenAsync(String(), CancellationToken, Prompt, Uri)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.AuthenticationManager.GetAccessTokenAsync(System.String(), System.Threading.CancellationToken, Microsoft.Identity.Client.Prompt, System.Uri)
  name.vb: GetAccessTokenAsync(String(), CancellationToken, Prompt, Uri)
- uid: PnP.Framework.AuthenticationManager.GetContext(System.String)
  commentId: M:PnP.Framework.AuthenticationManager.GetContext(System.String)
  id: GetContext(System.String)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetContext(String)
  nameWithType: AuthenticationManager.GetContext(String)
  fullName: PnP.Framework.AuthenticationManager.GetContext(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetContext
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 824
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns a CSOM ClientContext which has been set up for Azure AD OAuth authentication\n"
  example: []
  syntax:
    content: public ClientContext GetContext(string siteUrl)
    parameters:
    - id: siteUrl
      type: System.String
      description: ''
    return:
      type: Microsoft.SharePoint.Client.ClientContext
      description: ''
    content.vb: Public Function GetContext(siteUrl As String) As ClientContext
  overload: PnP.Framework.AuthenticationManager.GetContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetContext(System.String,System.Threading.CancellationToken)
  commentId: M:PnP.Framework.AuthenticationManager.GetContext(System.String,System.Threading.CancellationToken)
  id: GetContext(System.String,System.Threading.CancellationToken)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetContext(String, CancellationToken)
  nameWithType: AuthenticationManager.GetContext(String, CancellationToken)
  fullName: PnP.Framework.AuthenticationManager.GetContext(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetContext
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 835
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns a CSOM ClientContext which has been set up for Azure AD OAuth authentication\n"
  example: []
  syntax:
    content: public ClientContext GetContext(string siteUrl, CancellationToken cancellationToken)
    parameters:
    - id: siteUrl
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Optional cancellation token to cancel the request
    return:
      type: Microsoft.SharePoint.Client.ClientContext
      description: ''
    content.vb: Public Function GetContext(siteUrl As String, cancellationToken As CancellationToken) As ClientContext
  overload: PnP.Framework.AuthenticationManager.GetContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetContextAsync(System.String)
  commentId: M:PnP.Framework.AuthenticationManager.GetContextAsync(System.String)
  id: GetContextAsync(System.String)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetContextAsync(String)
  nameWithType: AuthenticationManager.GetContextAsync(String)
  fullName: PnP.Framework.AuthenticationManager.GetContextAsync(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetContextAsync
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 845
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns a CSOM ClientContext which has been set up for Azure AD OAuth authentication\n"
  example: []
  syntax:
    content: public async Task<ClientContext> GetContextAsync(string siteUrl)
    parameters:
    - id: siteUrl
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.ClientContext}
      description: ''
    content.vb: Public Function GetContextAsync(siteUrl As String) As Task(Of ClientContext)
  overload: PnP.Framework.AuthenticationManager.GetContextAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetContextAsync(System.String,System.Threading.CancellationToken)
  commentId: M:PnP.Framework.AuthenticationManager.GetContextAsync(System.String,System.Threading.CancellationToken)
  id: GetContextAsync(System.String,System.Threading.CancellationToken)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetContextAsync(String, CancellationToken)
  nameWithType: AuthenticationManager.GetContextAsync(String, CancellationToken)
  fullName: PnP.Framework.AuthenticationManager.GetContextAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetContextAsync
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 856
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns a CSOM ClientContext which has been set up for Azure AD OAuth authentication\n"
  example: []
  syntax:
    content: public async Task<ClientContext> GetContextAsync(string siteUrl, CancellationToken cancellationToken)
    parameters:
    - id: siteUrl
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Optional cancellation token to cancel the request
    return:
      type: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.ClientContext}
      description: ''
    content.vb: Public Function GetContextAsync(siteUrl As String, cancellationToken As CancellationToken) As Task(Of ClientContext)
  overload: PnP.Framework.AuthenticationManager.GetContextAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetOnPremisesContext(System.String,System.String,System.Security.SecureString)
  commentId: M:PnP.Framework.AuthenticationManager.GetOnPremisesContext(System.String,System.String,System.Security.SecureString)
  id: GetOnPremisesContext(System.String,System.String,System.Security.SecureString)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetOnPremisesContext(String, String, SecureString)
  nameWithType: AuthenticationManager.GetOnPremisesContext(String, String, SecureString)
  fullName: PnP.Framework.AuthenticationManager.GetOnPremisesContext(System.String, System.String, System.Security.SecureString)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetOnPremisesContext
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1152
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  syntax:
    content: public ClientContext GetOnPremisesContext(string siteUrl, string userName, SecureString password)
    parameters:
    - id: siteUrl
      type: System.String
    - id: userName
      type: System.String
    - id: password
      type: System.Security.SecureString
    return:
      type: Microsoft.SharePoint.Client.ClientContext
    content.vb: Public Function GetOnPremisesContext(siteUrl As String, userName As String, password As SecureString) As ClientContext
  overload: PnP.Framework.AuthenticationManager.GetOnPremisesContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetOnPremisesContext(System.String,System.Net.ICredentials)
  commentId: M:PnP.Framework.AuthenticationManager.GetOnPremisesContext(System.String,System.Net.ICredentials)
  id: GetOnPremisesContext(System.String,System.Net.ICredentials)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetOnPremisesContext(String, ICredentials)
  nameWithType: AuthenticationManager.GetOnPremisesContext(String, ICredentials)
  fullName: PnP.Framework.AuthenticationManager.GetOnPremisesContext(System.String, System.Net.ICredentials)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetOnPremisesContext
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1165
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  syntax:
    content: public ClientContext GetOnPremisesContext(string siteUrl, ICredentials credentials)
    parameters:
    - id: siteUrl
      type: System.String
    - id: credentials
      type: System.Net.ICredentials
    return:
      type: Microsoft.SharePoint.Client.ClientContext
    content.vb: Public Function GetOnPremisesContext(siteUrl As String, credentials As ICredentials) As ClientContext
  overload: PnP.Framework.AuthenticationManager.GetOnPremisesContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetOnPremisesContext(System.String)
  commentId: M:PnP.Framework.AuthenticationManager.GetOnPremisesContext(System.String)
  id: GetOnPremisesContext(System.String)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetOnPremisesContext(String)
  nameWithType: AuthenticationManager.GetOnPremisesContext(String)
  fullName: PnP.Framework.AuthenticationManager.GetOnPremisesContext(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetOnPremisesContext
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1178
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  syntax:
    content: public ClientContext GetOnPremisesContext(string siteUrl)
    parameters:
    - id: siteUrl
      type: System.String
    return:
      type: Microsoft.SharePoint.Client.ClientContext
    content.vb: Public Function GetOnPremisesContext(siteUrl As String) As ClientContext
  overload: PnP.Framework.AuthenticationManager.GetOnPremisesContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetACSAppOnlyContext(System.String,System.String,System.String)
  commentId: M:PnP.Framework.AuthenticationManager.GetACSAppOnlyContext(System.String,System.String,System.String)
  id: GetACSAppOnlyContext(System.String,System.String,System.String)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetACSAppOnlyContext(String, String, String)
  nameWithType: AuthenticationManager.GetACSAppOnlyContext(String, String, String)
  fullName: PnP.Framework.AuthenticationManager.GetACSAppOnlyContext(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetACSAppOnlyContext
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1227
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns an app only ClientContext object\n"
  example: []
  syntax:
    content: public ClientContext GetACSAppOnlyContext(string siteUrl, string appId, string appSecret)
    parameters:
    - id: siteUrl
      type: System.String
      description: Site for which the ClientContext object will be instantiated
    - id: appId
      type: System.String
      description: Application ID which is requesting the ClientContext object
    - id: appSecret
      type: System.String
      description: Application secret of the Application which is requesting the ClientContext object
    return:
      type: Microsoft.SharePoint.Client.ClientContext
      description: ClientContext to be used by CSOM code
    content.vb: Public Function GetACSAppOnlyContext(siteUrl As String, appId As String, appSecret As String) As ClientContext
  overload: PnP.Framework.AuthenticationManager.GetACSAppOnlyContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetACSAppOnlyContext(System.String,System.String,System.String,PnP.Framework.AzureEnvironment)
  commentId: M:PnP.Framework.AuthenticationManager.GetACSAppOnlyContext(System.String,System.String,System.String,PnP.Framework.AzureEnvironment)
  id: GetACSAppOnlyContext(System.String,System.String,System.String,PnP.Framework.AzureEnvironment)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetACSAppOnlyContext(String, String, String, AzureEnvironment)
  nameWithType: AuthenticationManager.GetACSAppOnlyContext(String, String, String, AzureEnvironment)
  fullName: PnP.Framework.AuthenticationManager.GetACSAppOnlyContext(System.String, System.String, System.String, PnP.Framework.AzureEnvironment)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetACSAppOnlyContext
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1240
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns an app only ClientContext object\n"
  example: []
  syntax:
    content: public ClientContext GetACSAppOnlyContext(string siteUrl, string appId, string appSecret, AzureEnvironment environment = AzureEnvironment.Production)
    parameters:
    - id: siteUrl
      type: System.String
      description: Site for which the ClientContext object will be instantiated
    - id: appId
      type: System.String
      description: Application ID which is requesting the ClientContext object
    - id: appSecret
      type: System.String
      description: Application secret of the Application which is requesting the ClientContext object
    - id: environment
      type: PnP.Framework.AzureEnvironment
      description: SharePoint environment being used
    return:
      type: Microsoft.SharePoint.Client.ClientContext
      description: ClientContext to be used by CSOM code
    content.vb: Public Function GetACSAppOnlyContext(siteUrl As String, appId As String, appSecret As String, environment As AzureEnvironment = AzureEnvironment.Production) As ClientContext
  overload: PnP.Framework.AuthenticationManager.GetACSAppOnlyContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetACSAppOnlyContext(System.String,System.String,System.String,System.String,System.String,System.String)
  commentId: M:PnP.Framework.AuthenticationManager.GetACSAppOnlyContext(System.String,System.String,System.String,System.String,System.String,System.String)
  id: GetACSAppOnlyContext(System.String,System.String,System.String,System.String,System.String,System.String)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetACSAppOnlyContext(String, String, String, String, String, String)
  nameWithType: AuthenticationManager.GetACSAppOnlyContext(String, String, String, String, String, String)
  fullName: PnP.Framework.AuthenticationManager.GetACSAppOnlyContext(System.String, System.String, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetACSAppOnlyContext
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1255
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns an app only ClientContext object\n"
  example: []
  syntax:
    content: public ClientContext GetACSAppOnlyContext(string siteUrl, string realm, string appId, string appSecret, string acsHostUrl = "accesscontrol.windows.net", string globalEndPointPrefix = "accounts")
    parameters:
    - id: siteUrl
      type: System.String
      description: Site for which the ClientContext object will be instantiated
    - id: realm
      type: System.String
      description: Realm of the environment (tenant) that requests the ClientContext object, may be null
    - id: appId
      type: System.String
      description: Application ID which is requesting the ClientContext object
    - id: appSecret
      type: System.String
      description: Application secret of the Application which is requesting the ClientContext object
    - id: acsHostUrl
      type: System.String
      description: Azure ACS host, defaults to accesscontrol.windows.net but internal pre-production environments use other hosts
    - id: globalEndPointPrefix
      type: System.String
      description: Azure ACS endpoint prefix, defaults to accounts but internal pre-production environments use other prefixes
    return:
      type: Microsoft.SharePoint.Client.ClientContext
      description: ClientContext to be used by CSOM code
    content.vb: Public Function GetACSAppOnlyContext(siteUrl As String, realm As String, appId As String, appSecret As String, acsHostUrl As String = "accesscontrol.windows.net", globalEndPointPrefix As String = "accounts") As ClientContext
  overload: PnP.Framework.AuthenticationManager.GetACSAppOnlyContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetACSEndPoint(PnP.Framework.AzureEnvironment)
  commentId: M:PnP.Framework.AuthenticationManager.GetACSEndPoint(PnP.Framework.AzureEnvironment)
  id: GetACSEndPoint(PnP.Framework.AzureEnvironment)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetACSEndPoint(AzureEnvironment)
  nameWithType: AuthenticationManager.GetACSEndPoint(AzureEnvironment)
  fullName: PnP.Framework.AuthenticationManager.GetACSEndPoint(PnP.Framework.AzureEnvironment)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetACSEndPoint
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1283
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nGets the Azure ASC login end point for the given environment\n"
  example: []
  syntax:
    content: public static string GetACSEndPoint(AzureEnvironment environment)
    parameters:
    - id: environment
      type: PnP.Framework.AzureEnvironment
      description: Environment to get the login information for
    return:
      type: System.String
      description: Azure ASC login endpoint
    content.vb: Public Shared Function GetACSEndPoint(environment As AzureEnvironment) As String
  overload: PnP.Framework.AuthenticationManager.GetACSEndPoint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.AuthenticationManager.GetACSEndPointPrefix(PnP.Framework.AzureEnvironment)
  commentId: M:PnP.Framework.AuthenticationManager.GetACSEndPointPrefix(PnP.Framework.AzureEnvironment)
  id: GetACSEndPointPrefix(PnP.Framework.AzureEnvironment)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetACSEndPointPrefix(AzureEnvironment)
  nameWithType: AuthenticationManager.GetACSEndPointPrefix(AzureEnvironment)
  fullName: PnP.Framework.AuthenticationManager.GetACSEndPointPrefix(PnP.Framework.AzureEnvironment)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetACSEndPointPrefix
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1301
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nGets the Azure ACS login end point prefix for the given environment\n"
  example: []
  syntax:
    content: public static string GetACSEndPointPrefix(AzureEnvironment environment)
    parameters:
    - id: environment
      type: PnP.Framework.AzureEnvironment
      description: Environment to get the login information for
    return:
      type: System.String
      description: Azure ACS login endpoint prefix
    content.vb: Public Shared Function GetACSEndPointPrefix(environment As AzureEnvironment) As String
  overload: PnP.Framework.AuthenticationManager.GetACSEndPointPrefix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.AuthenticationManager.GetAccessTokenContext(System.String,System.Func{System.String,System.String})
  commentId: M:PnP.Framework.AuthenticationManager.GetAccessTokenContext(System.String,System.Func{System.String,System.String})
  id: GetAccessTokenContext(System.String,System.Func{System.String,System.String})
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetAccessTokenContext(String, Func<String, String>)
  nameWithType: AuthenticationManager.GetAccessTokenContext(String, Func<String, String>)
  fullName: PnP.Framework.AuthenticationManager.GetAccessTokenContext(System.String, System.Func<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetAccessTokenContext
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1323
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns a SharePoint ClientContext using a custom access token function. The function will be called with the Resource Uri and expected to return an access token as a string.\n"
  example: []
  syntax:
    content: public ClientContext GetAccessTokenContext(string siteUrl, Func<string, string> accessTokenGetter)
    parameters:
    - id: siteUrl
      type: System.String
      description: Site for which the ClientContext object will be instantiated
    - id: accessTokenGetter
      type: System.Func{System.String,System.String}
      description: The AccessToken getter method to use
    return:
      type: Microsoft.SharePoint.Client.ClientContext
      description: Client context object
    content.vb: Public Function GetAccessTokenContext(siteUrl As String, accessTokenGetter As Func(Of String, String)) As ClientContext
  overload: PnP.Framework.AuthenticationManager.GetAccessTokenContext*
  nameWithType.vb: AuthenticationManager.GetAccessTokenContext(String, Func(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.AuthenticationManager.GetAccessTokenContext(System.String, System.Func(Of System.String, System.String))
  name.vb: GetAccessTokenContext(String, Func(Of String, String))
- uid: PnP.Framework.AuthenticationManager.GetAccessTokenContext(System.String,System.String)
  commentId: M:PnP.Framework.AuthenticationManager.GetAccessTokenContext(System.String,System.String)
  id: GetAccessTokenContext(System.String,System.String)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetAccessTokenContext(String, String)
  nameWithType: AuthenticationManager.GetAccessTokenContext(String, String)
  fullName: PnP.Framework.AuthenticationManager.GetAccessTokenContext(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetAccessTokenContext
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1348
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns a SharePoint ClientContext using custom provided access token.\n"
  example: []
  syntax:
    content: public ClientContext GetAccessTokenContext(string siteUrl, string accessToken)
    parameters:
    - id: siteUrl
      type: System.String
      description: Site for which the ClientContext object will be instantiated
    - id: accessToken
      type: System.String
      description: An explicit value for the AccessToken
    return:
      type: Microsoft.SharePoint.Client.ClientContext
      description: Client context object
    content.vb: Public Function GetAccessTokenContext(siteUrl As String, accessToken As String) As ClientContext
  overload: PnP.Framework.AuthenticationManager.GetAccessTokenContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetAzureADLoginEndPoint(PnP.Framework.AzureEnvironment)
  commentId: M:PnP.Framework.AuthenticationManager.GetAzureADLoginEndPoint(PnP.Framework.AzureEnvironment)
  id: GetAzureADLoginEndPoint(PnP.Framework.AzureEnvironment)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetAzureADLoginEndPoint(AzureEnvironment)
  nameWithType: AuthenticationManager.GetAzureADLoginEndPoint(AzureEnvironment)
  fullName: PnP.Framework.AuthenticationManager.GetAzureADLoginEndPoint(PnP.Framework.AzureEnvironment)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetAzureADLoginEndPoint
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1368
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nGets the Azure AD login end point for the given environment\n"
  example: []
  syntax:
    content: public string GetAzureADLoginEndPoint(AzureEnvironment environment)
    parameters:
    - id: environment
      type: PnP.Framework.AzureEnvironment
      description: Environment to get the login information for
    return:
      type: System.String
      description: Azure AD login endpoint
    content.vb: Public Function GetAzureADLoginEndPoint(environment As AzureEnvironment) As String
  overload: PnP.Framework.AuthenticationManager.GetAzureADLoginEndPoint*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetGraphEndPoint
  commentId: M:PnP.Framework.AuthenticationManager.GetGraphEndPoint
  id: GetGraphEndPoint
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetGraphEndPoint()
  nameWithType: AuthenticationManager.GetGraphEndPoint()
  fullName: PnP.Framework.AuthenticationManager.GetGraphEndPoint()
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetGraphEndPoint
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1387
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns the Graph End Point url without protocol based upon the Azure Environment selected during creation of the Authentication Manager\n"
  example: []
  syntax:
    content: public string GetGraphEndPoint()
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetGraphEndPoint As String
  overload: PnP.Framework.AuthenticationManager.GetGraphEndPoint*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetGraphEndPoint(PnP.Framework.AzureEnvironment)
  commentId: M:PnP.Framework.AuthenticationManager.GetGraphEndPoint(PnP.Framework.AzureEnvironment)
  id: GetGraphEndPoint(PnP.Framework.AzureEnvironment)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetGraphEndPoint(AzureEnvironment)
  nameWithType: AuthenticationManager.GetGraphEndPoint(AzureEnvironment)
  fullName: PnP.Framework.AuthenticationManager.GetGraphEndPoint(PnP.Framework.AzureEnvironment)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetGraphEndPoint
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1396
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns the Graph End Point url without protocol based upon the provided Azure Environment\n"
  example: []
  syntax:
    content: public static string GetGraphEndPoint(AzureEnvironment environment)
    parameters:
    - id: environment
      type: PnP.Framework.AzureEnvironment
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function GetGraphEndPoint(environment As AzureEnvironment) As String
  overload: PnP.Framework.AuthenticationManager.GetGraphEndPoint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.AuthenticationManager.GetSharePointDomainSuffix(PnP.Framework.AzureEnvironment)
  commentId: M:PnP.Framework.AuthenticationManager.GetSharePointDomainSuffix(PnP.Framework.AzureEnvironment)
  id: GetSharePointDomainSuffix(PnP.Framework.AzureEnvironment)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetSharePointDomainSuffix(AzureEnvironment)
  nameWithType: AuthenticationManager.GetSharePointDomainSuffix(AzureEnvironment)
  fullName: PnP.Framework.AuthenticationManager.GetSharePointDomainSuffix(PnP.Framework.AzureEnvironment)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetSharePointDomainSuffix
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1433
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nReturns a domain suffix (com, us, de, cn) for an Azure Environment\n"
  example: []
  syntax:
    content: public static string GetSharePointDomainSuffix(AzureEnvironment environment)
    parameters:
    - id: environment
      type: PnP.Framework.AzureEnvironment
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function GetSharePointDomainSuffix(environment As AzureEnvironment) As String
  overload: PnP.Framework.AuthenticationManager.GetSharePointDomainSuffix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.AuthenticationManager.ClearTokenCache
  commentId: M:PnP.Framework.AuthenticationManager.ClearTokenCache
  id: ClearTokenCache
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: ClearTokenCache()
  nameWithType: AuthenticationManager.ClearTokenCache()
  fullName: PnP.Framework.AuthenticationManager.ClearTokenCache()
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ClearTokenCache
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1450
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nClears the internal in-memory token cache used by MSAL\n"
  example: []
  syntax:
    content: public void ClearTokenCache()
    content.vb: Public Sub ClearTokenCache
  overload: PnP.Framework.AuthenticationManager.ClearTokenCache*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.ClearTokenCacheAsync
  commentId: M:PnP.Framework.AuthenticationManager.ClearTokenCacheAsync
  id: ClearTokenCacheAsync
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: ClearTokenCacheAsync()
  nameWithType: AuthenticationManager.ClearTokenCacheAsync()
  fullName: PnP.Framework.AuthenticationManager.ClearTokenCacheAsync()
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ClearTokenCacheAsync
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1458
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nClears the internal in-memory token cache used by MSAL\n"
  example: []
  syntax:
    content: public async Task ClearTokenCacheAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ClearTokenCacheAsync As Task
  overload: PnP.Framework.AuthenticationManager.ClearTokenCacheAsync*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.Dispose(System.Boolean)
  commentId: M:PnP.Framework.AuthenticationManager.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: AuthenticationManager.Dispose(Boolean)
  fullName: PnP.Framework.AuthenticationManager.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Dispose
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1484
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\ncalled when disposing the object\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: ''
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: PnP.Framework.AuthenticationManager.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: PnP.Framework.AuthenticationManager.Dispose
  commentId: M:PnP.Framework.AuthenticationManager.Dispose
  id: Dispose
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: AuthenticationManager.Dispose()
  fullName: PnP.Framework.AuthenticationManager.Dispose()
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Dispose
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1492
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  summary: "\nDispose the object\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: PnP.Framework.AuthenticationManager.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetBuilderWithAuthority(Microsoft.Identity.Client.PublicClientApplicationBuilder,PnP.Framework.AzureEnvironment)
  commentId: M:PnP.Framework.AuthenticationManager.GetBuilderWithAuthority(Microsoft.Identity.Client.PublicClientApplicationBuilder,PnP.Framework.AzureEnvironment)
  id: GetBuilderWithAuthority(Microsoft.Identity.Client.PublicClientApplicationBuilder,PnP.Framework.AzureEnvironment)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetBuilderWithAuthority(PublicClientApplicationBuilder, AzureEnvironment)
  nameWithType: AuthenticationManager.GetBuilderWithAuthority(PublicClientApplicationBuilder, AzureEnvironment)
  fullName: PnP.Framework.AuthenticationManager.GetBuilderWithAuthority(Microsoft.Identity.Client.PublicClientApplicationBuilder, PnP.Framework.AzureEnvironment)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetBuilderWithAuthority
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1499
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  syntax:
    content: public PublicClientApplicationBuilder GetBuilderWithAuthority(PublicClientApplicationBuilder builder, AzureEnvironment azureEnvironment)
    parameters:
    - id: builder
      type: Microsoft.Identity.Client.PublicClientApplicationBuilder
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
    return:
      type: Microsoft.Identity.Client.PublicClientApplicationBuilder
    content.vb: Public Function GetBuilderWithAuthority(builder As PublicClientApplicationBuilder, azureEnvironment As AzureEnvironment) As PublicClientApplicationBuilder
  overload: PnP.Framework.AuthenticationManager.GetBuilderWithAuthority*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.AuthenticationManager.GetBuilderWithAuthority(Microsoft.Identity.Client.ConfidentialClientApplicationBuilder,PnP.Framework.AzureEnvironment,System.String)
  commentId: M:PnP.Framework.AuthenticationManager.GetBuilderWithAuthority(Microsoft.Identity.Client.ConfidentialClientApplicationBuilder,PnP.Framework.AzureEnvironment,System.String)
  id: GetBuilderWithAuthority(Microsoft.Identity.Client.ConfidentialClientApplicationBuilder,PnP.Framework.AzureEnvironment,System.String)
  parent: PnP.Framework.AuthenticationManager
  langs:
  - csharp
  - vb
  name: GetBuilderWithAuthority(ConfidentialClientApplicationBuilder, AzureEnvironment, String)
  nameWithType: AuthenticationManager.GetBuilderWithAuthority(ConfidentialClientApplicationBuilder, AzureEnvironment, String)
  fullName: PnP.Framework.AuthenticationManager.GetBuilderWithAuthority(Microsoft.Identity.Client.ConfidentialClientApplicationBuilder, PnP.Framework.AzureEnvironment, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/AuthenticationManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetBuilderWithAuthority
    path: ../src/lib/PnP.Framework/AuthenticationManager.cs
    startLine: 1532
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework
  syntax:
    content: public ConfidentialClientApplicationBuilder GetBuilderWithAuthority(ConfidentialClientApplicationBuilder builder, AzureEnvironment azureEnvironment, string tenantId = "")
    parameters:
    - id: builder
      type: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder
    - id: azureEnvironment
      type: PnP.Framework.AzureEnvironment
    - id: tenantId
      type: System.String
    return:
      type: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder
    content.vb: Public Function GetBuilderWithAuthority(builder As ConfidentialClientApplicationBuilder, azureEnvironment As AzureEnvironment, tenantId As String = "") As ConfidentialClientApplicationBuilder
  overload: PnP.Framework.AuthenticationManager.GetBuilderWithAuthority*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: PnP.Framework
  commentId: N:PnP.Framework
  name: PnP.Framework
  nameWithType: PnP.Framework
  fullName: PnP.Framework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.AuthenticationManager.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  parent: System.ValidationExtensions
  definition: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  name: ValidateNotNullOrEmpty<AuthenticationManager>(String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<AuthenticationManager>(String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.AuthenticationManager>(System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of AuthenticationManager)(String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.AuthenticationManager)(System.String)
  name.vb: ValidateNotNullOrEmpty(Of AuthenticationManager)(String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty<AuthenticationManager>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<AuthenticationManager>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.AuthenticationManager>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty(Of AuthenticationManager)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of AuthenticationManager)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.AuthenticationManager)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.AuthenticationManager.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.AuthenticationManager,{T}}},{T},System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  name: Set<AuthenticationManager, T>(Expression<Func<AuthenticationManager, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<AuthenticationManager, T>(Expression<Func<AuthenticationManager, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.AuthenticationManager, T>(System.Linq.Expressions.Expression<System.Func<PnP.Framework.AuthenticationManager, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of AuthenticationManager, T)(Expression(Of Func(Of AuthenticationManager, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.AuthenticationManager, T)(System.Linq.Expressions.Expression(Of System.Func(Of PnP.Framework.AuthenticationManager, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of AuthenticationManager, T)(Expression(Of Func(Of AuthenticationManager, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<AuthenticationManager, T>
    nameWithType: ObjectExtensions.Set<AuthenticationManager, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.AuthenticationManager, T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.AuthenticationManager
    name: AuthenticationManager
    nameWithType: AuthenticationManager
    fullName: PnP.Framework.AuthenticationManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of AuthenticationManager, T)
    nameWithType: ObjectExtensions.Set(Of AuthenticationManager, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.AuthenticationManager, T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.AuthenticationManager
    name: AuthenticationManager
    nameWithType: AuthenticationManager
    fullName: PnP.Framework.AuthenticationManager
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  name: GetPublicInstancePropertyValue(String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  name: GetPublicInstanceProperty(String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  name: SetPublicInstancePropertyValue(String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  parent: PnP.Framework.Modernization.Cache.Extensions
  definition: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  name: ToByteArray()
  nameWithType: Extensions.ToByteArray()
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray()
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  isExternal: true
  name: ValidateNotNullOrEmpty<T>(T, String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>(T, String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>(T, System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, System.String)
  name.vb: ValidateNotNullOrEmpty(Of T)(T, String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty<T>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty(Of T)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of T)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions
  commentId: T:System.ValidationExtensions
  parent: System
  name: ValidationExtensions
  nameWithType: ValidationExtensions
  fullName: System.ValidationExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  isExternal: true
  name: Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>(TObject, System.Linq.Expressions.Expression<System.Func<TObject, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)(TObject, System.Linq.Expressions.Expression(Of System.Func(Of TObject, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<TObject, T>
    nameWithType: ObjectExtensions.Set<TObject, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of TObject, T)
    nameWithType: ObjectExtensions.Set(Of TObject, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions
  commentId: T:PnP.Framework.Extensions.ObjectExtensions
  parent: PnP.Framework.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: PnP.Framework.Extensions.ObjectExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  isExternal: true
  name: GetPublicInstancePropertyValue(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  isExternal: true
  name: GetPublicInstanceProperty(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  isExternal: true
  name: SetPublicInstancePropertyValue(Object, String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(Object, String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object, System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  isExternal: true
  name: ToByteArray(Object)
  nameWithType: Extensions.ToByteArray(Object)
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions
  commentId: T:PnP.Framework.Modernization.Cache.Extensions
  parent: PnP.Framework.Modernization.Cache
  name: Extensions
  nameWithType: Extensions
  fullName: PnP.Framework.Modernization.Cache.Extensions
- uid: PnP.Framework.Extensions
  commentId: N:PnP.Framework.Extensions
  name: PnP.Framework.Extensions
  nameWithType: PnP.Framework.Extensions
  fullName: PnP.Framework.Extensions
- uid: PnP.Framework.Modernization.Cache
  commentId: N:PnP.Framework.Modernization.Cache
  name: PnP.Framework.Modernization.Cache
  nameWithType: PnP.Framework.Modernization.Cache
  fullName: PnP.Framework.Modernization.Cache
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: PnP.Framework.AuthenticationManager.CookieContainer*
  commentId: Overload:PnP.Framework.AuthenticationManager.CookieContainer
  name: CookieContainer
  nameWithType: AuthenticationManager.CookieContainer
  fullName: PnP.Framework.AuthenticationManager.CookieContainer
- uid: System.Net.CookieContainer
  commentId: T:System.Net.CookieContainer
  parent: System.Net
  isExternal: true
  name: CookieContainer
  nameWithType: CookieContainer
  fullName: System.Net.CookieContainer
- uid: System.Net
  commentId: N:System.Net
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: PnP.Framework.AuthenticationManager.CreateWithAccessToken*
  commentId: Overload:PnP.Framework.AuthenticationManager.CreateWithAccessToken
  name: CreateWithAccessToken
  nameWithType: AuthenticationManager.CreateWithAccessToken
  fullName: PnP.Framework.AuthenticationManager.CreateWithAccessToken
- uid: System.Security.SecureString
  commentId: T:System.Security.SecureString
  parent: System.Security
  isExternal: true
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: PnP.Framework.AuthenticationManager
  commentId: T:PnP.Framework.AuthenticationManager
  parent: PnP.Framework
  name: AuthenticationManager
  nameWithType: AuthenticationManager
  fullName: PnP.Framework.AuthenticationManager
- uid: System.Security
  commentId: N:System.Security
  isExternal: true
  name: System.Security
  nameWithType: System.Security
  fullName: System.Security
- uid: PnP.Framework.AuthenticationManager.CreateWithDeviceLogin*
  commentId: Overload:PnP.Framework.AuthenticationManager.CreateWithDeviceLogin
  name: CreateWithDeviceLogin
  nameWithType: AuthenticationManager.CreateWithDeviceLogin
  fullName: PnP.Framework.AuthenticationManager.CreateWithDeviceLogin
- uid: System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task}
  commentId: T:System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<DeviceCodeResult, Task>
  nameWithType: Func<DeviceCodeResult, Task>
  fullName: System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of DeviceCodeResult, Task)
  fullName.vb: System.Func(Of Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task)
  name.vb: Func(Of DeviceCodeResult, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Identity.Client.DeviceCodeResult
    name: DeviceCodeResult
    nameWithType: DeviceCodeResult
    fullName: Microsoft.Identity.Client.DeviceCodeResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Identity.Client.DeviceCodeResult
    name: DeviceCodeResult
    nameWithType: DeviceCodeResult
    fullName: Microsoft.Identity.Client.DeviceCodeResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.AzureEnvironment
  commentId: T:PnP.Framework.AzureEnvironment
  parent: PnP.Framework
  name: AzureEnvironment
  nameWithType: AzureEnvironment
  fullName: PnP.Framework.AzureEnvironment
- uid: System.Action{Microsoft.Identity.Client.ITokenCache}
  commentId: T:System.Action{Microsoft.Identity.Client.ITokenCache}
  parent: System
  definition: System.Action`1
  name: Action<ITokenCache>
  nameWithType: Action<ITokenCache>
  fullName: System.Action<Microsoft.Identity.Client.ITokenCache>
  nameWithType.vb: Action(Of ITokenCache)
  fullName.vb: System.Action(Of Microsoft.Identity.Client.ITokenCache)
  name.vb: Action(Of ITokenCache)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Identity.Client.ITokenCache
    name: ITokenCache
    nameWithType: ITokenCache
    fullName: Microsoft.Identity.Client.ITokenCache
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Identity.Client.ITokenCache
    name: ITokenCache
    nameWithType: ITokenCache
    fullName: Microsoft.Identity.Client.ITokenCache
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin*
  commentId: Overload:PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin
  name: CreateWithInteractiveLogin
  nameWithType: AuthenticationManager.CreateWithInteractiveLogin
  fullName: PnP.Framework.AuthenticationManager.CreateWithInteractiveLogin
- uid: System.Action{System.String,System.Int32}
  commentId: T:System.Action{System.String,System.Int32}
  parent: System
  definition: System.Action`2
  name: Action<String, Int32>
  nameWithType: Action<String, Int32>
  fullName: System.Action<System.String, System.Int32>
  nameWithType.vb: Action(Of String, Int32)
  fullName.vb: System.Action(Of System.String, System.Int32)
  name.vb: Action(Of String, Int32)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Identity.Client.Extensibility.ICustomWebUi
  commentId: T:Microsoft.Identity.Client.Extensibility.ICustomWebUi
  parent: Microsoft.Identity.Client.Extensibility
  isExternal: true
  name: ICustomWebUi
  nameWithType: ICustomWebUi
  fullName: Microsoft.Identity.Client.Extensibility.ICustomWebUi
- uid: Microsoft.Identity.Client.Extensibility
  commentId: N:Microsoft.Identity.Client.Extensibility
  isExternal: true
  name: Microsoft.Identity.Client.Extensibility
  nameWithType: Microsoft.Identity.Client.Extensibility
  fullName: Microsoft.Identity.Client.Extensibility
- uid: PnP.Framework.AuthenticationManager.CreateWithCredentials*
  commentId: Overload:PnP.Framework.AuthenticationManager.CreateWithCredentials
  name: CreateWithCredentials
  nameWithType: AuthenticationManager.CreateWithCredentials
  fullName: PnP.Framework.AuthenticationManager.CreateWithCredentials
- uid: PnP.Framework.AuthenticationManager.CreateWithCertificate*
  commentId: Overload:PnP.Framework.AuthenticationManager.CreateWithCertificate
  name: CreateWithCertificate
  nameWithType: AuthenticationManager.CreateWithCertificate
  fullName: PnP.Framework.AuthenticationManager.CreateWithCertificate
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: true
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: System.Security.Cryptography.X509Certificates.StoreName
  commentId: T:System.Security.Cryptography.X509Certificates.StoreName
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: StoreName
  nameWithType: StoreName
  fullName: System.Security.Cryptography.X509Certificates.StoreName
- uid: System.Security.Cryptography.X509Certificates.StoreLocation
  commentId: T:System.Security.Cryptography.X509Certificates.StoreLocation
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: StoreLocation
  nameWithType: StoreLocation
  fullName: System.Security.Cryptography.X509Certificates.StoreLocation
- uid: PnP.Framework.AuthenticationManager.CreateWithOnBehalfOf*
  commentId: Overload:PnP.Framework.AuthenticationManager.CreateWithOnBehalfOf
  name: CreateWithOnBehalfOf
  nameWithType: AuthenticationManager.CreateWithOnBehalfOf
  fullName: PnP.Framework.AuthenticationManager.CreateWithOnBehalfOf
- uid: Microsoft.Identity.Client.UserAssertion
  commentId: T:Microsoft.Identity.Client.UserAssertion
  parent: Microsoft.Identity.Client
  isExternal: true
  name: UserAssertion
  nameWithType: UserAssertion
  fullName: Microsoft.Identity.Client.UserAssertion
- uid: Microsoft.Identity.Client
  commentId: N:Microsoft.Identity.Client
  isExternal: true
  name: Microsoft.Identity.Client
  nameWithType: Microsoft.Identity.Client
  fullName: Microsoft.Identity.Client
- uid: PnP.Framework.AuthenticationManager.CreateWithPnPCoreSdk*
  commentId: Overload:PnP.Framework.AuthenticationManager.CreateWithPnPCoreSdk
  name: CreateWithPnPCoreSdk
  nameWithType: AuthenticationManager.CreateWithPnPCoreSdk
  fullName: PnP.Framework.AuthenticationManager.CreateWithPnPCoreSdk
- uid: PnP.Core.Services.IAuthenticationProvider
  commentId: T:PnP.Core.Services.IAuthenticationProvider
  parent: PnP.Core.Services
  isExternal: true
  name: IAuthenticationProvider
  nameWithType: IAuthenticationProvider
  fullName: PnP.Core.Services.IAuthenticationProvider
- uid: PnP.Core.Services
  commentId: N:PnP.Core.Services
  isExternal: true
  name: PnP.Core.Services
  nameWithType: PnP.Core.Services
  fullName: PnP.Core.Services
- uid: PnP.Core.Services.PnPContext
  commentId: T:PnP.Core.Services.PnPContext
  parent: PnP.Core.Services
  isExternal: true
  name: PnPContext
  nameWithType: PnPContext
  fullName: PnP.Core.Services.PnPContext
- uid: PnP.Framework.AuthenticationManager.#ctor*
  commentId: Overload:PnP.Framework.AuthenticationManager.#ctor
  name: AuthenticationManager
  nameWithType: AuthenticationManager.AuthenticationManager
  fullName: PnP.Framework.AuthenticationManager.AuthenticationManager
- uid: PnP.Framework.AuthenticationManager.GetAccessToken*
  commentId: Overload:PnP.Framework.AuthenticationManager.GetAccessToken
  name: GetAccessToken
  nameWithType: AuthenticationManager.GetAccessToken
  fullName: PnP.Framework.AuthenticationManager.GetAccessToken
- uid: Microsoft.Identity.Client.Prompt
  commentId: T:Microsoft.Identity.Client.Prompt
  parent: Microsoft.Identity.Client
  isExternal: true
  name: Prompt
  nameWithType: Prompt
  fullName: Microsoft.Identity.Client.Prompt
- uid: PnP.Framework.AuthenticationManager.GetAccessTokenAsync*
  commentId: Overload:PnP.Framework.AuthenticationManager.GetAccessTokenAsync
  name: GetAccessTokenAsync
  nameWithType: AuthenticationManager.GetAccessTokenAsync
  fullName: PnP.Framework.AuthenticationManager.GetAccessTokenAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: PnP.Framework.AuthenticationManager.GetContext*
  commentId: Overload:PnP.Framework.AuthenticationManager.GetContext
  name: GetContext
  nameWithType: AuthenticationManager.GetContext
  fullName: PnP.Framework.AuthenticationManager.GetContext
- uid: Microsoft.SharePoint.Client.ClientContext
  commentId: T:Microsoft.SharePoint.Client.ClientContext
  parent: Microsoft.SharePoint.Client
  isExternal: true
  name: ClientContext
  nameWithType: ClientContext
  fullName: Microsoft.SharePoint.Client.ClientContext
- uid: Microsoft.SharePoint.Client
  commentId: N:Microsoft.SharePoint.Client
  name: Microsoft.SharePoint.Client
  nameWithType: Microsoft.SharePoint.Client
  fullName: Microsoft.SharePoint.Client
- uid: PnP.Framework.AuthenticationManager.GetContextAsync*
  commentId: Overload:PnP.Framework.AuthenticationManager.GetContextAsync
  name: GetContextAsync
  nameWithType: AuthenticationManager.GetContextAsync
  fullName: PnP.Framework.AuthenticationManager.GetContextAsync
- uid: System.Threading.Tasks.Task{Microsoft.SharePoint.Client.ClientContext}
  commentId: T:System.Threading.Tasks.Task{Microsoft.SharePoint.Client.ClientContext}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ClientContext>
  nameWithType: Task<ClientContext>
  fullName: System.Threading.Tasks.Task<Microsoft.SharePoint.Client.ClientContext>
  nameWithType.vb: Task(Of ClientContext)
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.SharePoint.Client.ClientContext)
  name.vb: Task(Of ClientContext)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SharePoint.Client.ClientContext
    name: ClientContext
    nameWithType: ClientContext
    fullName: Microsoft.SharePoint.Client.ClientContext
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SharePoint.Client.ClientContext
    name: ClientContext
    nameWithType: ClientContext
    fullName: Microsoft.SharePoint.Client.ClientContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.AuthenticationManager.GetOnPremisesContext*
  commentId: Overload:PnP.Framework.AuthenticationManager.GetOnPremisesContext
  name: GetOnPremisesContext
  nameWithType: AuthenticationManager.GetOnPremisesContext
  fullName: PnP.Framework.AuthenticationManager.GetOnPremisesContext
- uid: System.Net.ICredentials
  commentId: T:System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: PnP.Framework.AuthenticationManager.GetACSAppOnlyContext*
  commentId: Overload:PnP.Framework.AuthenticationManager.GetACSAppOnlyContext
  name: GetACSAppOnlyContext
  nameWithType: AuthenticationManager.GetACSAppOnlyContext
  fullName: PnP.Framework.AuthenticationManager.GetACSAppOnlyContext
- uid: PnP.Framework.AuthenticationManager.GetACSEndPoint*
  commentId: Overload:PnP.Framework.AuthenticationManager.GetACSEndPoint
  name: GetACSEndPoint
  nameWithType: AuthenticationManager.GetACSEndPoint
  fullName: PnP.Framework.AuthenticationManager.GetACSEndPoint
- uid: PnP.Framework.AuthenticationManager.GetACSEndPointPrefix*
  commentId: Overload:PnP.Framework.AuthenticationManager.GetACSEndPointPrefix
  name: GetACSEndPointPrefix
  nameWithType: AuthenticationManager.GetACSEndPointPrefix
  fullName: PnP.Framework.AuthenticationManager.GetACSEndPointPrefix
- uid: PnP.Framework.AuthenticationManager.GetAccessTokenContext*
  commentId: Overload:PnP.Framework.AuthenticationManager.GetAccessTokenContext
  name: GetAccessTokenContext
  nameWithType: AuthenticationManager.GetAccessTokenContext
  fullName: PnP.Framework.AuthenticationManager.GetAccessTokenContext
- uid: System.Func{System.String,System.String}
  commentId: T:System.Func{System.String,System.String}
  parent: System
  definition: System.Func`2
  name: Func<String, String>
  nameWithType: Func<String, String>
  fullName: System.Func<System.String, System.String>
  nameWithType.vb: Func(Of String, String)
  fullName.vb: System.Func(Of System.String, System.String)
  name.vb: Func(Of String, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.AuthenticationManager.GetAzureADLoginEndPoint*
  commentId: Overload:PnP.Framework.AuthenticationManager.GetAzureADLoginEndPoint
  name: GetAzureADLoginEndPoint
  nameWithType: AuthenticationManager.GetAzureADLoginEndPoint
  fullName: PnP.Framework.AuthenticationManager.GetAzureADLoginEndPoint
- uid: PnP.Framework.AuthenticationManager.GetGraphEndPoint*
  commentId: Overload:PnP.Framework.AuthenticationManager.GetGraphEndPoint
  name: GetGraphEndPoint
  nameWithType: AuthenticationManager.GetGraphEndPoint
  fullName: PnP.Framework.AuthenticationManager.GetGraphEndPoint
- uid: PnP.Framework.AuthenticationManager.GetSharePointDomainSuffix*
  commentId: Overload:PnP.Framework.AuthenticationManager.GetSharePointDomainSuffix
  name: GetSharePointDomainSuffix
  nameWithType: AuthenticationManager.GetSharePointDomainSuffix
  fullName: PnP.Framework.AuthenticationManager.GetSharePointDomainSuffix
- uid: PnP.Framework.AuthenticationManager.ClearTokenCache*
  commentId: Overload:PnP.Framework.AuthenticationManager.ClearTokenCache
  name: ClearTokenCache
  nameWithType: AuthenticationManager.ClearTokenCache
  fullName: PnP.Framework.AuthenticationManager.ClearTokenCache
- uid: PnP.Framework.AuthenticationManager.ClearTokenCacheAsync*
  commentId: Overload:PnP.Framework.AuthenticationManager.ClearTokenCacheAsync
  name: ClearTokenCacheAsync
  nameWithType: AuthenticationManager.ClearTokenCacheAsync
  fullName: PnP.Framework.AuthenticationManager.ClearTokenCacheAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: PnP.Framework.AuthenticationManager.Dispose*
  commentId: Overload:PnP.Framework.AuthenticationManager.Dispose
  name: Dispose
  nameWithType: AuthenticationManager.Dispose
  fullName: PnP.Framework.AuthenticationManager.Dispose
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.AuthenticationManager.GetBuilderWithAuthority*
  commentId: Overload:PnP.Framework.AuthenticationManager.GetBuilderWithAuthority
  name: GetBuilderWithAuthority
  nameWithType: AuthenticationManager.GetBuilderWithAuthority
  fullName: PnP.Framework.AuthenticationManager.GetBuilderWithAuthority
- uid: Microsoft.Identity.Client.PublicClientApplicationBuilder
  commentId: T:Microsoft.Identity.Client.PublicClientApplicationBuilder
  parent: Microsoft.Identity.Client
  isExternal: true
  name: PublicClientApplicationBuilder
  nameWithType: PublicClientApplicationBuilder
  fullName: Microsoft.Identity.Client.PublicClientApplicationBuilder
- uid: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder
  commentId: T:Microsoft.Identity.Client.ConfidentialClientApplicationBuilder
  parent: Microsoft.Identity.Client
  isExternal: true
  name: ConfidentialClientApplicationBuilder
  nameWithType: ConfidentialClientApplicationBuilder
  fullName: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder

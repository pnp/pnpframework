### YamlMime:ManagedReference
items:
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode
  commentId: T:PnP.Framework.Diagnostics.Tree.ITreeNode
  id: ITreeNode
  parent: PnP.Framework.Diagnostics.Tree
  children:
  - PnP.Framework.Diagnostics.Tree.ITreeNode.Ancestors
  - PnP.Framework.Diagnostics.Tree.ITreeNode.ChildNodes
  - PnP.Framework.Diagnostics.Tree.ITreeNode.Depth
  - PnP.Framework.Diagnostics.Tree.ITreeNode.Descendants
  - PnP.Framework.Diagnostics.Tree.ITreeNode.Height
  - PnP.Framework.Diagnostics.Tree.ITreeNode.ParentNode
  langs:
  - csharp
  - vb
  name: ITreeNode
  nameWithType: ITreeNode
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  type: Interface
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ITreeNode
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
    startLine: 41
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nContains tree node properties\n"
  example: []
  syntax:
    content: public interface ITreeNode
    content.vb: Public Interface ITreeNode
  extensionMethods:
  - PnP.Framework.Diagnostics.Tree.ITreeNode.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  - PnP.Framework.Diagnostics.Tree.ITreeNode.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode,{T}}},{T},System.Boolean,System.Boolean)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  - System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.Ancestors
  commentId: P:PnP.Framework.Diagnostics.Tree.ITreeNode.Ancestors
  id: Ancestors
  parent: PnP.Framework.Diagnostics.Tree.ITreeNode
  langs:
  - csharp
  - vb
  name: Ancestors
  nameWithType: ITreeNode.Ancestors
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode.Ancestors
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Ancestors
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
    startLine: 46
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nAll nodes along path toward root: Parent, Parent.Parent, Parent.Parent.Parent, ...\n"
  example: []
  syntax:
    content: IEnumerable<ITreeNode> Ancestors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode}
    content.vb: ReadOnly Property Ancestors As IEnumerable(Of ITreeNode)
  overload: PnP.Framework.Diagnostics.Tree.ITreeNode.Ancestors*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.ParentNode
  commentId: P:PnP.Framework.Diagnostics.Tree.ITreeNode.ParentNode
  id: ParentNode
  parent: PnP.Framework.Diagnostics.Tree.ITreeNode
  langs:
  - csharp
  - vb
  name: ParentNode
  nameWithType: ITreeNode.ParentNode
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode.ParentNode
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ParentNode
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
    startLine: 51
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nParent node\n"
  example: []
  syntax:
    content: ITreeNode ParentNode { get; }
    parameters: []
    return:
      type: PnP.Framework.Diagnostics.Tree.ITreeNode
    content.vb: ReadOnly Property ParentNode As ITreeNode
  overload: PnP.Framework.Diagnostics.Tree.ITreeNode.ParentNode*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.ChildNodes
  commentId: P:PnP.Framework.Diagnostics.Tree.ITreeNode.ChildNodes
  id: ChildNodes
  parent: PnP.Framework.Diagnostics.Tree.ITreeNode
  langs:
  - csharp
  - vb
  name: ChildNodes
  nameWithType: ITreeNode.ChildNodes
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode.ChildNodes
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ChildNodes
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
    startLine: 56
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nDirect descendants\n"
  example: []
  syntax:
    content: IEnumerable<ITreeNode> ChildNodes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode}
    content.vb: ReadOnly Property ChildNodes As IEnumerable(Of ITreeNode)
  overload: PnP.Framework.Diagnostics.Tree.ITreeNode.ChildNodes*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.Descendants
  commentId: P:PnP.Framework.Diagnostics.Tree.ITreeNode.Descendants
  id: Descendants
  parent: PnP.Framework.Diagnostics.Tree.ITreeNode
  langs:
  - csharp
  - vb
  name: Descendants
  nameWithType: ITreeNode.Descendants
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode.Descendants
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Descendants
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
    startLine: 61
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nAll Child nodes. Children, Children[i].Children, ...\n"
  example: []
  syntax:
    content: IEnumerable<ITreeNode> Descendants { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode}
    content.vb: ReadOnly Property Descendants As IEnumerable(Of ITreeNode)
  overload: PnP.Framework.Diagnostics.Tree.ITreeNode.Descendants*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.Depth
  commentId: P:PnP.Framework.Diagnostics.Tree.ITreeNode.Depth
  id: Depth
  parent: PnP.Framework.Diagnostics.Tree.ITreeNode
  langs:
  - csharp
  - vb
  name: Depth
  nameWithType: ITreeNode.Depth
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode.Depth
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Depth
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
    startLine: 66
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nDistance from Root\n"
  example: []
  syntax:
    content: int Depth { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Depth As Integer
  overload: PnP.Framework.Diagnostics.Tree.ITreeNode.Depth*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.Height
  commentId: P:PnP.Framework.Diagnostics.Tree.ITreeNode.Height
  id: Height
  parent: PnP.Framework.Diagnostics.Tree.ITreeNode
  langs:
  - csharp
  - vb
  name: Height
  nameWithType: ITreeNode.Height
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode.Height
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Height
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/ITreeNode.cs
    startLine: 72
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nDistance from deepest descendant\n"
  example: []
  syntax:
    content: int Height { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Height As Integer
  overload: PnP.Framework.Diagnostics.Tree.ITreeNode.Height*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: PnP.Framework.Diagnostics.Tree
  commentId: N:PnP.Framework.Diagnostics.Tree
  name: PnP.Framework.Diagnostics.Tree
  nameWithType: PnP.Framework.Diagnostics.Tree
  fullName: PnP.Framework.Diagnostics.Tree
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  parent: System.ValidationExtensions
  definition: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  name: ValidateNotNullOrEmpty<ITreeNode>(String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<ITreeNode>(String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.Diagnostics.Tree.ITreeNode>(System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of ITreeNode)(String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.Diagnostics.Tree.ITreeNode)(System.String)
  name.vb: ValidateNotNullOrEmpty(Of ITreeNode)(String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty<ITreeNode>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<ITreeNode>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.Diagnostics.Tree.ITreeNode>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty(Of ITreeNode)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of ITreeNode)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.Diagnostics.Tree.ITreeNode)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode,{T}}},{T},System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  name: Set<ITreeNode, T>(Expression<Func<ITreeNode, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<ITreeNode, T>(Expression<Func<ITreeNode, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.Diagnostics.Tree.ITreeNode, T>(System.Linq.Expressions.Expression<System.Func<PnP.Framework.Diagnostics.Tree.ITreeNode, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of ITreeNode, T)(Expression(Of Func(Of ITreeNode, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.Diagnostics.Tree.ITreeNode, T)(System.Linq.Expressions.Expression(Of System.Func(Of PnP.Framework.Diagnostics.Tree.ITreeNode, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of ITreeNode, T)(Expression(Of Func(Of ITreeNode, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<ITreeNode, T>
    nameWithType: ObjectExtensions.Set<ITreeNode, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.Diagnostics.Tree.ITreeNode, T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of ITreeNode, T)
    nameWithType: ObjectExtensions.Set(Of ITreeNode, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.Diagnostics.Tree.ITreeNode, T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  name: GetPublicInstancePropertyValue(String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  name: GetPublicInstanceProperty(String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  name: SetPublicInstancePropertyValue(String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  parent: PnP.Framework.Modernization.Cache.Extensions
  definition: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  name: ToByteArray()
  nameWithType: Extensions.ToByteArray()
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray()
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  isExternal: true
  name: ValidateNotNullOrEmpty<T>(T, String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>(T, String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>(T, System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, System.String)
  name.vb: ValidateNotNullOrEmpty(Of T)(T, String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty<T>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty(Of T)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of T)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions
  commentId: T:System.ValidationExtensions
  parent: System
  name: ValidationExtensions
  nameWithType: ValidationExtensions
  fullName: System.ValidationExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  isExternal: true
  name: Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>(TObject, System.Linq.Expressions.Expression<System.Func<TObject, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)(TObject, System.Linq.Expressions.Expression(Of System.Func(Of TObject, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<TObject, T>
    nameWithType: ObjectExtensions.Set<TObject, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of TObject, T)
    nameWithType: ObjectExtensions.Set(Of TObject, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions
  commentId: T:PnP.Framework.Extensions.ObjectExtensions
  parent: PnP.Framework.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: PnP.Framework.Extensions.ObjectExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  isExternal: true
  name: GetPublicInstancePropertyValue(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  isExternal: true
  name: GetPublicInstanceProperty(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  isExternal: true
  name: SetPublicInstancePropertyValue(Object, String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(Object, String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object, System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  isExternal: true
  name: ToByteArray(Object)
  nameWithType: Extensions.ToByteArray(Object)
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions
  commentId: T:PnP.Framework.Modernization.Cache.Extensions
  parent: PnP.Framework.Modernization.Cache
  name: Extensions
  nameWithType: Extensions
  fullName: PnP.Framework.Modernization.Cache.Extensions
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: PnP.Framework.Extensions
  commentId: N:PnP.Framework.Extensions
  name: PnP.Framework.Extensions
  nameWithType: PnP.Framework.Extensions
  fullName: PnP.Framework.Extensions
- uid: PnP.Framework.Modernization.Cache
  commentId: N:PnP.Framework.Modernization.Cache
  name: PnP.Framework.Modernization.Cache
  nameWithType: PnP.Framework.Modernization.Cache
  fullName: PnP.Framework.Modernization.Cache
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.Ancestors*
  commentId: Overload:PnP.Framework.Diagnostics.Tree.ITreeNode.Ancestors
  name: Ancestors
  nameWithType: ITreeNode.Ancestors
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode.Ancestors
- uid: System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode}
  commentId: T:System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ITreeNode>
  nameWithType: IEnumerable<ITreeNode>
  fullName: System.Collections.Generic.IEnumerable<PnP.Framework.Diagnostics.Tree.ITreeNode>
  nameWithType.vb: IEnumerable(Of ITreeNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of PnP.Framework.Diagnostics.Tree.ITreeNode)
  name.vb: IEnumerable(Of ITreeNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.ParentNode*
  commentId: Overload:PnP.Framework.Diagnostics.Tree.ITreeNode.ParentNode
  name: ParentNode
  nameWithType: ITreeNode.ParentNode
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode.ParentNode
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode
  commentId: T:PnP.Framework.Diagnostics.Tree.ITreeNode
  parent: PnP.Framework.Diagnostics.Tree
  name: ITreeNode
  nameWithType: ITreeNode
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.ChildNodes*
  commentId: Overload:PnP.Framework.Diagnostics.Tree.ITreeNode.ChildNodes
  name: ChildNodes
  nameWithType: ITreeNode.ChildNodes
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode.ChildNodes
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.Descendants*
  commentId: Overload:PnP.Framework.Diagnostics.Tree.ITreeNode.Descendants
  name: Descendants
  nameWithType: ITreeNode.Descendants
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode.Descendants
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.Depth*
  commentId: Overload:PnP.Framework.Diagnostics.Tree.ITreeNode.Depth
  name: Depth
  nameWithType: ITreeNode.Depth
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode.Depth
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode.Height*
  commentId: Overload:PnP.Framework.Diagnostics.Tree.ITreeNode.Height
  name: Height
  nameWithType: ITreeNode.Height
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode.Height

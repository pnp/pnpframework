### YamlMime:ManagedReference
items:
- uid: PnP.Framework.Diagnostics.Tree.Tree`1
  commentId: T:PnP.Framework.Diagnostics.Tree.Tree`1
  id: Tree`1
  parent: PnP.Framework.Diagnostics.Tree
  children:
  - PnP.Framework.Diagnostics.Tree.Tree`1.#ctor
  - PnP.Framework.Diagnostics.Tree.Tree`1.#ctor(`0)
  langs:
  - csharp
  - vb
  name: Tree<T>
  nameWithType: Tree<T>
  fullName: PnP.Framework.Diagnostics.Tree.Tree<T>
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/Tree.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Tree
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/Tree.cs
    startLine: 6
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nDefines Tree\n"
  example: []
  syntax:
    content: 'public class Tree<T> : TreeNode<T>, ITreeNode<T>, ITreeNode where T : new()'
    typeParameters:
    - id: T
      description: Generic type
    content.vb: >-
      Public Class Tree(Of T As New)
          Inherits TreeNode(Of T)
          Implements ITreeNode(Of T), ITreeNode
  inheritance:
  - System.Object
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  implements:
  - PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}
  - PnP.Framework.Diagnostics.Tree.ITreeNode
  inheritedMembers:
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.ParentNode
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Parent
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Boolean)
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Root
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Children
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.ChildNodes
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Descendants
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Subtree
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Ancestors
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Height
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Value
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Depth
  - PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - PnP.Framework.Diagnostics.Tree.Tree`1.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  - PnP.Framework.Diagnostics.Tree.Tree`1.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.Diagnostics.Tree.Tree{{T}},{T}}},{T},System.Boolean,System.Boolean)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  - System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  nameWithType.vb: Tree(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: PnP.Framework.Diagnostics.Tree.Tree(Of T)
  name.vb: Tree(Of T)
- uid: PnP.Framework.Diagnostics.Tree.Tree`1.#ctor
  commentId: M:PnP.Framework.Diagnostics.Tree.Tree`1.#ctor
  id: '#ctor'
  parent: PnP.Framework.Diagnostics.Tree.Tree`1
  langs:
  - csharp
  - vb
  name: Tree()
  nameWithType: Tree<T>.Tree()
  fullName: PnP.Framework.Diagnostics.Tree.Tree<T>.Tree()
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/Tree.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/Tree.cs
    startLine: 12
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nDefault Constructor\n"
  example: []
  syntax:
    content: public Tree()
    content.vb: Public Sub New
  overload: PnP.Framework.Diagnostics.Tree.Tree`1.#ctor*
  nameWithType.vb: Tree(Of T).Tree()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.Diagnostics.Tree.Tree(Of T).Tree()
- uid: PnP.Framework.Diagnostics.Tree.Tree`1.#ctor(`0)
  commentId: M:PnP.Framework.Diagnostics.Tree.Tree`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: PnP.Framework.Diagnostics.Tree.Tree`1
  langs:
  - csharp
  - vb
  name: Tree(T)
  nameWithType: Tree<T>.Tree(T)
  fullName: PnP.Framework.Diagnostics.Tree.Tree<T>.Tree(T)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/Tree.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/Tree.cs
    startLine: 18
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public Tree(T RootValue)
    parameters:
    - id: RootValue
      type: '{T}'
      description: Generic type paramerter for root value of tree
    content.vb: Public Sub New(RootValue As T)
  overload: PnP.Framework.Diagnostics.Tree.Tree`1.#ctor*
  nameWithType.vb: Tree(Of T).Tree(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.Diagnostics.Tree.Tree(Of T).Tree(T)
references:
- uid: PnP.Framework.Diagnostics.Tree
  commentId: N:PnP.Framework.Diagnostics.Tree
  name: PnP.Framework.Diagnostics.Tree
  nameWithType: PnP.Framework.Diagnostics.Tree
  fullName: PnP.Framework.Diagnostics.Tree
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  commentId: T:PnP.Framework.Diagnostics.Tree.TreeNode{`0}
  parent: PnP.Framework.Diagnostics.Tree
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1
  name: TreeNode<T>
  nameWithType: TreeNode<T>
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>
  nameWithType.vb: TreeNode(Of T)
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T)
  name.vb: TreeNode(Of T)
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.TreeNode`1
    name: TreeNode
    nameWithType: TreeNode
    fullName: PnP.Framework.Diagnostics.Tree.TreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.TreeNode`1
    name: TreeNode
    nameWithType: TreeNode
    fullName: PnP.Framework.Diagnostics.Tree.TreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}
  commentId: T:PnP.Framework.Diagnostics.Tree.ITreeNode{`0}
  parent: PnP.Framework.Diagnostics.Tree
  definition: PnP.Framework.Diagnostics.Tree.ITreeNode`1
  name: ITreeNode<T>
  nameWithType: ITreeNode<T>
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode<T>
  nameWithType.vb: ITreeNode(Of T)
  fullName.vb: PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)
  name.vb: ITreeNode(Of T)
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode
  commentId: T:PnP.Framework.Diagnostics.Tree.ITreeNode
  parent: PnP.Framework.Diagnostics.Tree
  name: ITreeNode
  nameWithType: ITreeNode
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.ParentNode
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode{`0}.ParentNode
  parent: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1.ParentNode
  name: ParentNode
  nameWithType: TreeNode<T>.ParentNode
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.ParentNode
  nameWithType.vb: TreeNode(Of T).ParentNode
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).ParentNode
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Parent
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode{`0}.Parent
  parent: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1.Parent
  name: Parent
  nameWithType: TreeNode<T>.Parent
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Parent
  nameWithType.vb: TreeNode(Of T).Parent
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Parent
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Boolean)
  commentId: M:PnP.Framework.Diagnostics.Tree.TreeNode{`0}.SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
  parent: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1.SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
  name: SetParent(ITreeNode<T>, Boolean)
  nameWithType: TreeNode<T>.SetParent(ITreeNode<T>, Boolean)
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Boolean)
  nameWithType.vb: TreeNode(Of T).SetParent(ITreeNode(Of T), Boolean)
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Boolean)
  name.vb: SetParent(ITreeNode(Of T), Boolean)
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
    name: SetParent
    nameWithType: TreeNode<T>.SetParent
    fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.SetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
    name: SetParent
    nameWithType: TreeNode(Of T).SetParent
    fullName: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).SetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Root
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode{`0}.Root
  parent: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1.Root
  name: Root
  nameWithType: TreeNode<T>.Root
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Root
  nameWithType.vb: TreeNode(Of T).Root
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Root
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Children
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode{`0}.Children
  parent: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1.Children
  name: Children
  nameWithType: TreeNode<T>.Children
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Children
  nameWithType.vb: TreeNode(Of T).Children
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Children
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.ChildNodes
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode{`0}.ChildNodes
  parent: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1.ChildNodes
  name: ChildNodes
  nameWithType: TreeNode<T>.ChildNodes
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.ChildNodes
  nameWithType.vb: TreeNode(Of T).ChildNodes
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).ChildNodes
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Descendants
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode{`0}.Descendants
  parent: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1.Descendants
  name: Descendants
  nameWithType: TreeNode<T>.Descendants
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Descendants
  nameWithType.vb: TreeNode(Of T).Descendants
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Descendants
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Subtree
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode{`0}.Subtree
  parent: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1.Subtree
  name: Subtree
  nameWithType: TreeNode<T>.Subtree
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Subtree
  nameWithType.vb: TreeNode(Of T).Subtree
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Subtree
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Ancestors
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode{`0}.Ancestors
  parent: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1.Ancestors
  name: Ancestors
  nameWithType: TreeNode<T>.Ancestors
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Ancestors
  nameWithType.vb: TreeNode(Of T).Ancestors
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Ancestors
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Height
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode{`0}.Height
  parent: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1.Height
  name: Height
  nameWithType: TreeNode<T>.Height
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Height
  nameWithType.vb: TreeNode(Of T).Height
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Height
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Value
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode{`0}.Value
  parent: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1.Value
  name: Value
  nameWithType: TreeNode<T>.Value
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Value
  nameWithType.vb: TreeNode(Of T).Value
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Value
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.Depth
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode{`0}.Depth
  parent: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1.Depth
  name: Depth
  nameWithType: TreeNode<T>.Depth
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Depth
  nameWithType.vb: TreeNode(Of T).Depth
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Depth
- uid: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}.ToString
  commentId: M:PnP.Framework.Diagnostics.Tree.TreeNode{`0}.ToString
  parent: PnP.Framework.Diagnostics.Tree.TreeNode{{T}}
  definition: PnP.Framework.Diagnostics.Tree.TreeNode`1.ToString
  name: ToString()
  nameWithType: TreeNode<T>.ToString()
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.ToString()
  nameWithType.vb: TreeNode(Of T).ToString()
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).ToString()
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.ToString
    name: ToString
    nameWithType: TreeNode<T>.ToString
    fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.ToString
    name: ToString
    nameWithType: TreeNode(Of T).ToString
    fullName: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.Tree`1.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  parent: System.ValidationExtensions
  definition: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  name: ValidateNotNullOrEmpty<Tree<T>>(String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<Tree<T>>(String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.Diagnostics.Tree.Tree<T>>(System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of Tree(Of T))(String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.Diagnostics.Tree.Tree(Of T))(System.String)
  name.vb: ValidateNotNullOrEmpty(Of Tree(Of T))(String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty<Tree<T>>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<Tree<T>>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.Diagnostics.Tree.Tree<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty(Of Tree(Of T))
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of Tree(Of T))
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.Diagnostics.Tree.Tree(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.Tree`1.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.Diagnostics.Tree.Tree{{T}},{T}}},{T},System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  name: Set<Tree<T>, T>(Expression<Func<Tree<T>, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<Tree<T>, T>(Expression<Func<Tree<T>, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.Diagnostics.Tree.Tree<T>, T>(System.Linq.Expressions.Expression<System.Func<PnP.Framework.Diagnostics.Tree.Tree<T>, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of Tree(Of T), T)(Expression(Of Func(Of Tree(Of T), T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.Diagnostics.Tree.Tree(Of T), T)(System.Linq.Expressions.Expression(Of System.Func(Of PnP.Framework.Diagnostics.Tree.Tree(Of T), T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of Tree(Of T), T)(Expression(Of Func(Of Tree(Of T), T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<Tree<T>, T>
    nameWithType: ObjectExtensions.Set<Tree<T>, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.Diagnostics.Tree.Tree<T>, T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.Tree`1
    name: Tree
    nameWithType: Tree
    fullName: PnP.Framework.Diagnostics.Tree.Tree
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of Tree(Of T), T)
    nameWithType: ObjectExtensions.Set(Of Tree(Of T), T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.Diagnostics.Tree.Tree(Of T), T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.Tree`1
    name: Tree
    nameWithType: Tree
    fullName: PnP.Framework.Diagnostics.Tree.Tree
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  name: GetPublicInstancePropertyValue(String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  name: GetPublicInstanceProperty(String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  name: SetPublicInstancePropertyValue(String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  parent: PnP.Framework.Modernization.Cache.Extensions
  definition: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  name: ToByteArray()
  nameWithType: Extensions.ToByteArray()
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray()
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1
  commentId: T:PnP.Framework.Diagnostics.Tree.TreeNode`1
  parent: PnP.Framework.Diagnostics.Tree
  name: TreeNode<T>
  nameWithType: TreeNode<T>
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>
  nameWithType.vb: TreeNode(Of T)
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T)
  name.vb: TreeNode(Of T)
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.TreeNode`1
    name: TreeNode
    nameWithType: TreeNode
    fullName: PnP.Framework.Diagnostics.Tree.TreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.TreeNode`1
    name: TreeNode
    nameWithType: TreeNode
    fullName: PnP.Framework.Diagnostics.Tree.TreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
  commentId: T:PnP.Framework.Diagnostics.Tree.ITreeNode`1
  parent: PnP.Framework.Diagnostics.Tree
  name: ITreeNode<T>
  nameWithType: ITreeNode<T>
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode<T>
  nameWithType.vb: ITreeNode(Of T)
  fullName.vb: PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)
  name.vb: ITreeNode(Of T)
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.ParentNode
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode`1.ParentNode
  name: ParentNode
  nameWithType: TreeNode<T>.ParentNode
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.ParentNode
  nameWithType.vb: TreeNode(Of T).ParentNode
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).ParentNode
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.Parent
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode`1.Parent
  name: Parent
  nameWithType: TreeNode<T>.Parent
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Parent
  nameWithType.vb: TreeNode(Of T).Parent
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Parent
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
  commentId: M:PnP.Framework.Diagnostics.Tree.TreeNode`1.SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
  isExternal: true
  name: SetParent(ITreeNode<T>, Boolean)
  nameWithType: TreeNode<T>.SetParent(ITreeNode<T>, Boolean)
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Boolean)
  nameWithType.vb: TreeNode(Of T).SetParent(ITreeNode(Of T), Boolean)
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Boolean)
  name.vb: SetParent(ITreeNode(Of T), Boolean)
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
    name: SetParent
    nameWithType: TreeNode<T>.SetParent
    fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.SetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.SetParent(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
    name: SetParent
    nameWithType: TreeNode(Of T).SetParent
    fullName: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).SetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.Root
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode`1.Root
  name: Root
  nameWithType: TreeNode<T>.Root
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Root
  nameWithType.vb: TreeNode(Of T).Root
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Root
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.Children
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode`1.Children
  name: Children
  nameWithType: TreeNode<T>.Children
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Children
  nameWithType.vb: TreeNode(Of T).Children
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Children
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.ChildNodes
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode`1.ChildNodes
  name: ChildNodes
  nameWithType: TreeNode<T>.ChildNodes
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.ChildNodes
  nameWithType.vb: TreeNode(Of T).ChildNodes
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).ChildNodes
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.Descendants
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode`1.Descendants
  name: Descendants
  nameWithType: TreeNode<T>.Descendants
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Descendants
  nameWithType.vb: TreeNode(Of T).Descendants
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Descendants
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.Subtree
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode`1.Subtree
  name: Subtree
  nameWithType: TreeNode<T>.Subtree
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Subtree
  nameWithType.vb: TreeNode(Of T).Subtree
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Subtree
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.Ancestors
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode`1.Ancestors
  name: Ancestors
  nameWithType: TreeNode<T>.Ancestors
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Ancestors
  nameWithType.vb: TreeNode(Of T).Ancestors
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Ancestors
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.Height
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode`1.Height
  name: Height
  nameWithType: TreeNode<T>.Height
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Height
  nameWithType.vb: TreeNode(Of T).Height
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Height
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.Value
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode`1.Value
  name: Value
  nameWithType: TreeNode<T>.Value
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Value
  nameWithType.vb: TreeNode(Of T).Value
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Value
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.Depth
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNode`1.Depth
  name: Depth
  nameWithType: TreeNode<T>.Depth
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.Depth
  nameWithType.vb: TreeNode(Of T).Depth
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).Depth
- uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.ToString
  commentId: M:PnP.Framework.Diagnostics.Tree.TreeNode`1.ToString
  name: ToString()
  nameWithType: TreeNode<T>.ToString()
  fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.ToString()
  nameWithType.vb: TreeNode(Of T).ToString()
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).ToString()
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.ToString
    name: ToString
    nameWithType: TreeNode<T>.ToString
    fullName: PnP.Framework.Diagnostics.Tree.TreeNode<T>.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.TreeNode`1.ToString
    name: ToString
    nameWithType: TreeNode(Of T).ToString
    fullName: PnP.Framework.Diagnostics.Tree.TreeNode(Of T).ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  isExternal: true
  name: ValidateNotNullOrEmpty<T>(T, String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>(T, String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>(T, System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, System.String)
  name.vb: ValidateNotNullOrEmpty(Of T)(T, String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty<T>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty(Of T)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of T)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions
  commentId: T:System.ValidationExtensions
  parent: System
  name: ValidationExtensions
  nameWithType: ValidationExtensions
  fullName: System.ValidationExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  isExternal: true
  name: Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>(TObject, System.Linq.Expressions.Expression<System.Func<TObject, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)(TObject, System.Linq.Expressions.Expression(Of System.Func(Of TObject, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<TObject, T>
    nameWithType: ObjectExtensions.Set<TObject, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of TObject, T)
    nameWithType: ObjectExtensions.Set(Of TObject, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions
  commentId: T:PnP.Framework.Extensions.ObjectExtensions
  parent: PnP.Framework.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: PnP.Framework.Extensions.ObjectExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  isExternal: true
  name: GetPublicInstancePropertyValue(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  isExternal: true
  name: GetPublicInstanceProperty(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  isExternal: true
  name: SetPublicInstancePropertyValue(Object, String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(Object, String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object, System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  isExternal: true
  name: ToByteArray(Object)
  nameWithType: Extensions.ToByteArray(Object)
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions
  commentId: T:PnP.Framework.Modernization.Cache.Extensions
  parent: PnP.Framework.Modernization.Cache
  name: Extensions
  nameWithType: Extensions
  fullName: PnP.Framework.Modernization.Cache.Extensions
- uid: PnP.Framework.Extensions
  commentId: N:PnP.Framework.Extensions
  name: PnP.Framework.Extensions
  nameWithType: PnP.Framework.Extensions
  fullName: PnP.Framework.Extensions
- uid: PnP.Framework.Modernization.Cache
  commentId: N:PnP.Framework.Modernization.Cache
  name: PnP.Framework.Modernization.Cache
  nameWithType: PnP.Framework.Modernization.Cache
  fullName: PnP.Framework.Modernization.Cache
- uid: PnP.Framework.Diagnostics.Tree.Tree`1.#ctor*
  commentId: Overload:PnP.Framework.Diagnostics.Tree.Tree`1.#ctor
  name: Tree
  nameWithType: Tree<T>.Tree
  fullName: PnP.Framework.Diagnostics.Tree.Tree<T>.Tree
  nameWithType.vb: Tree(Of T).Tree
  fullName.vb: PnP.Framework.Diagnostics.Tree.Tree(Of T).Tree
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T

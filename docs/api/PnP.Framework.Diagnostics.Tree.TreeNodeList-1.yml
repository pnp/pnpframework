### YamlMime:ManagedReference
items:
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1
  commentId: T:PnP.Framework.Diagnostics.Tree.TreeNodeList`1
  id: TreeNodeList`1
  parent: PnP.Framework.Diagnostics.Tree
  children:
  - PnP.Framework.Diagnostics.Tree.TreeNodeList`1.#ctor(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  - PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  - PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
  - PnP.Framework.Diagnostics.Tree.TreeNodeList`1.OnPropertyChanged(System.String)
  - PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Parent
  - PnP.Framework.Diagnostics.Tree.TreeNodeList`1.PropertyChanged
  - PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Remove(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  - PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Remove(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
  - PnP.Framework.Diagnostics.Tree.TreeNodeList`1.ToString
  langs:
  - csharp
  - vb
  name: TreeNodeList<T>
  nameWithType: TreeNodeList<T>
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: TreeNodeList
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
    startLine: 10
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nHolds methods for Tree node\n"
  example: []
  syntax:
    content: 'public class TreeNodeList<T> : List<ITreeNode<T>>, IReadOnlyList<ITreeNode<T>>, IReadOnlyCollection<ITreeNode<T>>, IList, ICollection, ITreeNodeList<T>, IList<ITreeNode<T>>, ICollection<ITreeNode<T>>, IEnumerable<ITreeNode<T>>, IEnumerable, INotifyPropertyChanged'
    typeParameters:
    - id: T
      description: Generic type
    content.vb: >-
      Public Class TreeNodeList(Of T)
          Inherits List(Of ITreeNode(Of T))
          Implements IReadOnlyList(Of ITreeNode(Of T)), IReadOnlyCollection(Of ITreeNode(Of T)), IList, ICollection, ITreeNodeList(Of T), IList(Of ITreeNode(Of T)), ICollection(Of ITreeNode(Of T)), IEnumerable(Of ITreeNode(Of T)), IEnumerable, INotifyPropertyChanged
  inheritance:
  - System.Object
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  implements:
  - System.Collections.Generic.IReadOnlyList{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  - System.Collections.Generic.IReadOnlyCollection{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  - System.Collections.IList
  - System.Collections.ICollection
  - PnP.Framework.Diagnostics.Tree.ITreeNodeList{{T}}
  - System.Collections.Generic.IList{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  - System.Collections.Generic.ICollection{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  - System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  - System.Collections.IEnumerable
  - System.ComponentModel.INotifyPropertyChanged
  inheritedMembers:
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#get_Item(System.Int32)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#set_Item(System.Int32,System.Object)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.AddRange(System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.AsReadOnly
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.BinarySearch(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.BinarySearch(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Collections.Generic.IComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.BinarySearch(System.Int32,System.Int32,PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Collections.Generic.IComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Clear
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Contains(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.ConvertAll``1(System.Converter{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},{TOutput}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.CopyTo(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}[])
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.CopyTo(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}[],System.Int32)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.CopyTo(System.Int32,PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}[],System.Int32,System.Int32)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Exists(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Find(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindAll(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindIndex(System.Int32,System.Int32,System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindIndex(System.Int32,System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindIndex(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindLast(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindLastIndex(System.Int32,System.Int32,System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindLastIndex(System.Int32,System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindLastIndex(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.ForEach(System.Action{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.GetEnumerator
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Int32)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Int32,System.Int32)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Insert(System.Int32,PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Int32)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Int32,System.Int32)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.RemoveAll(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.RemoveAt(System.Int32)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Reverse
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Sort
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Sort(System.Collections.Generic.IComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Sort(System.Comparison{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#Remove(System.Object)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.ToArray
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.TrimExcess
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.TrueForAll(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Capacity
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Count
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Item(System.Int32)
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#Item(System.Int32)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - PnP.Framework.Diagnostics.Tree.TreeNodeList`1.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  - System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.PnP.Framework.Extensions.EnumerableExtensions.DeepEquals``1(System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  - PnP.Framework.Diagnostics.Tree.TreeNodeList`1.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.Diagnostics.Tree.TreeNodeList{{T}},{T}}},{T},System.Boolean,System.Boolean)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  - System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.PnP.Framework.Extensions.TopologicalSort.Sort``2(System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Collections.Generic.IEnumerable{{TKey}}},System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},{TKey}},System.Boolean)
  - System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.PnP.Framework.Extensions.TopologicalSort.Sort``1(System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}},System.Collections.Generic.IEqualityComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}},System.Boolean)
  - System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.PnP.Framework.Extensions.TopologicalSort.Group``2(System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Collections.Generic.IEnumerable{{TKey}}},System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},{TKey}},System.Boolean)
  - System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.PnP.Framework.Extensions.TopologicalSort.Group``1(System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}},System.Collections.Generic.IEqualityComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}},System.Boolean)
  - System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  nameWithType.vb: TreeNodeList(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T)
  name.vb: TreeNodeList(Of T)
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Parent
  commentId: P:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Parent
  id: Parent
  parent: PnP.Framework.Diagnostics.Tree.TreeNodeList`1
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: TreeNodeList<T>.Parent
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.Parent
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Parent
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
    startLine: 15
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nGets or sets Parent node\n"
  example: []
  syntax:
    content: public ITreeNode<T> Parent { get; set; }
    parameters: []
    return:
      type: PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}
    content.vb: Public Property Parent As ITreeNode(Of T)
  overload: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Parent*
  nameWithType.vb: TreeNodeList(Of T).Parent
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).Parent
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.#ctor(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  commentId: M:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.#ctor(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  id: '#ctor(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})'
  parent: PnP.Framework.Diagnostics.Tree.TreeNodeList`1
  langs:
  - csharp
  - vb
  name: TreeNodeList(ITreeNode<T>)
  nameWithType: TreeNodeList<T>.TreeNodeList(ITreeNode<T>)
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.TreeNodeList(PnP.Framework.Diagnostics.Tree.ITreeNode<T>)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
    startLine: 20
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public TreeNodeList(ITreeNode<T> parent)
    parameters:
    - id: parent
      type: PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}
      description: Generic type parent node
    content.vb: Public Sub New(parent As ITreeNode(Of T))
  overload: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.#ctor*
  nameWithType.vb: TreeNodeList(Of T).TreeNodeList(ITreeNode(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).TreeNodeList(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: TreeNodeList(ITreeNode(Of T))
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  commentId: M:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  id: Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  parent: PnP.Framework.Diagnostics.Tree.TreeNodeList`1
  langs:
  - csharp
  - vb
  name: Add(ITreeNode<T>)
  nameWithType: TreeNodeList<T>.Add(ITreeNode<T>)
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.Add(PnP.Framework.Diagnostics.Tree.ITreeNode<T>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Add
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
    startLine: 29
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nAdds node to a tree\n"
  example: []
  syntax:
    content: public ITreeNode<T> Add(ITreeNode<T> node)
    parameters:
    - id: node
      type: PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}
      description: Node to be added to the tree
    return:
      type: PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}
      description: Returns TreeNode interface
    content.vb: Public Function Add(node As ITreeNode(Of T)) As ITreeNode(Of T)
  overload: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Add*
  implements:
  - PnP.Framework.Diagnostics.Tree.ITreeNodeList{{T}}.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  nameWithType.vb: TreeNodeList(Of T).Add(ITreeNode(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).Add(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: Add(ITreeNode(Of T))
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
  commentId: M:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
  id: Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
  parent: PnP.Framework.Diagnostics.Tree.TreeNodeList`1
  langs:
  - csharp
  - vb
  name: Add(ITreeNode<T>, Boolean)
  nameWithType: TreeNodeList<T>.Add(ITreeNode<T>, Boolean)
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.Add(PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Add
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
    startLine: 34
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  syntax:
    content: protected ITreeNode<T> Add(ITreeNode<T> node, bool updateParent)
    parameters:
    - id: node
      type: PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}
    - id: updateParent
      type: System.Boolean
    return:
      type: PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}
    content.vb: Protected Function Add(node As ITreeNode(Of T), updateParent As Boolean) As ITreeNode(Of T)
  overload: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Add*
  nameWithType.vb: TreeNodeList(Of T).Add(ITreeNode(Of T), Boolean)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).Add(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Boolean)
  name.vb: Add(ITreeNode(Of T), Boolean)
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Remove(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  commentId: M:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Remove(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  id: Remove(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  parent: PnP.Framework.Diagnostics.Tree.TreeNodeList`1
  langs:
  - csharp
  - vb
  name: Remove(ITreeNode<T>)
  nameWithType: TreeNodeList<T>.Remove(ITreeNode<T>)
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.Remove(PnP.Framework.Diagnostics.Tree.ITreeNode<T>)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Remove
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
    startLine: 52
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nRemoves node from a tree\n"
  example: []
  syntax:
    content: public bool Remove(ITreeNode<T> node)
    parameters:
    - id: node
      type: PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}
      description: Tree node to be removed from a tree
    return:
      type: System.Boolean
      description: Returns status of Node removal from tree
    content.vb: Public Function Remove(node As ITreeNode(Of T)) As Boolean
  overload: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Remove*
  implements:
  - System.Collections.Generic.ICollection{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Remove(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  nameWithType.vb: TreeNodeList(Of T).Remove(ITreeNode(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).Remove(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: Remove(ITreeNode(Of T))
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Remove(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
  commentId: M:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Remove(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
  id: Remove(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Boolean)
  parent: PnP.Framework.Diagnostics.Tree.TreeNodeList`1
  langs:
  - csharp
  - vb
  name: Remove(ITreeNode<T>, Boolean)
  nameWithType: TreeNodeList<T>.Remove(ITreeNode<T>, Boolean)
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.Remove(PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Remove
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
    startLine: 57
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  syntax:
    content: protected bool Remove(ITreeNode<T> node, bool updateParent)
    parameters:
    - id: node
      type: PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}
    - id: updateParent
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Protected Function Remove(node As ITreeNode(Of T), updateParent As Boolean) As Boolean
  overload: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Remove*
  nameWithType.vb: TreeNodeList(Of T).Remove(ITreeNode(Of T), Boolean)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).Remove(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Boolean)
  name.vb: Remove(ITreeNode(Of T), Boolean)
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.PropertyChanged
  commentId: E:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.PropertyChanged
  id: PropertyChanged
  parent: PnP.Framework.Diagnostics.Tree.TreeNodeList`1
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: TreeNodeList<T>.PropertyChanged
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.PropertyChanged
  type: Event
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: PropertyChanged
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
    startLine: 82
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nReprensets PropertyChangedEventHandler on a tree node\n"
  example: []
  syntax:
    content: public event PropertyChangedEventHandler PropertyChanged
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
    content.vb: Public Event PropertyChanged As PropertyChangedEventHandler
  implements:
  - System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  nameWithType.vb: TreeNodeList(Of T).PropertyChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).PropertyChanged
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.OnPropertyChanged(System.String)
  commentId: M:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.OnPropertyChanged(System.String)
  id: OnPropertyChanged(System.String)
  parent: PnP.Framework.Diagnostics.Tree.TreeNodeList`1
  langs:
  - csharp
  - vb
  name: OnPropertyChanged(String)
  nameWithType: TreeNodeList<T>.OnPropertyChanged(String)
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.OnPropertyChanged(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: OnPropertyChanged
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
    startLine: 83
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  syntax:
    content: protected void OnPropertyChanged(string PropertyName)
    parameters:
    - id: PropertyName
      type: System.String
    content.vb: Protected Sub OnPropertyChanged(PropertyName As String)
  overload: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.OnPropertyChanged*
  nameWithType.vb: TreeNodeList(Of T).OnPropertyChanged(String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).OnPropertyChanged(System.String)
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.ToString
  commentId: M:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.ToString
  id: ToString
  parent: PnP.Framework.Diagnostics.Tree.TreeNodeList`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: TreeNodeList<T>.ToString()
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.ToString()
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToString
    path: ../src/lib/PnP.Framework/Diagnostics/Tree/TreeNodeList.cs
    startLine: 92
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Diagnostics.Tree
  summary: "\nRetuns count of child nodes as a string\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: Retuns count of child nodes as a string
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.ToString*
  nameWithType.vb: TreeNodeList(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).ToString()
references:
- uid: PnP.Framework.Diagnostics.Tree
  commentId: N:PnP.Framework.Diagnostics.Tree
  name: PnP.Framework.Diagnostics.Tree
  nameWithType: PnP.Framework.Diagnostics.Tree
  fullName: PnP.Framework.Diagnostics.Tree
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  commentId: T:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ITreeNode<T>>
  nameWithType: List<ITreeNode<T>>
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>
  nameWithType.vb: List(Of ITreeNode(Of T))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: List(Of ITreeNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  commentId: T:System.Collections.Generic.IReadOnlyList{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ITreeNode<T>>
  nameWithType: IReadOnlyList<ITreeNode<T>>
  fullName: System.Collections.Generic.IReadOnlyList<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>
  nameWithType.vb: IReadOnlyList(Of ITreeNode(Of T))
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: IReadOnlyList(Of ITreeNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<ITreeNode<T>>
  nameWithType: IReadOnlyCollection<ITreeNode<T>>
  fullName: System.Collections.Generic.IReadOnlyCollection<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>
  nameWithType.vb: IReadOnlyCollection(Of ITreeNode(Of T))
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: IReadOnlyCollection(Of ITreeNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: PnP.Framework.Diagnostics.Tree.ITreeNodeList{{T}}
  commentId: T:PnP.Framework.Diagnostics.Tree.ITreeNodeList{`0}
  parent: PnP.Framework.Diagnostics.Tree
  definition: PnP.Framework.Diagnostics.Tree.ITreeNodeList`1
  name: ITreeNodeList<T>
  nameWithType: ITreeNodeList<T>
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNodeList<T>
  nameWithType.vb: ITreeNodeList(Of T)
  fullName.vb: PnP.Framework.Diagnostics.Tree.ITreeNodeList(Of T)
  name.vb: ITreeNodeList(Of T)
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNodeList`1
    name: ITreeNodeList
    nameWithType: ITreeNodeList
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNodeList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNodeList`1
    name: ITreeNodeList
    nameWithType: ITreeNodeList
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNodeList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  commentId: T:System.Collections.Generic.IList{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ITreeNode<T>>
  nameWithType: IList<ITreeNode<T>>
  fullName: System.Collections.Generic.IList<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>
  nameWithType.vb: IList(Of ITreeNode(Of T))
  fullName.vb: System.Collections.Generic.IList(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: IList(Of ITreeNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  commentId: T:System.Collections.Generic.ICollection{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ITreeNode<T>>
  nameWithType: ICollection<ITreeNode<T>>
  fullName: System.Collections.Generic.ICollection<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>
  nameWithType.vb: ICollection(Of ITreeNode(Of T))
  fullName.vb: System.Collections.Generic.ICollection(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: ICollection(Of ITreeNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ITreeNode<T>>
  nameWithType: IEnumerable<ITreeNode<T>>
  fullName: System.Collections.Generic.IEnumerable<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>
  nameWithType.vb: IEnumerable(Of ITreeNode(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: IEnumerable(Of ITreeNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#IList#get_Item(System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  name: IList.get_Item(Int32)
  nameWithType: List<ITreeNode<T>>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<ITreeNode<T>>.IList.get_Item
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of ITreeNode(Of T)).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#IList#set_Item(System.Int32,System.Object)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  name: IList.set_Item(Int32, Object)
  nameWithType: List<ITreeNode<T>>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<ITreeNode<T>>.IList.set_Item
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of ITreeNode(Of T)).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.AddRange(System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.AddRange(System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  name: AddRange(IEnumerable<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.AddRange(IEnumerable<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.AddRange(System.Collections.Generic.IEnumerable<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).AddRange(IEnumerable(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).AddRange(System.Collections.Generic.IEnumerable(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: AddRange(IEnumerable(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<ITreeNode<T>>.AddRange
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of ITreeNode(Of T)).AddRange
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.AsReadOnly
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.AsReadOnly
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.AsReadOnly
  name: AsReadOnly()
  nameWithType: List<ITreeNode<T>>.AsReadOnly()
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.AsReadOnly()
  nameWithType.vb: List(Of ITreeNode(Of T)).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<ITreeNode<T>>.AsReadOnly
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of ITreeNode(Of T)).AsReadOnly
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.BinarySearch(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.BinarySearch(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.BinarySearch(`0)
  name: BinarySearch(ITreeNode<T>)
  nameWithType: List<ITreeNode<T>>.BinarySearch(ITreeNode<T>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.BinarySearch(PnP.Framework.Diagnostics.Tree.ITreeNode<T>)
  nameWithType.vb: List(Of ITreeNode(Of T)).BinarySearch(ITreeNode(Of T))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).BinarySearch(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: BinarySearch(ITreeNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<ITreeNode<T>>.BinarySearch
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of ITreeNode(Of T)).BinarySearch
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.BinarySearch(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Collections.Generic.IComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.BinarySearch(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Collections.Generic.IComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(ITreeNode<T>, IComparer<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.BinarySearch(ITreeNode<T>, IComparer<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.BinarySearch(PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Collections.Generic.IComparer<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).BinarySearch(ITreeNode(Of T), IComparer(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).BinarySearch(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Collections.Generic.IComparer(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: BinarySearch(ITreeNode(Of T), IComparer(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<ITreeNode<T>>.BinarySearch
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of ITreeNode(Of T)).BinarySearch
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.BinarySearch(System.Int32,System.Int32,PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Collections.Generic.IComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.BinarySearch(System.Int32,System.Int32,PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Collections.Generic.IComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(Int32, Int32, ITreeNode<T>, IComparer<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.BinarySearch(Int32, Int32, ITreeNode<T>, IComparer<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.BinarySearch(System.Int32, System.Int32, PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Collections.Generic.IComparer<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).BinarySearch(Int32, Int32, ITreeNode(Of T), IComparer(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).BinarySearch(System.Int32, System.Int32, PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Collections.Generic.IComparer(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: BinarySearch(Int32, Int32, ITreeNode(Of T), IComparer(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<ITreeNode<T>>.BinarySearch
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of ITreeNode(Of T)).BinarySearch
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Clear
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Clear
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Clear
  name: Clear()
  nameWithType: List<ITreeNode<T>>.Clear()
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Clear()
  nameWithType.vb: List(Of ITreeNode(Of T)).Clear()
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<ITreeNode<T>>.Clear
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of ITreeNode(Of T)).Clear
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Contains(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Contains(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Contains(`0)
  name: Contains(ITreeNode<T>)
  nameWithType: List<ITreeNode<T>>.Contains(ITreeNode<T>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Contains(PnP.Framework.Diagnostics.Tree.ITreeNode<T>)
  nameWithType.vb: List(Of ITreeNode(Of T)).Contains(ITreeNode(Of T))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Contains(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: Contains(ITreeNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<ITreeNode<T>>.Contains
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of ITreeNode(Of T)).Contains
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.ConvertAll``1(System.Converter{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},{TOutput}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.ConvertAll``1(System.Converter{PnP.Framework.Diagnostics.Tree.ITreeNode{`0},``0})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  name: ConvertAll<TOutput>(Converter<ITreeNode<T>, TOutput>)
  nameWithType: List<ITreeNode<T>>.ConvertAll<TOutput>(Converter<ITreeNode<T>, TOutput>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.ConvertAll<TOutput>(System.Converter<PnP.Framework.Diagnostics.Tree.ITreeNode<T>, TOutput>)
  nameWithType.vb: List(Of ITreeNode(Of T)).ConvertAll(Of TOutput)(Converter(Of ITreeNode(Of T), TOutput))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).ConvertAll(Of TOutput)(System.Converter(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of ITreeNode(Of T), TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<ITreeNode<T>>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of ITreeNode(Of T)).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.CopyTo(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}[])
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.CopyTo(PnP.Framework.Diagnostics.Tree.ITreeNode{`0}[])
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.CopyTo(`0[])
  name: CopyTo(ITreeNode<T>[])
  nameWithType: List<ITreeNode<T>>.CopyTo(ITreeNode<T>[])
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.CopyTo(PnP.Framework.Diagnostics.Tree.ITreeNode<T>[])
  nameWithType.vb: List(Of ITreeNode(Of T)).CopyTo(ITreeNode(Of T)())
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).CopyTo(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)())
  name.vb: CopyTo(ITreeNode(Of T)())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<ITreeNode<T>>.CopyTo
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of ITreeNode(Of T)).CopyTo
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.CopyTo(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}[],System.Int32)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.CopyTo(PnP.Framework.Diagnostics.Tree.ITreeNode{`0}[],System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  name: CopyTo(ITreeNode<T>[], Int32)
  nameWithType: List<ITreeNode<T>>.CopyTo(ITreeNode<T>[], Int32)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.CopyTo(PnP.Framework.Diagnostics.Tree.ITreeNode<T>[], System.Int32)
  nameWithType.vb: List(Of ITreeNode(Of T)).CopyTo(ITreeNode(Of T)(), Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).CopyTo(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)(), System.Int32)
  name.vb: CopyTo(ITreeNode(Of T)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<ITreeNode<T>>.CopyTo
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of ITreeNode(Of T)).CopyTo
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.CopyTo(System.Int32,PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.CopyTo(System.Int32,PnP.Framework.Diagnostics.Tree.ITreeNode{`0}[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  name: CopyTo(Int32, ITreeNode<T>[], Int32, Int32)
  nameWithType: List<ITreeNode<T>>.CopyTo(Int32, ITreeNode<T>[], Int32, Int32)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.CopyTo(System.Int32, PnP.Framework.Diagnostics.Tree.ITreeNode<T>[], System.Int32, System.Int32)
  nameWithType.vb: List(Of ITreeNode(Of T)).CopyTo(Int32, ITreeNode(Of T)(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).CopyTo(System.Int32, PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, ITreeNode(Of T)(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<ITreeNode<T>>.CopyTo
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of ITreeNode(Of T)).CopyTo
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Exists(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Exists(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  name: Exists(Predicate<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.Exists(Predicate<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Exists(System.Predicate<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).Exists(Predicate(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Exists(System.Predicate(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: Exists(Predicate(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<ITreeNode<T>>.Exists
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of ITreeNode(Of T)).Exists
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Find(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Find(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  name: Find(Predicate<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.Find(Predicate<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Find(System.Predicate<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).Find(Predicate(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Find(System.Predicate(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: Find(Predicate(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<ITreeNode<T>>.Find
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of ITreeNode(Of T)).Find
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindAll(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.FindAll(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  name: FindAll(Predicate<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.FindAll(Predicate<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindAll(System.Predicate<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).FindAll(Predicate(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindAll(System.Predicate(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: FindAll(Predicate(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<ITreeNode<T>>.FindAll
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of ITreeNode(Of T)).FindAll
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindIndex(System.Int32,System.Int32,System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.FindIndex(System.Int32,System.Int32,System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Int32, Predicate<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.FindIndex(Int32, Int32, Predicate<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindIndex(System.Int32, System.Int32, System.Predicate<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).FindIndex(Int32, Int32, Predicate(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindIndex(System.Int32, System.Int32, System.Predicate(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: FindIndex(Int32, Int32, Predicate(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<ITreeNode<T>>.FindIndex
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of ITreeNode(Of T)).FindIndex
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindIndex(System.Int32,System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.FindIndex(System.Int32,System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Predicate<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.FindIndex(Int32, Predicate<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindIndex(System.Int32, System.Predicate<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).FindIndex(Int32, Predicate(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindIndex(System.Int32, System.Predicate(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: FindIndex(Int32, Predicate(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<ITreeNode<T>>.FindIndex
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of ITreeNode(Of T)).FindIndex
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindIndex(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.FindIndex(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  name: FindIndex(Predicate<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.FindIndex(Predicate<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindIndex(System.Predicate<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).FindIndex(Predicate(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindIndex(System.Predicate(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: FindIndex(Predicate(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<ITreeNode<T>>.FindIndex
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of ITreeNode(Of T)).FindIndex
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindLast(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.FindLast(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  name: FindLast(Predicate<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.FindLast(Predicate<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindLast(System.Predicate<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).FindLast(Predicate(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindLast(System.Predicate(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: FindLast(Predicate(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<ITreeNode<T>>.FindLast
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of ITreeNode(Of T)).FindLast
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindLastIndex(System.Int32,System.Int32,System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.FindLastIndex(System.Int32,System.Int32,System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Int32, Predicate<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.FindLastIndex(Int32, Int32, Predicate<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindLastIndex(System.Int32, System.Int32, System.Predicate<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).FindLastIndex(Int32, Int32, Predicate(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<ITreeNode<T>>.FindLastIndex
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of ITreeNode(Of T)).FindLastIndex
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindLastIndex(System.Int32,System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.FindLastIndex(System.Int32,System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Predicate<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.FindLastIndex(Int32, Predicate<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindLastIndex(System.Int32, System.Predicate<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).FindLastIndex(Int32, Predicate(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindLastIndex(System.Int32, System.Predicate(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: FindLastIndex(Int32, Predicate(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<ITreeNode<T>>.FindLastIndex
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of ITreeNode(Of T)).FindLastIndex
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.FindLastIndex(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.FindLastIndex(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  name: FindLastIndex(Predicate<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.FindLastIndex(Predicate<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindLastIndex(System.Predicate<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).FindLastIndex(Predicate(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindLastIndex(System.Predicate(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: FindLastIndex(Predicate(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<ITreeNode<T>>.FindLastIndex
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of ITreeNode(Of T)).FindLastIndex
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.ForEach(System.Action{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.ForEach(System.Action{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  name: ForEach(Action<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.ForEach(Action<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.ForEach(System.Action<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).ForEach(Action(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).ForEach(System.Action(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: ForEach(Action(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<ITreeNode<T>>.ForEach
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of ITreeNode(Of T)).ForEach
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.GetEnumerator
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.GetEnumerator
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: List<ITreeNode<T>>.GetEnumerator()
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.GetEnumerator()
  nameWithType.vb: List(Of ITreeNode(Of T)).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<ITreeNode<T>>.GetEnumerator
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of ITreeNode(Of T)).GetEnumerator
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  name: GetRange(Int32, Int32)
  nameWithType: List<ITreeNode<T>>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of ITreeNode(Of T)).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<ITreeNode<T>>.GetRange
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of ITreeNode(Of T)).GetRange
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.IndexOf(`0)
  name: IndexOf(ITreeNode<T>)
  nameWithType: List<ITreeNode<T>>.IndexOf(ITreeNode<T>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode<T>)
  nameWithType.vb: List(Of ITreeNode(Of T)).IndexOf(ITreeNode(Of T))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: IndexOf(ITreeNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<ITreeNode<T>>.IndexOf
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of ITreeNode(Of T)).IndexOf
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Int32)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  name: IndexOf(ITreeNode<T>, Int32)
  nameWithType: List<ITreeNode<T>>.IndexOf(ITreeNode<T>, Int32)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Int32)
  nameWithType.vb: List(Of ITreeNode(Of T)).IndexOf(ITreeNode(Of T), Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Int32)
  name.vb: IndexOf(ITreeNode(Of T), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<ITreeNode<T>>.IndexOf
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of ITreeNode(Of T)).IndexOf
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Int32,System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  name: IndexOf(ITreeNode<T>, Int32, Int32)
  nameWithType: List<ITreeNode<T>>.IndexOf(ITreeNode<T>, Int32, Int32)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Int32, System.Int32)
  nameWithType.vb: List(Of ITreeNode(Of T)).IndexOf(ITreeNode(Of T), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).IndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Int32, System.Int32)
  name.vb: IndexOf(ITreeNode(Of T), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<ITreeNode<T>>.IndexOf
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of ITreeNode(Of T)).IndexOf
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Insert(System.Int32,PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Insert(System.Int32,PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  name: Insert(Int32, ITreeNode<T>)
  nameWithType: List<ITreeNode<T>>.Insert(Int32, ITreeNode<T>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Insert(System.Int32, PnP.Framework.Diagnostics.Tree.ITreeNode<T>)
  nameWithType.vb: List(Of ITreeNode(Of T)).Insert(Int32, ITreeNode(Of T))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Insert(System.Int32, PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: Insert(Int32, ITreeNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<ITreeNode<T>>.Insert
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of ITreeNode(Of T)).Insert
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  name: InsertRange(Int32, IEnumerable<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.InsertRange(Int32, IEnumerable<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).InsertRange(Int32, IEnumerable(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: InsertRange(Int32, IEnumerable(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<ITreeNode<T>>.InsertRange
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of ITreeNode(Of T)).InsertRange
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0)
  name: LastIndexOf(ITreeNode<T>)
  nameWithType: List<ITreeNode<T>>.LastIndexOf(ITreeNode<T>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode<T>)
  nameWithType.vb: List(Of ITreeNode(Of T)).LastIndexOf(ITreeNode(Of T))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: LastIndexOf(ITreeNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<ITreeNode<T>>.LastIndexOf
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of ITreeNode(Of T)).LastIndexOf
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Int32)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  name: LastIndexOf(ITreeNode<T>, Int32)
  nameWithType: List<ITreeNode<T>>.LastIndexOf(ITreeNode<T>, Int32)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Int32)
  nameWithType.vb: List(Of ITreeNode(Of T)).LastIndexOf(ITreeNode(Of T), Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Int32)
  name.vb: LastIndexOf(ITreeNode(Of T), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<ITreeNode<T>>.LastIndexOf
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of ITreeNode(Of T)).LastIndexOf
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode{`0},System.Int32,System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  name: LastIndexOf(ITreeNode<T>, Int32, Int32)
  nameWithType: List<ITreeNode<T>>.LastIndexOf(ITreeNode<T>, Int32, Int32)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Int32, System.Int32)
  nameWithType.vb: List(Of ITreeNode(Of T)).LastIndexOf(ITreeNode(Of T), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).LastIndexOf(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Int32, System.Int32)
  name.vb: LastIndexOf(ITreeNode(Of T), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<ITreeNode<T>>.LastIndexOf
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of ITreeNode(Of T)).LastIndexOf
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.RemoveAll(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.RemoveAll(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  name: RemoveAll(Predicate<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.RemoveAll(Predicate<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.RemoveAll(System.Predicate<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).RemoveAll(Predicate(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).RemoveAll(System.Predicate(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: RemoveAll(Predicate(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<ITreeNode<T>>.RemoveAll
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of ITreeNode(Of T)).RemoveAll
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: List<ITreeNode<T>>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of ITreeNode(Of T)).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<ITreeNode<T>>.RemoveAt
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of ITreeNode(Of T)).RemoveAt
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  name: RemoveRange(Int32, Int32)
  nameWithType: List<ITreeNode<T>>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of ITreeNode(Of T)).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<ITreeNode<T>>.RemoveRange
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of ITreeNode(Of T)).RemoveRange
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Reverse
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Reverse
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Reverse
  name: Reverse()
  nameWithType: List<ITreeNode<T>>.Reverse()
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Reverse()
  nameWithType.vb: List(Of ITreeNode(Of T)).Reverse()
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<ITreeNode<T>>.Reverse
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of ITreeNode(Of T)).Reverse
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  name: Reverse(Int32, Int32)
  nameWithType: List<ITreeNode<T>>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of ITreeNode(Of T)).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<ITreeNode<T>>.Reverse
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of ITreeNode(Of T)).Reverse
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Sort
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Sort
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Sort
  name: Sort()
  nameWithType: List<ITreeNode<T>>.Sort()
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Sort()
  nameWithType.vb: List(Of ITreeNode(Of T)).Sort()
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<ITreeNode<T>>.Sort
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of ITreeNode(Of T)).Sort
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Sort(System.Collections.Generic.IComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Sort(System.Collections.Generic.IComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  name: Sort(IComparer<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.Sort(IComparer<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Sort(System.Collections.Generic.IComparer<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).Sort(IComparer(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Sort(System.Collections.Generic.IComparer(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: Sort(IComparer(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<ITreeNode<T>>.Sort
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of ITreeNode(Of T)).Sort
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Sort(System.Comparison{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Sort(System.Comparison{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  name: Sort(Comparison<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.Sort(Comparison<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Sort(System.Comparison<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).Sort(Comparison(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Sort(System.Comparison(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: Sort(Comparison(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<ITreeNode<T>>.Sort
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of ITreeNode(Of T)).Sort
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  name: Sort(Int32, Int32, IComparer<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.Sort(Int32, Int32, IComparer<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).Sort(Int32, Int32, IComparer(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: Sort(Int32, Int32, IComparer(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<ITreeNode<T>>.Sort
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of ITreeNode(Of T)).Sort
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<ITreeNode<T>>.GetEnumerator()
  nameWithType: List<ITreeNode<T>>.IEnumerable<ITreeNode<T>>.GetEnumerator()
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.Generic.IEnumerable<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.GetEnumerator()
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<ITreeNode<T>>.GetEnumerator
    nameWithType: List<ITreeNode<T>>.IEnumerable<ITreeNode<T>>.GetEnumerator
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.Generic.IEnumerable<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of ITreeNode(Of T)).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<ITreeNode<T>>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<ITreeNode<T>>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of ITreeNode(Of T)).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: List<ITreeNode<T>>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<ITreeNode<T>>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of ITreeNode(Of T)).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  name: IList.Add(Object)
  nameWithType: List<ITreeNode<T>>.IList.Add(Object)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<ITreeNode<T>>.IList.Add
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of ITreeNode(Of T)).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  name: IList.Contains(Object)
  nameWithType: List<ITreeNode<T>>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<ITreeNode<T>>.IList.Contains
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of ITreeNode(Of T)).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  name: IList.IndexOf(Object)
  nameWithType: List<ITreeNode<T>>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<ITreeNode<T>>.IList.IndexOf
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of ITreeNode(Of T)).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  name: IList.Insert(Int32, Object)
  nameWithType: List<ITreeNode<T>>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<ITreeNode<T>>.IList.Insert
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of ITreeNode(Of T)).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  name: IList.Remove(Object)
  nameWithType: List<ITreeNode<T>>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<ITreeNode<T>>.IList.Remove
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of ITreeNode(Of T)).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.ToArray
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.ToArray
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.ToArray
  name: ToArray()
  nameWithType: List<ITreeNode<T>>.ToArray()
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.ToArray()
  nameWithType.vb: List(Of ITreeNode(Of T)).ToArray()
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<ITreeNode<T>>.ToArray
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of ITreeNode(Of T)).ToArray
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.TrimExcess
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.TrimExcess
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.TrimExcess
  name: TrimExcess()
  nameWithType: List<ITreeNode<T>>.TrimExcess()
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.TrimExcess()
  nameWithType.vb: List(Of ITreeNode(Of T)).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<ITreeNode<T>>.TrimExcess
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of ITreeNode(Of T)).TrimExcess
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.TrueForAll(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.TrueForAll(System.Predicate{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}})
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  name: TrueForAll(Predicate<ITreeNode<T>>)
  nameWithType: List<ITreeNode<T>>.TrueForAll(Predicate<ITreeNode<T>>)
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.TrueForAll(System.Predicate<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: List(Of ITreeNode(Of T)).TrueForAll(Predicate(Of ITreeNode(Of T)))
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).TrueForAll(System.Predicate(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: TrueForAll(Predicate(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<ITreeNode<T>>.TrueForAll
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of ITreeNode(Of T)).TrueForAll
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Capacity
  commentId: P:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Capacity
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Capacity
  name: Capacity
  nameWithType: List<ITreeNode<T>>.Capacity
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Capacity
  nameWithType.vb: List(Of ITreeNode(Of T)).Capacity
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Capacity
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Count
  commentId: P:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Count
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Count
  name: Count
  nameWithType: List<ITreeNode<T>>.Count
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Count
  nameWithType.vb: List(Of ITreeNode(Of T)).Count
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Count
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Item(System.Int32)
  commentId: P:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Item(System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: List<ITreeNode<T>>.Item[Int32]
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Item[System.Int32]
  nameWithType.vb: List(Of ITreeNode(Of T)).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<ITreeNode<T>>.Item
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of ITreeNode(Of T)).Item
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<ITreeNode<T>>.IsReadOnly
  nameWithType: List<ITreeNode<T>>.ICollection<ITreeNode<T>>.IsReadOnly
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.Generic.ICollection<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.IsReadOnly
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: List<ITreeNode<T>>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: List<ITreeNode<T>>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#IList#IsFixedSize
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: List<ITreeNode<T>>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#IList#IsReadOnly
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: List<ITreeNode<T>>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Generic.List{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  name: IList.Item[Int32]
  nameWithType: List<ITreeNode<T>>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of ITreeNode(Of T)).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<ITreeNode<T>>.IList.Item
    fullName: System.Collections.Generic.List<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of ITreeNode(Of T)).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  parent: System.ValidationExtensions
  definition: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  name: ValidateNotNullOrEmpty<TreeNodeList<T>>(String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<TreeNodeList<T>>(String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.Diagnostics.Tree.TreeNodeList<T>>(System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of TreeNodeList(Of T))(String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T))(System.String)
  name.vb: ValidateNotNullOrEmpty(Of TreeNodeList(Of T))(String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty<TreeNodeList<T>>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<TreeNodeList<T>>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.Diagnostics.Tree.TreeNodeList<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty(Of TreeNodeList(Of T))
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of TreeNodeList(Of T))
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.PnP.Framework.Extensions.EnumerableExtensions.DeepEquals``1(System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}})
  commentId: M:PnP.Framework.Extensions.EnumerableExtensions.DeepEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: PnP.Framework.Extensions.EnumerableExtensions
  definition: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: DeepEquals<ITreeNode<T>>(IEnumerable<ITreeNode<T>>)
  nameWithType: EnumerableExtensions.DeepEquals<ITreeNode<T>>(IEnumerable<ITreeNode<T>>)
  fullName: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>(System.Collections.Generic.IEnumerable<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>)
  nameWithType.vb: EnumerableExtensions.DeepEquals(Of ITreeNode(Of T))(IEnumerable(Of ITreeNode(Of T)))
  fullName.vb: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))(System.Collections.Generic.IEnumerable(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)))
  name.vb: DeepEquals(Of ITreeNode(Of T))(IEnumerable(Of ITreeNode(Of T)))
  spec.csharp:
  - uid: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals``1(System.Collections.Generic.IEnumerable{``0})
    name: DeepEquals<ITreeNode<T>>
    nameWithType: EnumerableExtensions.DeepEquals<ITreeNode<T>>
    fullName: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals``1(System.Collections.Generic.IEnumerable{``0})
    name: DeepEquals(Of ITreeNode(Of T))
    nameWithType: EnumerableExtensions.DeepEquals(Of ITreeNode(Of T))
    fullName: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.Diagnostics.Tree.TreeNodeList{{T}},{T}}},{T},System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  name: Set<TreeNodeList<T>, T>(Expression<Func<TreeNodeList<T>, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<TreeNodeList<T>, T>(Expression<Func<TreeNodeList<T>, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.Diagnostics.Tree.TreeNodeList<T>, T>(System.Linq.Expressions.Expression<System.Func<PnP.Framework.Diagnostics.Tree.TreeNodeList<T>, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of TreeNodeList(Of T), T)(Expression(Of Func(Of TreeNodeList(Of T), T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T), T)(System.Linq.Expressions.Expression(Of System.Func(Of PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T), T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of TreeNodeList(Of T), T)(Expression(Of Func(Of TreeNodeList(Of T), T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<TreeNodeList<T>, T>
    nameWithType: ObjectExtensions.Set<TreeNodeList<T>, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.Diagnostics.Tree.TreeNodeList<T>, T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1
    name: TreeNodeList
    nameWithType: TreeNodeList
    fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of TreeNodeList(Of T), T)
    nameWithType: ObjectExtensions.Set(Of TreeNodeList(Of T), T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T), T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1
    name: TreeNodeList
    nameWithType: TreeNodeList
    fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  name: GetPublicInstancePropertyValue(String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  name: GetPublicInstanceProperty(String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  name: SetPublicInstancePropertyValue(String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.PnP.Framework.Extensions.TopologicalSort.Sort``2(System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Collections.Generic.IEnumerable{{TKey}}},System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},{TKey}},System.Boolean)
  commentId: M:PnP.Framework.Extensions.TopologicalSort.Sort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
  parent: PnP.Framework.Extensions.TopologicalSort
  definition: PnP.Framework.Extensions.TopologicalSort.Sort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
  name: Sort<ITreeNode<T>, TKey>(Func<ITreeNode<T>, IEnumerable<TKey>>, Func<ITreeNode<T>, TKey>, Boolean)
  nameWithType: TopologicalSort.Sort<ITreeNode<T>, TKey>(Func<ITreeNode<T>, IEnumerable<TKey>>, Func<ITreeNode<T>, TKey>, Boolean)
  fullName: PnP.Framework.Extensions.TopologicalSort.Sort<PnP.Framework.Diagnostics.Tree.ITreeNode<T>, TKey>(System.Func<PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Collections.Generic.IEnumerable<TKey>>, System.Func<PnP.Framework.Diagnostics.Tree.ITreeNode<T>, TKey>, System.Boolean)
  nameWithType.vb: TopologicalSort.Sort(Of ITreeNode(Of T), TKey)(Func(Of ITreeNode(Of T), IEnumerable(Of TKey)), Func(Of ITreeNode(Of T), TKey), Boolean)
  fullName.vb: PnP.Framework.Extensions.TopologicalSort.Sort(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), TKey)(System.Func(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Collections.Generic.IEnumerable(Of TKey)), System.Func(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), TKey), System.Boolean)
  name.vb: Sort(Of ITreeNode(Of T), TKey)(Func(Of ITreeNode(Of T), IEnumerable(Of TKey)), Func(Of ITreeNode(Of T), TKey), Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.TopologicalSort.Sort``2(System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
    name: Sort<ITreeNode<T>, TKey>
    nameWithType: TopologicalSort.Sort<ITreeNode<T>, TKey>
    fullName: PnP.Framework.Extensions.TopologicalSort.Sort<PnP.Framework.Diagnostics.Tree.ITreeNode<T>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.TopologicalSort.Sort``2(System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
    name: Sort(Of ITreeNode(Of T), TKey)
    nameWithType: TopologicalSort.Sort(Of ITreeNode(Of T), TKey)
    fullName: PnP.Framework.Extensions.TopologicalSort.Sort(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.PnP.Framework.Extensions.TopologicalSort.Sort``1(System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}},System.Collections.Generic.IEqualityComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}},System.Boolean)
  commentId: M:PnP.Framework.Extensions.TopologicalSort.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  parent: PnP.Framework.Extensions.TopologicalSort
  definition: PnP.Framework.Extensions.TopologicalSort.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  name: Sort<ITreeNode<T>>(Func<ITreeNode<T>, IEnumerable<ITreeNode<T>>>, IEqualityComparer<ITreeNode<T>>, Boolean)
  nameWithType: TopologicalSort.Sort<ITreeNode<T>>(Func<ITreeNode<T>, IEnumerable<ITreeNode<T>>>, IEqualityComparer<ITreeNode<T>>, Boolean)
  fullName: PnP.Framework.Extensions.TopologicalSort.Sort<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>(System.Func<PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Collections.Generic.IEnumerable<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>>, System.Collections.Generic.IEqualityComparer<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>, System.Boolean)
  nameWithType.vb: TopologicalSort.Sort(Of ITreeNode(Of T))(Func(Of ITreeNode(Of T), IEnumerable(Of ITreeNode(Of T))), IEqualityComparer(Of ITreeNode(Of T)), Boolean)
  fullName.vb: PnP.Framework.Extensions.TopologicalSort.Sort(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))(System.Func(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Collections.Generic.IEnumerable(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))), System.Collections.Generic.IEqualityComparer(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)), System.Boolean)
  name.vb: Sort(Of ITreeNode(Of T))(Func(Of ITreeNode(Of T), IEnumerable(Of ITreeNode(Of T))), IEqualityComparer(Of ITreeNode(Of T)), Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.TopologicalSort.Sort``1(System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
    name: Sort<ITreeNode<T>>
    nameWithType: TopologicalSort.Sort<ITreeNode<T>>
    fullName: PnP.Framework.Extensions.TopologicalSort.Sort<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.TopologicalSort.Sort``1(System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
    name: Sort(Of ITreeNode(Of T))
    nameWithType: TopologicalSort.Sort(Of ITreeNode(Of T))
    fullName: PnP.Framework.Extensions.TopologicalSort.Sort(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.PnP.Framework.Extensions.TopologicalSort.Group``2(System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Collections.Generic.IEnumerable{{TKey}}},System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},{TKey}},System.Boolean)
  commentId: M:PnP.Framework.Extensions.TopologicalSort.Group``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
  parent: PnP.Framework.Extensions.TopologicalSort
  definition: PnP.Framework.Extensions.TopologicalSort.Group``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
  name: Group<ITreeNode<T>, TKey>(Func<ITreeNode<T>, IEnumerable<TKey>>, Func<ITreeNode<T>, TKey>, Boolean)
  nameWithType: TopologicalSort.Group<ITreeNode<T>, TKey>(Func<ITreeNode<T>, IEnumerable<TKey>>, Func<ITreeNode<T>, TKey>, Boolean)
  fullName: PnP.Framework.Extensions.TopologicalSort.Group<PnP.Framework.Diagnostics.Tree.ITreeNode<T>, TKey>(System.Func<PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Collections.Generic.IEnumerable<TKey>>, System.Func<PnP.Framework.Diagnostics.Tree.ITreeNode<T>, TKey>, System.Boolean)
  nameWithType.vb: TopologicalSort.Group(Of ITreeNode(Of T), TKey)(Func(Of ITreeNode(Of T), IEnumerable(Of TKey)), Func(Of ITreeNode(Of T), TKey), Boolean)
  fullName.vb: PnP.Framework.Extensions.TopologicalSort.Group(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), TKey)(System.Func(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Collections.Generic.IEnumerable(Of TKey)), System.Func(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), TKey), System.Boolean)
  name.vb: Group(Of ITreeNode(Of T), TKey)(Func(Of ITreeNode(Of T), IEnumerable(Of TKey)), Func(Of ITreeNode(Of T), TKey), Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.TopologicalSort.Group``2(System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
    name: Group<ITreeNode<T>, TKey>
    nameWithType: TopologicalSort.Group<ITreeNode<T>, TKey>
    fullName: PnP.Framework.Extensions.TopologicalSort.Group<PnP.Framework.Diagnostics.Tree.ITreeNode<T>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.TopologicalSort.Group``2(System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
    name: Group(Of ITreeNode(Of T), TKey)
    nameWithType: TopologicalSort.Group(Of ITreeNode(Of T), TKey)
    fullName: PnP.Framework.Extensions.TopologicalSort.Group(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.PnP.Framework.Extensions.TopologicalSort.Group``1(System.Func{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}},System.Collections.Generic.IEnumerable{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}},System.Collections.Generic.IEqualityComparer{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}},System.Boolean)
  commentId: M:PnP.Framework.Extensions.TopologicalSort.Group``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  parent: PnP.Framework.Extensions.TopologicalSort
  definition: PnP.Framework.Extensions.TopologicalSort.Group``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  name: Group<ITreeNode<T>>(Func<ITreeNode<T>, IEnumerable<ITreeNode<T>>>, IEqualityComparer<ITreeNode<T>>, Boolean)
  nameWithType: TopologicalSort.Group<ITreeNode<T>>(Func<ITreeNode<T>, IEnumerable<ITreeNode<T>>>, IEqualityComparer<ITreeNode<T>>, Boolean)
  fullName: PnP.Framework.Extensions.TopologicalSort.Group<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>(System.Func<PnP.Framework.Diagnostics.Tree.ITreeNode<T>, System.Collections.Generic.IEnumerable<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>>, System.Collections.Generic.IEqualityComparer<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>, System.Boolean)
  nameWithType.vb: TopologicalSort.Group(Of ITreeNode(Of T))(Func(Of ITreeNode(Of T), IEnumerable(Of ITreeNode(Of T))), IEqualityComparer(Of ITreeNode(Of T)), Boolean)
  fullName.vb: PnP.Framework.Extensions.TopologicalSort.Group(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))(System.Func(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T), System.Collections.Generic.IEnumerable(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))), System.Collections.Generic.IEqualityComparer(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)), System.Boolean)
  name.vb: Group(Of ITreeNode(Of T))(Func(Of ITreeNode(Of T), IEnumerable(Of ITreeNode(Of T))), IEqualityComparer(Of ITreeNode(Of T)), Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.TopologicalSort.Group``1(System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
    name: Group<ITreeNode<T>>
    nameWithType: TopologicalSort.Group<ITreeNode<T>>
    fullName: PnP.Framework.Extensions.TopologicalSort.Group<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.TopologicalSort.Group``1(System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
    name: Group(Of ITreeNode(Of T))
    nameWithType: TopologicalSort.Group(Of ITreeNode(Of T))
    fullName: PnP.Framework.Extensions.TopologicalSort.Group(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  parent: PnP.Framework.Modernization.Cache.Extensions
  definition: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  name: ToByteArray()
  nameWithType: Extensions.ToByteArray()
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray()
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: PnP.Framework.Diagnostics.Tree.ITreeNodeList`1
  commentId: T:PnP.Framework.Diagnostics.Tree.ITreeNodeList`1
  name: ITreeNodeList<T>
  nameWithType: ITreeNodeList<T>
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNodeList<T>
  nameWithType.vb: ITreeNodeList(Of T)
  fullName.vb: PnP.Framework.Diagnostics.Tree.ITreeNodeList(Of T)
  name.vb: ITreeNodeList(Of T)
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNodeList`1
    name: ITreeNodeList
    nameWithType: ITreeNodeList
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNodeList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNodeList`1
    name: ITreeNodeList
    nameWithType: ITreeNodeList
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNodeList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  isExternal: true
  name: IList.get_Item(Int32)
  nameWithType: List<T>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of T).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<T>.IList.get_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of T).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  isExternal: true
  name: IList.set_Item(Int32, Object)
  nameWithType: List<T>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<T>.IList.set_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of T).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).AddRange(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<T>.AddRange
    fullName: System.Collections.Generic.List<T>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of T).AddRange
    fullName: System.Collections.Generic.List(Of T).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AsReadOnly
  commentId: M:System.Collections.Generic.List`1.AsReadOnly
  isExternal: true
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
  nameWithType.vb: List(Of T).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of T).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<T>.AsReadOnly
    fullName: System.Collections.Generic.List<T>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of T).AsReadOnly
    fullName: System.Collections.Generic.List(Of T).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  isExternal: true
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
  nameWithType.vb: List(Of T).BinarySearch(T)
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(Int32, Int32, T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Int32, Int32, T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Clear
  commentId: M:System.Collections.Generic.List`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
  nameWithType.vb: List(Of T).Clear()
  fullName.vb: System.Collections.Generic.List(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<T>.Clear
    fullName: System.Collections.Generic.List<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of T).Clear
    fullName: System.Collections.Generic.List(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Contains(`0)
  commentId: M:System.Collections.Generic.List`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
  nameWithType.vb: List(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.List(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<T>.Contains
    fullName: System.Collections.Generic.List<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of T).Contains
    fullName: System.Collections.Generic.List(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  commentId: M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  isExternal: true
  name: ConvertAll<TOutput>(Converter<T, TOutput>)
  nameWithType: List<T>.ConvertAll<TOutput>(Converter<T, TOutput>)
  fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>(System.Converter<T, TOutput>)
  nameWithType.vb: List(Of T).ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  fullName.vb: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)(System.Converter(Of T, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<T>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of T).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  isExternal: true
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
  nameWithType.vb: List(Of T).CopyTo(T())
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T())
  name.vb: CopyTo(T())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: List<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: List(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  isExternal: true
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
  nameWithType.vb: List(Of T).CopyTo(Int32, T(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, T(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  isExternal: true
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(System.Predicate<T>)
  nameWithType.vb: List(Of T).Exists(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Exists(System.Predicate(Of T))
  name.vb: Exists(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<T>.Exists
    fullName: System.Collections.Generic.List<T>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of T).Exists
    fullName: System.Collections.Generic.List(Of T).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  isExternal: true
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(System.Predicate<T>)
  nameWithType.vb: List(Of T).Find(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Find(System.Predicate(Of T))
  name.vb: Find(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<T>.Find
    fullName: System.Collections.Generic.List<T>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of T).Find
    fullName: System.Collections.Generic.List(Of T).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  isExternal: true
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindAll(System.Predicate(Of T))
  name.vb: FindAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<T>.FindAll
    fullName: System.Collections.Generic.List<T>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of T).FindAll
    fullName: System.Collections.Generic.List(Of T).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  isExternal: true
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Predicate(Of T))
  name.vb: FindIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  isExternal: true
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLast(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLast(System.Predicate(Of T))
  name.vb: FindLast(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<T>.FindLast
    fullName: System.Collections.Generic.List<T>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of T).FindLast
    fullName: System.Collections.Generic.List(Of T).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Predicate(Of T))
  name.vb: FindLastIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  isExternal: true
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(System.Action<T>)
  nameWithType.vb: List(Of T).ForEach(Action(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).ForEach(System.Action(Of T))
  name.vb: ForEach(Action(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<T>.ForEach
    fullName: System.Collections.Generic.List<T>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of T).ForEach
    fullName: System.Collections.Generic.List(Of T).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetEnumerator
  commentId: M:System.Collections.Generic.List`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
  nameWithType.vb: List(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of T).GetEnumerator
    fullName: System.Collections.Generic.List(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  isExternal: true
  name: GetRange(Int32, Int32)
  nameWithType: List<T>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<T>.GetRange
    fullName: System.Collections.Generic.List<T>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of T).GetRange
    fullName: System.Collections.Generic.List(Of T).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
  nameWithType.vb: List(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32)
  nameWithType: List<T>.IndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32, Int32)
  nameWithType: List<T>.IndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: List<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.List<T>.Insert(System.Int32, T)
  nameWithType.vb: List(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.List(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<T>.Insert
    fullName: System.Collections.Generic.List<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of T).Insert
    fullName: System.Collections.Generic.List(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).InsertRange(Int32, IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<T>.InsertRange
    fullName: System.Collections.Generic.List<T>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of T).InsertRange
    fullName: System.Collections.Generic.List(Of T).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  isExternal: true
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
  nameWithType.vb: List(Of T).LastIndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  isExternal: true
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).RemoveAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAll(System.Predicate(Of T))
  name.vb: RemoveAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<T>.RemoveAll
    fullName: System.Collections.Generic.List<T>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of T).RemoveAll
    fullName: System.Collections.Generic.List(Of T).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<T>.RemoveAt
    fullName: System.Collections.Generic.List<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of T).RemoveAt
    fullName: System.Collections.Generic.List(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  isExternal: true
  name: RemoveRange(Int32, Int32)
  nameWithType: List<T>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<T>.RemoveRange
    fullName: System.Collections.Generic.List<T>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of T).RemoveRange
    fullName: System.Collections.Generic.List(Of T).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse
  commentId: M:System.Collections.Generic.List`1.Reverse
  isExternal: true
  name: Reverse()
  nameWithType: List<T>.Reverse()
  fullName: System.Collections.Generic.List<T>.Reverse()
  nameWithType.vb: List(Of T).Reverse()
  fullName.vb: System.Collections.Generic.List(Of T).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  isExternal: true
  name: Reverse(Int32, Int32)
  nameWithType: List<T>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort
  commentId: M:System.Collections.Generic.List`1.Sort
  isExternal: true
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
  nameWithType.vb: List(Of T).Sort()
  fullName.vb: System.Collections.Generic.List(Of T).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  isExternal: true
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Comparison<T>)
  nameWithType.vb: List(Of T).Sort(Comparison(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(Int32, Int32, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Int32, Int32, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isExternal: true
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: List<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<T>.GetEnumerator
    nameWithType: List<T>.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<T>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<T>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of T).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: List<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<T>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  isExternal: true
  name: IList.Add(Object)
  nameWithType: List<T>.IList.Add(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<T>.IList.Add
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of T).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  isExternal: true
  name: IList.Contains(Object)
  nameWithType: List<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<T>.IList.Contains
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of T).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  isExternal: true
  name: IList.IndexOf(Object)
  nameWithType: List<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<T>.IList.IndexOf
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of T).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  isExternal: true
  name: IList.Insert(Int32, Object)
  nameWithType: List<T>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<T>.IList.Insert
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of T).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  isExternal: true
  name: IList.Remove(Object)
  nameWithType: List<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<T>.IList.Remove
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of T).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ToArray
  commentId: M:System.Collections.Generic.List`1.ToArray
  isExternal: true
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
  nameWithType.vb: List(Of T).ToArray()
  fullName.vb: System.Collections.Generic.List(Of T).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<T>.ToArray
    fullName: System.Collections.Generic.List<T>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of T).ToArray
    fullName: System.Collections.Generic.List(Of T).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrimExcess
  commentId: M:System.Collections.Generic.List`1.TrimExcess
  isExternal: true
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
  nameWithType.vb: List(Of T).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of T).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<T>.TrimExcess
    fullName: System.Collections.Generic.List<T>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of T).TrimExcess
    fullName: System.Collections.Generic.List(Of T).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  isExternal: true
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).TrueForAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).TrueForAll(System.Predicate(Of T))
  name.vb: TrueForAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<T>.TrueForAll
    fullName: System.Collections.Generic.List<T>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of T).TrueForAll
    fullName: System.Collections.Generic.List(Of T).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  isExternal: true
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  nameWithType.vb: List(Of T).Capacity
  fullName.vb: System.Collections.Generic.List(Of T).Capacity
- uid: System.Collections.Generic.List`1.Count
  commentId: P:System.Collections.Generic.List`1.Count
  isExternal: true
  name: Count
  nameWithType: List<T>.Count
  fullName: System.Collections.Generic.List<T>.Count
  nameWithType.vb: List(Of T).Count
  fullName.vb: System.Collections.Generic.List(Of T).Count
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: List<T>.Item[Int32]
  fullName: System.Collections.Generic.List<T>.Item[System.Int32]
  nameWithType.vb: List(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<T>.Item
    fullName: System.Collections.Generic.List<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of T).Item
    fullName: System.Collections.Generic.List(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  isExternal: true
  name: ICollection<T>.IsReadOnly
  nameWithType: List<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  isExternal: true
  name: ICollection.IsSynchronized
  nameWithType: List<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  isExternal: true
  name: ICollection.SyncRoot
  nameWithType: List<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  isExternal: true
  name: IList.IsFixedSize
  nameWithType: List<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  isExternal: true
  name: IList.IsReadOnly
  nameWithType: List<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  isExternal: true
  name: IList.Item[Int32]
  nameWithType: List<T>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of T).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<T>.IList.Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of T).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  isExternal: true
  name: ValidateNotNullOrEmpty<T>(T, String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>(T, String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>(T, System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, System.String)
  name.vb: ValidateNotNullOrEmpty(Of T)(T, String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty<T>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty(Of T)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of T)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions
  commentId: T:System.ValidationExtensions
  parent: System
  name: ValidationExtensions
  nameWithType: ValidationExtensions
  fullName: System.ValidationExtensions
- uid: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:PnP.Framework.Extensions.EnumerableExtensions.DeepEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: DeepEquals<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: EnumerableExtensions.DeepEquals<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: EnumerableExtensions.DeepEquals(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: DeepEquals(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: DeepEquals<T>
    nameWithType: EnumerableExtensions.DeepEquals<T>
    fullName: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: DeepEquals(Of T)
    nameWithType: EnumerableExtensions.DeepEquals(Of T)
    fullName: PnP.Framework.Extensions.EnumerableExtensions.DeepEquals(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.EnumerableExtensions
  commentId: T:PnP.Framework.Extensions.EnumerableExtensions
  parent: PnP.Framework.Extensions
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: PnP.Framework.Extensions.EnumerableExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  isExternal: true
  name: Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>(TObject, System.Linq.Expressions.Expression<System.Func<TObject, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)(TObject, System.Linq.Expressions.Expression(Of System.Func(Of TObject, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<TObject, T>
    nameWithType: ObjectExtensions.Set<TObject, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of TObject, T)
    nameWithType: ObjectExtensions.Set(Of TObject, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions
  commentId: T:PnP.Framework.Extensions.ObjectExtensions
  parent: PnP.Framework.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: PnP.Framework.Extensions.ObjectExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  isExternal: true
  name: GetPublicInstancePropertyValue(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  isExternal: true
  name: GetPublicInstanceProperty(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  isExternal: true
  name: SetPublicInstancePropertyValue(Object, String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(Object, String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object, System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.TopologicalSort.Sort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
  commentId: M:PnP.Framework.Extensions.TopologicalSort.Sort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
  isExternal: true
  name: Sort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<TKey>>, Func<T, TKey>, Boolean)
  nameWithType: TopologicalSort.Sort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<TKey>>, Func<T, TKey>, Boolean)
  fullName: PnP.Framework.Extensions.TopologicalSort.Sort<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<TKey>>, System.Func<T, TKey>, System.Boolean)
  nameWithType.vb: TopologicalSort.Sort(Of T, TKey)(IEnumerable(Of T), Func(Of T, IEnumerable(Of TKey)), Func(Of T, TKey), Boolean)
  fullName.vb: PnP.Framework.Extensions.TopologicalSort.Sort(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of TKey)), System.Func(Of T, TKey), System.Boolean)
  name.vb: Sort(Of T, TKey)(IEnumerable(Of T), Func(Of T, IEnumerable(Of TKey)), Func(Of T, TKey), Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.TopologicalSort.Sort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
    name: Sort<T, TKey>
    nameWithType: TopologicalSort.Sort<T, TKey>
    fullName: PnP.Framework.Extensions.TopologicalSort.Sort<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.TopologicalSort.Sort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
    name: Sort(Of T, TKey)
    nameWithType: TopologicalSort.Sort(Of T, TKey)
    fullName: PnP.Framework.Extensions.TopologicalSort.Sort(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.TopologicalSort
  commentId: T:PnP.Framework.Extensions.TopologicalSort
  parent: PnP.Framework.Extensions
  name: TopologicalSort
  nameWithType: TopologicalSort
  fullName: PnP.Framework.Extensions.TopologicalSort
- uid: PnP.Framework.Extensions.TopologicalSort.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  commentId: M:PnP.Framework.Extensions.TopologicalSort.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  isExternal: true
  name: Sort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>, Boolean)
  nameWithType: TopologicalSort.Sort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>, Boolean)
  fullName: PnP.Framework.Extensions.TopologicalSort.Sort<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>, System.Collections.Generic.IEqualityComparer<T>, System.Boolean)
  nameWithType.vb: TopologicalSort.Sort(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)), IEqualityComparer(Of T), Boolean)
  fullName.vb: PnP.Framework.Extensions.TopologicalSort.Sort(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)), System.Collections.Generic.IEqualityComparer(Of T), System.Boolean)
  name.vb: Sort(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)), IEqualityComparer(Of T), Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.TopologicalSort.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
    name: Sort<T>
    nameWithType: TopologicalSort.Sort<T>
    fullName: PnP.Framework.Extensions.TopologicalSort.Sort<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.TopologicalSort.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
    name: Sort(Of T)
    nameWithType: TopologicalSort.Sort(Of T)
    fullName: PnP.Framework.Extensions.TopologicalSort.Sort(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.TopologicalSort.Group``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
  commentId: M:PnP.Framework.Extensions.TopologicalSort.Group``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
  isExternal: true
  name: Group<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<TKey>>, Func<T, TKey>, Boolean)
  nameWithType: TopologicalSort.Group<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<TKey>>, Func<T, TKey>, Boolean)
  fullName: PnP.Framework.Extensions.TopologicalSort.Group<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<TKey>>, System.Func<T, TKey>, System.Boolean)
  nameWithType.vb: TopologicalSort.Group(Of T, TKey)(IEnumerable(Of T), Func(Of T, IEnumerable(Of TKey)), Func(Of T, TKey), Boolean)
  fullName.vb: PnP.Framework.Extensions.TopologicalSort.Group(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of TKey)), System.Func(Of T, TKey), System.Boolean)
  name.vb: Group(Of T, TKey)(IEnumerable(Of T), Func(Of T, IEnumerable(Of TKey)), Func(Of T, TKey), Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.TopologicalSort.Group``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
    name: Group<T, TKey>
    nameWithType: TopologicalSort.Group<T, TKey>
    fullName: PnP.Framework.Extensions.TopologicalSort.Group<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.TopologicalSort.Group``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1},System.Boolean)
    name: Group(Of T, TKey)
    nameWithType: TopologicalSort.Group(Of T, TKey)
    fullName: PnP.Framework.Extensions.TopologicalSort.Group(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.TopologicalSort.Group``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  commentId: M:PnP.Framework.Extensions.TopologicalSort.Group``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  isExternal: true
  name: Group<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>, Boolean)
  nameWithType: TopologicalSort.Group<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>, Boolean)
  fullName: PnP.Framework.Extensions.TopologicalSort.Group<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>, System.Collections.Generic.IEqualityComparer<T>, System.Boolean)
  nameWithType.vb: TopologicalSort.Group(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)), IEqualityComparer(Of T), Boolean)
  fullName.vb: PnP.Framework.Extensions.TopologicalSort.Group(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)), System.Collections.Generic.IEqualityComparer(Of T), System.Boolean)
  name.vb: Group(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)), IEqualityComparer(Of T), Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.TopologicalSort.Group``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
    name: Group<T>
    nameWithType: TopologicalSort.Group<T>
    fullName: PnP.Framework.Extensions.TopologicalSort.Group<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.TopologicalSort.Group``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
    name: Group(Of T)
    nameWithType: TopologicalSort.Group(Of T)
    fullName: PnP.Framework.Extensions.TopologicalSort.Group(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  isExternal: true
  name: ToByteArray(Object)
  nameWithType: Extensions.ToByteArray(Object)
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions
  commentId: T:PnP.Framework.Modernization.Cache.Extensions
  parent: PnP.Framework.Modernization.Cache
  name: Extensions
  nameWithType: Extensions
  fullName: PnP.Framework.Modernization.Cache.Extensions
- uid: PnP.Framework.Extensions
  commentId: N:PnP.Framework.Extensions
  name: PnP.Framework.Extensions
  nameWithType: PnP.Framework.Extensions
  fullName: PnP.Framework.Extensions
- uid: PnP.Framework.Modernization.Cache
  commentId: N:PnP.Framework.Modernization.Cache
  name: PnP.Framework.Modernization.Cache
  nameWithType: PnP.Framework.Modernization.Cache
  fullName: PnP.Framework.Modernization.Cache
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Parent*
  commentId: Overload:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Parent
  name: Parent
  nameWithType: TreeNodeList<T>.Parent
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.Parent
  nameWithType.vb: TreeNodeList(Of T).Parent
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).Parent
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}
  commentId: T:PnP.Framework.Diagnostics.Tree.ITreeNode{`0}
  parent: PnP.Framework.Diagnostics.Tree
  definition: PnP.Framework.Diagnostics.Tree.ITreeNode`1
  name: ITreeNode<T>
  nameWithType: ITreeNode<T>
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode<T>
  nameWithType.vb: ITreeNode(Of T)
  fullName.vb: PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)
  name.vb: ITreeNode(Of T)
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
  commentId: T:PnP.Framework.Diagnostics.Tree.ITreeNode`1
  parent: PnP.Framework.Diagnostics.Tree
  name: ITreeNode<T>
  nameWithType: ITreeNode<T>
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNode<T>
  nameWithType.vb: ITreeNode(Of T)
  fullName.vb: PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)
  name.vb: ITreeNode(Of T)
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.#ctor*
  commentId: Overload:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.#ctor
  name: TreeNodeList
  nameWithType: TreeNodeList<T>.TreeNodeList
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.TreeNodeList
  nameWithType.vb: TreeNodeList(Of T).TreeNodeList
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).TreeNodeList
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Add*
  commentId: Overload:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Add
  name: Add
  nameWithType: TreeNodeList<T>.Add
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.Add
  nameWithType.vb: TreeNodeList(Of T).Add
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).Add
- uid: PnP.Framework.Diagnostics.Tree.ITreeNodeList{{T}}.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  commentId: M:PnP.Framework.Diagnostics.Tree.ITreeNodeList{`0}.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  parent: PnP.Framework.Diagnostics.Tree.ITreeNodeList{{T}}
  definition: PnP.Framework.Diagnostics.Tree.ITreeNodeList`1.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  name: Add(ITreeNode<T>)
  nameWithType: ITreeNodeList<T>.Add(ITreeNode<T>)
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNodeList<T>.Add(PnP.Framework.Diagnostics.Tree.ITreeNode<T>)
  nameWithType.vb: ITreeNodeList(Of T).Add(ITreeNode(Of T))
  fullName.vb: PnP.Framework.Diagnostics.Tree.ITreeNodeList(Of T).Add(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: Add(ITreeNode(Of T))
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNodeList`1.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
    name: Add
    nameWithType: ITreeNodeList<T>.Add
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNodeList<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNodeList`1.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
    name: Add
    nameWithType: ITreeNodeList(Of T).Add
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNodeList(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.ITreeNodeList`1.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  commentId: M:PnP.Framework.Diagnostics.Tree.ITreeNodeList`1.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  name: Add(ITreeNode<T>)
  nameWithType: ITreeNodeList<T>.Add(ITreeNode<T>)
  fullName: PnP.Framework.Diagnostics.Tree.ITreeNodeList<T>.Add(PnP.Framework.Diagnostics.Tree.ITreeNode<T>)
  nameWithType.vb: ITreeNodeList(Of T).Add(ITreeNode(Of T))
  fullName.vb: PnP.Framework.Diagnostics.Tree.ITreeNodeList(Of T).Add(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: Add(ITreeNode(Of T))
  spec.csharp:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNodeList`1.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
    name: Add
    nameWithType: ITreeNodeList<T>.Add
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNodeList<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNodeList`1.Add(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
    name: Add
    nameWithType: ITreeNodeList(Of T).Add
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNodeList(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Remove*
  commentId: Overload:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.Remove
  name: Remove
  nameWithType: TreeNodeList<T>.Remove
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.Remove
  nameWithType.vb: TreeNodeList(Of T).Remove
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).Remove
- uid: System.Collections.Generic.ICollection{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}.Remove(PnP.Framework.Diagnostics.Tree.ITreeNode{{T}})
  commentId: M:System.Collections.Generic.ICollection{PnP.Framework.Diagnostics.Tree.ITreeNode{`0}}.Remove(PnP.Framework.Diagnostics.Tree.ITreeNode{`0})
  parent: System.Collections.Generic.ICollection{PnP.Framework.Diagnostics.Tree.ITreeNode{{T}}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(ITreeNode<T>)
  nameWithType: ICollection<ITreeNode<T>>.Remove(ITreeNode<T>)
  fullName: System.Collections.Generic.ICollection<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Remove(PnP.Framework.Diagnostics.Tree.ITreeNode<T>)
  nameWithType.vb: ICollection(Of ITreeNode(Of T)).Remove(ITreeNode(Of T))
  fullName.vb: System.Collections.Generic.ICollection(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Remove(PnP.Framework.Diagnostics.Tree.ITreeNode(Of T))
  name.vb: Remove(ITreeNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<ITreeNode<T>>.Remove
    fullName: System.Collections.Generic.ICollection<PnP.Framework.Diagnostics.Tree.ITreeNode<T>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of ITreeNode(Of T)).Remove
    fullName: System.Collections.Generic.ICollection(Of PnP.Framework.Diagnostics.Tree.ITreeNode(Of T)).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Diagnostics.Tree.ITreeNode`1
    name: ITreeNode
    nameWithType: ITreeNode
    fullName: PnP.Framework.Diagnostics.Tree.ITreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  commentId: E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  parent: System.ComponentModel.INotifyPropertyChanged
  isExternal: true
  name: PropertyChanged
  nameWithType: INotifyPropertyChanged.PropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: System.ComponentModel.PropertyChangedEventHandler
  commentId: T:System.ComponentModel.PropertyChangedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.OnPropertyChanged*
  commentId: Overload:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.OnPropertyChanged
  name: OnPropertyChanged
  nameWithType: TreeNodeList<T>.OnPropertyChanged
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.OnPropertyChanged
  nameWithType.vb: TreeNodeList(Of T).OnPropertyChanged
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).OnPropertyChanged
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Diagnostics.Tree.TreeNodeList`1.ToString*
  commentId: Overload:PnP.Framework.Diagnostics.Tree.TreeNodeList`1.ToString
  name: ToString
  nameWithType: TreeNodeList<T>.ToString
  fullName: PnP.Framework.Diagnostics.Tree.TreeNodeList<T>.ToString
  nameWithType.vb: TreeNodeList(Of T).ToString
  fullName.vb: PnP.Framework.Diagnostics.Tree.TreeNodeList(Of T).ToString

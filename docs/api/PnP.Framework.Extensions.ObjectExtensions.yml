### YamlMime:ManagedReference
items:
- uid: PnP.Framework.Extensions.ObjectExtensions
  commentId: T:PnP.Framework.Extensions.ObjectExtensions
  id: ObjectExtensions
  parent: PnP.Framework.Extensions
  children:
  - PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  - PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  - PnP.Framework.Extensions.ObjectExtensions.NullIfEmpty(System.String)
  - PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  - PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  langs:
  - csharp
  - vb
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: PnP.Framework.Extensions.ObjectExtensions
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ObjectExtensions
    path: ../src/lib/PnP.Framework/Extensions/ObjectExtensions.cs
    startLine: 10
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Extensions
  summary: "\nProvide general purpose extension methods\n"
  example: []
  syntax:
    content: public static class ObjectExtensions
    content.vb: Public Module ObjectExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  id: Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: PnP.Framework.Extensions.ObjectExtensions
  langs:
  - csharp
  - vb
  name: Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>(TObject, System.Linq.Expressions.Expression<System.Func<TObject, T>>, T, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Set
    path: ../src/lib/PnP.Framework/Extensions/ObjectExtensions.cs
    startLine: 24
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Extensions
  summary: "\nSet an object field or property and returns if the value was changed.\n"
  example: []
  syntax:
    content: public static bool Set<TObject, T>(this TObject target, Expression<Func<TObject, T>> propertyToSet, T valueToSet, bool allowNull = true, bool allowEmpty = true)
    parameters:
    - id: target
      type: '{TObject}'
      description: 'target object '
    - id: propertyToSet
      type: System.Linq.Expressions.Expression{System.Func{{TObject},{T}}}
      description: Expression to the property or field of the object
    - id: valueToSet
      type: '{T}'
      description: new value to set
    - id: allowNull
      type: System.Boolean
      description: continue with set operation is null value is specified
    - id: allowEmpty
      type: System.Boolean
      description: continue with set operation is null or empty value is specified
    typeParameters:
    - id: TObject
      description: Type of the target object
    - id: T
      description: T of the property
    return:
      type: System.Boolean
      description: <code>true</code> if the value has changed, otherwise <code>false</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Set(Of TObject, T)(target As TObject, propertyToSet As Expression(Of Func(Of TObject, T)), valueToSet As T, allowNull As Boolean = True, allowEmpty As Boolean = True) As Boolean
  overload: PnP.Framework.Extensions.ObjectExtensions.Set*
  nameWithType.vb: ObjectExtensions.Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)(TObject, System.Linq.Expressions.Expression(Of System.Func(Of TObject, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
- uid: PnP.Framework.Extensions.ObjectExtensions.NullIfEmpty(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.NullIfEmpty(System.String)
  id: NullIfEmpty(System.String)
  isExtensionMethod: true
  parent: PnP.Framework.Extensions.ObjectExtensions
  langs:
  - csharp
  - vb
  name: NullIfEmpty(String)
  nameWithType: ObjectExtensions.NullIfEmpty(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.NullIfEmpty(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: NullIfEmpty
    path: ../src/lib/PnP.Framework/Extensions/ObjectExtensions.cs
    startLine: 129
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Extensions
  summary: "\nNullify a string when it&apos;s an empty one\n"
  example: []
  syntax:
    content: public static string NullIfEmpty(this string value)
    parameters:
    - id: value
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NullIfEmpty(value As String) As String
  overload: PnP.Framework.Extensions.ObjectExtensions.NullIfEmpty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  id: GetPublicInstancePropertyValue(System.Object,System.String)
  isExtensionMethod: true
  parent: PnP.Framework.Extensions.ObjectExtensions
  langs:
  - csharp
  - vb
  name: GetPublicInstancePropertyValue(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetPublicInstancePropertyValue
    path: ../src/lib/PnP.Framework/Extensions/ObjectExtensions.cs
    startLine: 140
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Extensions
  summary: "\nRetrieves the value of a public, instance property \n"
  example: []
  syntax:
    content: public static object GetPublicInstancePropertyValue(this object source, string propertyName)
    parameters:
    - id: source
      type: System.Object
      description: The source object
    - id: propertyName
      type: System.String
      description: The property name, case insensitive
    return:
      type: System.Object
      description: The property value, if any
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPublicInstancePropertyValue(source As Object, propertyName As String) As Object
  overload: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  id: GetPublicInstanceProperty(System.Object,System.String)
  isExtensionMethod: true
  parent: PnP.Framework.Extensions.ObjectExtensions
  langs:
  - csharp
  - vb
  name: GetPublicInstanceProperty(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetPublicInstanceProperty
    path: ../src/lib/PnP.Framework/Extensions/ObjectExtensions.cs
    startLine: 155
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Extensions
  summary: "\nRetrieves a public, instance property \n"
  example: []
  syntax:
    content: public static PropertyInfo GetPublicInstanceProperty(this object source, string propertyName)
    parameters:
    - id: source
      type: System.Object
      description: The source object
    - id: propertyName
      type: System.String
      description: The property name, case insensitive
    return:
      type: System.Reflection.PropertyInfo
      description: The property, if any
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPublicInstanceProperty(source As Object, propertyName As String) As PropertyInfo
  overload: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  id: SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  isExtensionMethod: true
  parent: PnP.Framework.Extensions.ObjectExtensions
  langs:
  - csharp
  - vb
  name: SetPublicInstancePropertyValue(Object, String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(Object, String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object, System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/ObjectExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetPublicInstancePropertyValue
    path: ../src/lib/PnP.Framework/Extensions/ObjectExtensions.cs
    startLine: 169
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Extensions
  summary: "\nSets the value of a public, instance property \n"
  example: []
  syntax:
    content: public static void SetPublicInstancePropertyValue(this object source, string propertyName, object value)
    parameters:
    - id: source
      type: System.Object
      description: The source object
    - id: propertyName
      type: System.String
      description: The property name, case insensitive
    - id: value
      type: System.Object
      description: The value to set
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetPublicInstancePropertyValue(source As Object, propertyName As String, value As Object)
  overload: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: PnP.Framework.Extensions
  commentId: N:PnP.Framework.Extensions
  name: PnP.Framework.Extensions
  nameWithType: PnP.Framework.Extensions
  fullName: PnP.Framework.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: PnP.Framework.Extensions.ObjectExtensions.Set*
  commentId: Overload:PnP.Framework.Extensions.ObjectExtensions.Set
  name: Set
  nameWithType: ObjectExtensions.Set
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set
- uid: '{TObject}'
  commentId: '!:TObject'
  definition: TObject
  name: TObject
  nameWithType: TObject
  fullName: TObject
- uid: System.Linq.Expressions.Expression{System.Func{{TObject},{T}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TObject, T>>
  nameWithType: Expression<Func<TObject, T>>
  fullName: System.Linq.Expressions.Expression<System.Func<TObject, T>>
  nameWithType.vb: Expression(Of Func(Of TObject, T))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TObject, T))
  name.vb: Expression(Of Func(Of TObject, T))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TObject
  commentId: '!:TObject'
  name: TObject
  nameWithType: TObject
  fullName: TObject
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: PnP.Framework.Extensions.ObjectExtensions.NullIfEmpty*
  commentId: Overload:PnP.Framework.Extensions.ObjectExtensions.NullIfEmpty
  name: NullIfEmpty
  nameWithType: ObjectExtensions.NullIfEmpty
  fullName: PnP.Framework.Extensions.ObjectExtensions.NullIfEmpty
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue*
  commentId: Overload:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  name: GetPublicInstancePropertyValue
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty*
  commentId: Overload:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  name: GetPublicInstanceProperty
  nameWithType: ObjectExtensions.GetPublicInstanceProperty
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue*
  commentId: Overload:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  name: SetPublicInstancePropertyValue
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue

### YamlMime:ManagedReference
items:
- uid: PnP.Framework.Modernization.Cache.Extensions
  commentId: T:PnP.Framework.Modernization.Cache.Extensions
  id: Extensions
  parent: PnP.Framework.Modernization.Cache
  children:
  - PnP.Framework.Modernization.Cache.Extensions.FromByteArray``1(System.Byte[])
  - PnP.Framework.Modernization.Cache.Extensions.Get``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)
  - PnP.Framework.Modernization.Cache.Extensions.GetAndInitialize``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)
  - PnP.Framework.Modernization.Cache.Extensions.GetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)
  - PnP.Framework.Modernization.Cache.Extensions.Set``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
  - PnP.Framework.Modernization.Cache.Extensions.SetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)
  - PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: Extensions
  fullName: PnP.Framework.Modernization.Cache.Extensions
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Extensions
    path: ../src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
    startLine: 12
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Cache
  summary: "\nExtensions methods to make it easier to work with the distributed cache\n"
  example: []
  syntax:
    content: public static class Extensions
    content.vb: Public Module Extensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  id: ToByteArray(System.Object)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Cache.Extensions
  langs:
  - csharp
  - vb
  name: ToByteArray(Object)
  nameWithType: Extensions.ToByteArray(Object)
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToByteArray
    path: ../src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
    startLine: 19
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Cache
  summary: "\nConverts an object into a bytearray\n"
  example: []
  syntax:
    content: public static byte[] ToByteArray(this object obj)
    parameters:
    - id: obj
      type: System.Object
      description: Object to return as byte array
    return:
      type: System.Byte[]
      description: byte array
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToByteArray(obj As Object) As Byte()
  overload: PnP.Framework.Modernization.Cache.Extensions.ToByteArray*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.Modernization.Cache.Extensions.FromByteArray``1(System.Byte[])
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.FromByteArray``1(System.Byte[])
  id: FromByteArray``1(System.Byte[])
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Cache.Extensions
  langs:
  - csharp
  - vb
  name: FromByteArray<T>(Byte[])
  nameWithType: Extensions.FromByteArray<T>(Byte[])
  fullName: PnP.Framework.Modernization.Cache.Extensions.FromByteArray<T>(System.Byte[])
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: FromByteArray
    path: ../src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
    startLine: 47
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Cache
  summary: "\nConverts a byte array to an object\n"
  example: []
  syntax:
    content: >-
      public static T FromByteArray<T>(this byte[] byteArray)
          where T : class
    parameters:
    - id: byteArray
      type: System.Byte[]
      description: Byte array
    typeParameters:
    - id: T
      description: Type of the object to return
    return:
      type: '{T}'
      description: Object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FromByteArray(Of T As Class)(byteArray As Byte()) As T
  overload: PnP.Framework.Modernization.Cache.Extensions.FromByteArray*
  nameWithType.vb: Extensions.FromByteArray(Of T)(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.Modernization.Cache.Extensions.FromByteArray(Of T)(System.Byte())
  name.vb: FromByteArray(Of T)(Byte())
- uid: PnP.Framework.Modernization.Cache.Extensions.SetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.SetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)
  id: SetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Cache.Extensions
  langs:
  - csharp
  - vb
  name: SetAsync<T>(IDistributedCache, String, T, DistributedCacheEntryOptions, CancellationToken)
  nameWithType: Extensions.SetAsync<T>(IDistributedCache, String, T, DistributedCacheEntryOptions, CancellationToken)
  fullName: PnP.Framework.Modernization.Cache.Extensions.SetAsync<T>(Microsoft.Extensions.Caching.Distributed.IDistributedCache, System.String, T, Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SetAsync
    path: ../src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
    startLine: 70
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Cache
  summary: "\nSets an object of type T in connected cache system\n"
  example: []
  syntax:
    content: >-
      public static async Task SetAsync<T>(this IDistributedCache distributedCache, string key, T value, DistributedCacheEntryOptions options, CancellationToken token = default(CancellationToken))
          where T : class
    parameters:
    - id: distributedCache
      type: Microsoft.Extensions.Caching.Distributed.IDistributedCache
      description: Connected cache system
    - id: key
      type: System.String
      description: Key of the object in the cache
    - id: value
      type: '{T}'
      description: Value to be cached
    - id: options
      type: Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions
      description: Caching options
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    typeParameters:
    - id: T
      description: Type of the object to cache
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetAsync(Of T As Class)(distributedCache As IDistributedCache, key As String, value As T, options As DistributedCacheEntryOptions, token As CancellationToken = Nothing) As Task
  overload: PnP.Framework.Modernization.Cache.Extensions.SetAsync*
  nameWithType.vb: Extensions.SetAsync(Of T)(IDistributedCache, String, T, DistributedCacheEntryOptions, CancellationToken)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.Modernization.Cache.Extensions.SetAsync(Of T)(Microsoft.Extensions.Caching.Distributed.IDistributedCache, System.String, T, Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions, System.Threading.CancellationToken)
  name.vb: SetAsync(Of T)(IDistributedCache, String, T, DistributedCacheEntryOptions, CancellationToken)
- uid: PnP.Framework.Modernization.Cache.Extensions.Set``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.Set``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
  id: Set``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Cache.Extensions
  langs:
  - csharp
  - vb
  name: Set<T>(IDistributedCache, String, T, DistributedCacheEntryOptions)
  nameWithType: Extensions.Set<T>(IDistributedCache, String, T, DistributedCacheEntryOptions)
  fullName: PnP.Framework.Modernization.Cache.Extensions.Set<T>(Microsoft.Extensions.Caching.Distributed.IDistributedCache, System.String, T, Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Set
    path: ../src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
    startLine: 83
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Cache
  summary: "\nSets an object of type T in connected cache system\n"
  example: []
  syntax:
    content: >-
      public static void Set<T>(this IDistributedCache distributedCache, string key, T value, DistributedCacheEntryOptions options)
          where T : class
    parameters:
    - id: distributedCache
      type: Microsoft.Extensions.Caching.Distributed.IDistributedCache
      description: Connected cache system
    - id: key
      type: System.String
      description: Key of the object in the cache
    - id: value
      type: '{T}'
      description: Value to be cached
    - id: options
      type: Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions
      description: Caching options
    typeParameters:
    - id: T
      description: Type of the object to cache
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Set(Of T As Class)(distributedCache As IDistributedCache, key As String, value As T, options As DistributedCacheEntryOptions)
  overload: PnP.Framework.Modernization.Cache.Extensions.Set*
  nameWithType.vb: Extensions.Set(Of T)(IDistributedCache, String, T, DistributedCacheEntryOptions)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.Modernization.Cache.Extensions.Set(Of T)(Microsoft.Extensions.Caching.Distributed.IDistributedCache, System.String, T, Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
  name.vb: Set(Of T)(IDistributedCache, String, T, DistributedCacheEntryOptions)
- uid: PnP.Framework.Modernization.Cache.Extensions.GetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.GetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)
  id: GetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Cache.Extensions
  langs:
  - csharp
  - vb
  name: GetAsync<T>(IDistributedCache, String)
  nameWithType: Extensions.GetAsync<T>(IDistributedCache, String)
  fullName: PnP.Framework.Modernization.Cache.Extensions.GetAsync<T>(Microsoft.Extensions.Caching.Distributed.IDistributedCache, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetAsync
    path: ../src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
    startLine: 95
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Cache
  summary: "\nGets an object from the connected cache system\n"
  example: []
  syntax:
    content: >-
      public static async Task<T> GetAsync<T>(this IDistributedCache distributedCache, string key)
          where T : class
    parameters:
    - id: distributedCache
      type: Microsoft.Extensions.Caching.Distributed.IDistributedCache
      description: Connected cache system
    - id: key
      type: System.String
      description: Key of the object in the cache
    typeParameters:
    - id: T
      description: Type of the object to return from cache
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Object of the type T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAsync(Of T As Class)(distributedCache As IDistributedCache, key As String) As Task(Of T)
  overload: PnP.Framework.Modernization.Cache.Extensions.GetAsync*
  nameWithType.vb: Extensions.GetAsync(Of T)(IDistributedCache, String)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.Modernization.Cache.Extensions.GetAsync(Of T)(Microsoft.Extensions.Caching.Distributed.IDistributedCache, System.String)
  name.vb: GetAsync(Of T)(IDistributedCache, String)
- uid: PnP.Framework.Modernization.Cache.Extensions.Get``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.Get``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)
  id: Get``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Cache.Extensions
  langs:
  - csharp
  - vb
  name: Get<T>(IDistributedCache, String)
  nameWithType: Extensions.Get<T>(IDistributedCache, String)
  fullName: PnP.Framework.Modernization.Cache.Extensions.Get<T>(Microsoft.Extensions.Caching.Distributed.IDistributedCache, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Get
    path: ../src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
    startLine: 108
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Cache
  summary: "\nGets an object from the connected cache system\n"
  example: []
  syntax:
    content: >-
      public static T Get<T>(this IDistributedCache distributedCache, string key)
          where T : class
    parameters:
    - id: distributedCache
      type: Microsoft.Extensions.Caching.Distributed.IDistributedCache
      description: Connected cache system
    - id: key
      type: System.String
      description: Key of the object in the cache
    typeParameters:
    - id: T
      description: Type of the object to return from cache
    return:
      type: '{T}'
      description: Object of the type T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Get(Of T As Class)(distributedCache As IDistributedCache, key As String) As T
  overload: PnP.Framework.Modernization.Cache.Extensions.Get*
  nameWithType.vb: Extensions.Get(Of T)(IDistributedCache, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.Modernization.Cache.Extensions.Get(Of T)(Microsoft.Extensions.Caching.Distributed.IDistributedCache, System.String)
  name.vb: Get(Of T)(IDistributedCache, String)
- uid: PnP.Framework.Modernization.Cache.Extensions.GetAndInitialize``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.GetAndInitialize``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)
  id: GetAndInitialize``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Cache.Extensions
  langs:
  - csharp
  - vb
  name: GetAndInitialize<T>(IDistributedCache, String)
  nameWithType: Extensions.GetAndInitialize<T>(IDistributedCache, String)
  fullName: PnP.Framework.Modernization.Cache.Extensions.GetAndInitialize<T>(Microsoft.Extensions.Caching.Distributed.IDistributedCache, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetAndInitialize
    path: ../src/lib/PnP.Framework/Modernization/Cache/Extensions.cs
    startLine: 121
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Cache
  summary: "\nGets an object from the connected cache system. If not cached the object will be created\n"
  example: []
  syntax:
    content: >-
      public static T GetAndInitialize<T>(this IDistributedCache distributedCache, string key)
          where T : class, new()
    parameters:
    - id: distributedCache
      type: Microsoft.Extensions.Caching.Distributed.IDistributedCache
      description: Connected cache system
    - id: key
      type: System.String
      description: Key of the object in the cache
    typeParameters:
    - id: T
      description: Type of the object to return from cache
    return:
      type: '{T}'
      description: Object of the type T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAndInitialize(Of T As {Class, New})(distributedCache As IDistributedCache, key As String) As T
  overload: PnP.Framework.Modernization.Cache.Extensions.GetAndInitialize*
  nameWithType.vb: Extensions.GetAndInitialize(Of T)(IDistributedCache, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PnP.Framework.Modernization.Cache.Extensions.GetAndInitialize(Of T)(Microsoft.Extensions.Caching.Distributed.IDistributedCache, System.String)
  name.vb: GetAndInitialize(Of T)(IDistributedCache, String)
references:
- uid: PnP.Framework.Modernization.Cache
  commentId: N:PnP.Framework.Modernization.Cache
  name: PnP.Framework.Modernization.Cache
  nameWithType: PnP.Framework.Modernization.Cache
  fullName: PnP.Framework.Modernization.Cache
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray*
  commentId: Overload:PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  name: ToByteArray
  nameWithType: Extensions.ToByteArray
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: PnP.Framework.Modernization.Cache.Extensions.FromByteArray*
  commentId: Overload:PnP.Framework.Modernization.Cache.Extensions.FromByteArray
  name: FromByteArray
  nameWithType: Extensions.FromByteArray
  fullName: PnP.Framework.Modernization.Cache.Extensions.FromByteArray
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: PnP.Framework.Modernization.Cache.Extensions.SetAsync*
  commentId: Overload:PnP.Framework.Modernization.Cache.Extensions.SetAsync
  name: SetAsync
  nameWithType: Extensions.SetAsync
  fullName: PnP.Framework.Modernization.Cache.Extensions.SetAsync
- uid: Microsoft.Extensions.Caching.Distributed.IDistributedCache
  commentId: T:Microsoft.Extensions.Caching.Distributed.IDistributedCache
  parent: Microsoft.Extensions.Caching.Distributed
  isExternal: true
  name: IDistributedCache
  nameWithType: IDistributedCache
  fullName: Microsoft.Extensions.Caching.Distributed.IDistributedCache
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions
  commentId: T:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions
  parent: Microsoft.Extensions.Caching.Distributed
  isExternal: true
  name: DistributedCacheEntryOptions
  nameWithType: DistributedCacheEntryOptions
  fullName: Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Extensions.Caching.Distributed
  commentId: N:Microsoft.Extensions.Caching.Distributed
  isExternal: true
  name: Microsoft.Extensions.Caching.Distributed
  nameWithType: Microsoft.Extensions.Caching.Distributed
  fullName: Microsoft.Extensions.Caching.Distributed
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: PnP.Framework.Modernization.Cache.Extensions.Set*
  commentId: Overload:PnP.Framework.Modernization.Cache.Extensions.Set
  name: Set
  nameWithType: Extensions.Set
  fullName: PnP.Framework.Modernization.Cache.Extensions.Set
- uid: PnP.Framework.Modernization.Cache.Extensions.GetAsync*
  commentId: Overload:PnP.Framework.Modernization.Cache.Extensions.GetAsync
  name: GetAsync
  nameWithType: Extensions.GetAsync
  fullName: PnP.Framework.Modernization.Cache.Extensions.GetAsync
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions.Get*
  commentId: Overload:PnP.Framework.Modernization.Cache.Extensions.Get
  name: Get
  nameWithType: Extensions.Get
  fullName: PnP.Framework.Modernization.Cache.Extensions.Get
- uid: PnP.Framework.Modernization.Cache.Extensions.GetAndInitialize*
  commentId: Overload:PnP.Framework.Modernization.Cache.Extensions.GetAndInitialize
  name: GetAndInitialize
  nameWithType: Extensions.GetAndInitialize
  fullName: PnP.Framework.Modernization.Cache.Extensions.GetAndInitialize

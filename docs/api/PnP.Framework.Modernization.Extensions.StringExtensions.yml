### YamlMime:ManagedReference
items:
- uid: PnP.Framework.Modernization.Extensions.StringExtensions
  commentId: T:PnP.Framework.Modernization.Extensions.StringExtensions
  id: StringExtensions
  parent: PnP.Framework.Modernization.Extensions
  children:
  - PnP.Framework.Modernization.Extensions.StringExtensions.CleanForJSON(System.String)
  - PnP.Framework.Modernization.Extensions.StringExtensions.ContainsIgnoringCasing(System.String,System.String,System.StringComparison)
  - PnP.Framework.Modernization.Extensions.StringExtensions.GetBaseUrl(System.String)
  - PnP.Framework.Modernization.Extensions.StringExtensions.GetTypeShort(System.String)
  - PnP.Framework.Modernization.Extensions.StringExtensions.GetUserName(System.String)
  - PnP.Framework.Modernization.Extensions.StringExtensions.InferClassNameFromNameSpace(System.String)
  - PnP.Framework.Modernization.Extensions.StringExtensions.PrependIfNotNull(System.String,System.String)
  - PnP.Framework.Modernization.Extensions.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)
  - PnP.Framework.Modernization.Extensions.StringExtensions.StripRelativeUrlSectionString(System.String)
  langs:
  - csharp
  - vb
  name: StringExtensions
  nameWithType: StringExtensions
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: StringExtensions
    path: ../src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
    startLine: 9
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Extensions
  summary: "\nClass holding extension methods on the System.string class\n"
  example: []
  syntax:
    content: public static class StringExtensions
    content.vb: Public Module StringExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.ContainsIgnoringCasing(System.String,System.String,System.StringComparison)
  commentId: M:PnP.Framework.Modernization.Extensions.StringExtensions.ContainsIgnoringCasing(System.String,System.String,System.StringComparison)
  id: ContainsIgnoringCasing(System.String,System.String,System.StringComparison)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ContainsIgnoringCasing(String, String, StringComparison)
  nameWithType: StringExtensions.ContainsIgnoringCasing(String, String, StringComparison)
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.ContainsIgnoringCasing(System.String, System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ContainsIgnoringCasing
    path: ../src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
    startLine: 18
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Extensions
  summary: "\nDetermines if a string exists in another string regardless of casing\n"
  example: []
  syntax:
    content: public static bool ContainsIgnoringCasing(this string value, string comparedWith, StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase)
    parameters:
    - id: value
      type: System.String
      description: original string
    - id: comparedWith
      type: System.String
      description: string to compare with
    - id: stringComparison
      type: System.StringComparison
      description: optional comparison mode
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsIgnoringCasing(value As String, comparedWith As String, stringComparison As StringComparison = StringComparison.InvariantCultureIgnoreCase) As Boolean
  overload: PnP.Framework.Modernization.Extensions.StringExtensions.ContainsIgnoringCasing*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.PrependIfNotNull(System.String,System.String)
  commentId: M:PnP.Framework.Modernization.Extensions.StringExtensions.PrependIfNotNull(System.String,System.String)
  id: PrependIfNotNull(System.String,System.String)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: PrependIfNotNull(String, String)
  nameWithType: StringExtensions.PrependIfNotNull(String, String)
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.PrependIfNotNull(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: PrependIfNotNull
    path: ../src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
    startLine: 29
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Extensions
  summary: "\nPrepends string to another including null checking\n"
  example: []
  syntax:
    content: public static string PrependIfNotNull(this string value, string prependString)
    parameters:
    - id: value
      type: System.String
      description: ''
    - id: prependString
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PrependIfNotNull(value As String, prependString As String) As String
  overload: PnP.Framework.Modernization.Extensions.StringExtensions.PrependIfNotNull*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.StripRelativeUrlSectionString(System.String)
  commentId: M:PnP.Framework.Modernization.Extensions.StringExtensions.StripRelativeUrlSectionString(System.String)
  id: StripRelativeUrlSectionString(System.String)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: StripRelativeUrlSectionString(String)
  nameWithType: StringExtensions.StripRelativeUrlSectionString(String)
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.StripRelativeUrlSectionString(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: StripRelativeUrlSectionString
    path: ../src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
    startLine: 44
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Extensions
  summary: "\nRemoves a relative section of by string where context not available\n"
  example: []
  syntax:
    content: public static string StripRelativeUrlSectionString(this string value)
    parameters:
    - id: value
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StripRelativeUrlSectionString(value As String) As String
  overload: PnP.Framework.Modernization.Extensions.StringExtensions.StripRelativeUrlSectionString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.GetBaseUrl(System.String)
  commentId: M:PnP.Framework.Modernization.Extensions.StringExtensions.GetBaseUrl(System.String)
  id: GetBaseUrl(System.String)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: GetBaseUrl(String)
  nameWithType: StringExtensions.GetBaseUrl(String)
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.GetBaseUrl(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetBaseUrl
    path: ../src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
    startLine: 81
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Extensions
  summary: "\nGets base url from string\n"
  example: []
  syntax:
    content: public static string GetBaseUrl(this string url)
    parameters:
    - id: url
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetBaseUrl(url As String) As String
  overload: PnP.Framework.Modernization.Extensions.StringExtensions.GetBaseUrl*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.GetTypeShort(System.String)
  commentId: M:PnP.Framework.Modernization.Extensions.StringExtensions.GetTypeShort(System.String)
  id: GetTypeShort(System.String)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: GetTypeShort(String)
  nameWithType: StringExtensions.GetTypeShort(String)
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.GetTypeShort(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetTypeShort
    path: ../src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
    startLine: 105
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Extensions
  summary: "\nGet type in short form\n"
  example: []
  syntax:
    content: public static string GetTypeShort(this string typeValue)
    parameters:
    - id: typeValue
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTypeShort(typeValue As String) As String
  overload: PnP.Framework.Modernization.Extensions.StringExtensions.GetTypeShort*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.GetUserName(System.String)
  commentId: M:PnP.Framework.Modernization.Extensions.StringExtensions.GetUserName(System.String)
  id: GetUserName(System.String)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: GetUserName(String)
  nameWithType: StringExtensions.GetUserName(String)
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.GetUserName(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetUserName
    path: ../src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
    startLine: 122
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Extensions
  summary: "\nGets the user name from a provided login name\n"
  example: []
  syntax:
    content: public static string GetUserName(this string loginName)
    parameters:
    - id: loginName
      type: System.String
      description: Login name
    return:
      type: System.String
      description: User name
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetUserName(loginName As String) As String
  overload: PnP.Framework.Modernization.Extensions.StringExtensions.GetUserName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.InferClassNameFromNameSpace(System.String)
  commentId: M:PnP.Framework.Modernization.Extensions.StringExtensions.InferClassNameFromNameSpace(System.String)
  id: InferClassNameFromNameSpace(System.String)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: InferClassNameFromNameSpace(String)
  nameWithType: StringExtensions.InferClassNameFromNameSpace(String)
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.InferClassNameFromNameSpace(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: InferClassNameFromNameSpace
    path: ../src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
    startLine: 143
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Extensions
  summary: "\nGets classname from type\n"
  example: []
  syntax:
    content: public static string InferClassNameFromNameSpace(this string typeName)
    parameters:
    - id: typeName
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InferClassNameFromNameSpace(typeName As String) As String
  overload: PnP.Framework.Modernization.Extensions.StringExtensions.InferClassNameFromNameSpace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)
  commentId: M:PnP.Framework.Modernization.Extensions.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)
  id: Replace(System.String,System.String,System.String,System.StringComparison)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: Replace(String, String, String, StringComparison)
  nameWithType: StringExtensions.Replace(String, String, String, StringComparison)
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.Replace(System.String, System.String, System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Replace
    path: ../src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
    startLine: 173
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Extensions
  summary: "\nReturns a new string in which all occurrences of a specified string in the current instance are replaced with another \nspecified string according the type of search to use for the specified string.\nCopied from https://stackoverflow.com/questions/6275980/string-replace-ignoring-case\n"
  example: []
  syntax:
    content: public static string Replace(this string str, string oldValue, string newValue, StringComparison comparisonType)
    parameters:
    - id: str
      type: System.String
      description: The string performing the replace method.
    - id: oldValue
      type: System.String
      description: The string to be replaced.
    - id: newValue
      type: System.String
      description: "The string replace all occurrences of <code data-dev-comment-type=\"paramref\" class=\"paramref\">oldValue</code>. \nIf value is equal to <code>null</code>, than all occurrences of <code data-dev-comment-type=\"paramref\" class=\"paramref\">oldValue</code> will be removed from the <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>."
    - id: comparisonType
      type: System.StringComparison
      description: One of the enumeration values that specifies the rules for the search.
    return:
      type: System.String
      description: "A string that is equivalent to the current string except that all instances of <code data-dev-comment-type=\"paramref\" class=\"paramref\">oldValue</code> are replaced with <code data-dev-comment-type=\"paramref\" class=\"paramref\">newValue</code>. \nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">oldValue</code> is not found in the current instance, the method returns the current instance unchanged."
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Replace(str As String, oldValue As String, newValue As String, comparisonType As StringComparison) As String
  overload: PnP.Framework.Modernization.Extensions.StringExtensions.Replace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.CleanForJSON(System.String)
  commentId: M:PnP.Framework.Modernization.Extensions.StringExtensions.CleanForJSON(System.String)
  id: CleanForJSON(System.String)
  isExtensionMethod: true
  parent: PnP.Framework.Modernization.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: CleanForJSON(String)
  nameWithType: StringExtensions.CleanForJSON(String)
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.CleanForJSON(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CleanForJSON
    path: ../src/lib/PnP.Framework/Modernization/Extensions/StringExtensions.cs
    startLine: 254
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Modernization.Extensions
  summary: "\nPrepares a string for json inclusion\nCopied from https://stackoverflow.com/questions/1242118/how-to-escape-json-string\n"
  example: []
  syntax:
    content: public static string CleanForJSON(this string s)
    parameters:
    - id: s
      type: System.String
      description: string to prepare
    return:
      type: System.String
      description: json ready string
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CleanForJSON(s As String) As String
  overload: PnP.Framework.Modernization.Extensions.StringExtensions.CleanForJSON*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: PnP.Framework.Modernization.Extensions
  commentId: N:PnP.Framework.Modernization.Extensions
  name: PnP.Framework.Modernization.Extensions
  nameWithType: PnP.Framework.Modernization.Extensions
  fullName: PnP.Framework.Modernization.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.ContainsIgnoringCasing*
  commentId: Overload:PnP.Framework.Modernization.Extensions.StringExtensions.ContainsIgnoringCasing
  name: ContainsIgnoringCasing
  nameWithType: StringExtensions.ContainsIgnoringCasing
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.ContainsIgnoringCasing
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.PrependIfNotNull*
  commentId: Overload:PnP.Framework.Modernization.Extensions.StringExtensions.PrependIfNotNull
  name: PrependIfNotNull
  nameWithType: StringExtensions.PrependIfNotNull
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.PrependIfNotNull
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.StripRelativeUrlSectionString*
  commentId: Overload:PnP.Framework.Modernization.Extensions.StringExtensions.StripRelativeUrlSectionString
  name: StripRelativeUrlSectionString
  nameWithType: StringExtensions.StripRelativeUrlSectionString
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.StripRelativeUrlSectionString
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.GetBaseUrl*
  commentId: Overload:PnP.Framework.Modernization.Extensions.StringExtensions.GetBaseUrl
  name: GetBaseUrl
  nameWithType: StringExtensions.GetBaseUrl
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.GetBaseUrl
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.GetTypeShort*
  commentId: Overload:PnP.Framework.Modernization.Extensions.StringExtensions.GetTypeShort
  name: GetTypeShort
  nameWithType: StringExtensions.GetTypeShort
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.GetTypeShort
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.GetUserName*
  commentId: Overload:PnP.Framework.Modernization.Extensions.StringExtensions.GetUserName
  name: GetUserName
  nameWithType: StringExtensions.GetUserName
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.GetUserName
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.InferClassNameFromNameSpace*
  commentId: Overload:PnP.Framework.Modernization.Extensions.StringExtensions.InferClassNameFromNameSpace
  name: InferClassNameFromNameSpace
  nameWithType: StringExtensions.InferClassNameFromNameSpace
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.InferClassNameFromNameSpace
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.Replace*
  commentId: Overload:PnP.Framework.Modernization.Extensions.StringExtensions.Replace
  name: Replace
  nameWithType: StringExtensions.Replace
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.Replace
- uid: PnP.Framework.Modernization.Extensions.StringExtensions.CleanForJSON*
  commentId: Overload:PnP.Framework.Modernization.Extensions.StringExtensions.CleanForJSON
  name: CleanForJSON
  nameWithType: StringExtensions.CleanForJSON
  fullName: PnP.Framework.Modernization.Extensions.StringExtensions.CleanForJSON

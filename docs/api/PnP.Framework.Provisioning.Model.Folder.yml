### YamlMime:ManagedReference
items:
- uid: PnP.Framework.Provisioning.Model.Folder
  commentId: T:PnP.Framework.Provisioning.Model.Folder
  id: Folder
  parent: PnP.Framework.Provisioning.Model
  children:
  - PnP.Framework.Provisioning.Model.Folder.#ctor
  - PnP.Framework.Provisioning.Model.Folder.#ctor(System.String,System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Folder},PnP.Framework.Provisioning.Model.ObjectSecurity)
  - PnP.Framework.Provisioning.Model.Folder.ContentTypeID
  - PnP.Framework.Provisioning.Model.Folder.DefaultColumnValues
  - PnP.Framework.Provisioning.Model.Folder.Equals(PnP.Framework.Provisioning.Model.Folder)
  - PnP.Framework.Provisioning.Model.Folder.Equals(System.Object)
  - PnP.Framework.Provisioning.Model.Folder.Folders
  - PnP.Framework.Provisioning.Model.Folder.GetHashCode
  - PnP.Framework.Provisioning.Model.Folder.Name
  - PnP.Framework.Provisioning.Model.Folder.Properties
  - PnP.Framework.Provisioning.Model.Folder.PropertyBagEntries
  - PnP.Framework.Provisioning.Model.Folder.Security
  langs:
  - csharp
  - vb
  name: Folder
  nameWithType: Folder
  fullName: PnP.Framework.Provisioning.Model.Folder
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Folder
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
    startLine: 10
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nDefines a folder that will be provisioned into the target list/library\n"
  example: []
  syntax:
    content: 'public class Folder : BaseModel, IProvisioningTemplateDescendant, IEquatable<Folder>'
    content.vb: >-
      Public Class Folder
          Inherits BaseModel
          Implements IProvisioningTemplateDescendant, IEquatable(Of Folder)
  inheritance:
  - System.Object
  - PnP.Framework.Provisioning.Model.BaseModel
  implements:
  - PnP.Framework.Provisioning.Model.IProvisioningTemplateDescendant
  - System.IEquatable{PnP.Framework.Provisioning.Model.Folder}
  inheritedMembers:
  - PnP.Framework.Provisioning.Model.BaseModel.ParentTemplate
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - PnP.Framework.Provisioning.Model.Folder.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  - PnP.Framework.Provisioning.Model.Folder.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.Provisioning.Model.Folder,{T}}},{T},System.Boolean,System.Boolean)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  - System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: PnP.Framework.Provisioning.Model.Folder.Name
  commentId: P:PnP.Framework.Provisioning.Model.Folder.Name
  id: Name
  parent: PnP.Framework.Provisioning.Model.Folder
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Folder.Name
  fullName: PnP.Framework.Provisioning.Model.Folder.Name
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Name
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
    startLine: 25
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nThe Name of the Folder\n"
  example: []
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: PnP.Framework.Provisioning.Model.Folder.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Folder.Security
  commentId: P:PnP.Framework.Provisioning.Model.Folder.Security
  id: Security
  parent: PnP.Framework.Provisioning.Model.Folder
  langs:
  - csharp
  - vb
  name: Security
  nameWithType: Folder.Security
  fullName: PnP.Framework.Provisioning.Model.Folder.Security
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Security
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
    startLine: 30
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nDefines the security rules for the current Folder\n"
  example: []
  syntax:
    content: public ObjectSecurity Security { get; }
    parameters: []
    return:
      type: PnP.Framework.Provisioning.Model.ObjectSecurity
    content.vb: Public ReadOnly Property Security As ObjectSecurity
  overload: PnP.Framework.Provisioning.Model.Folder.Security*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PnP.Framework.Provisioning.Model.Folder.Folders
  commentId: P:PnP.Framework.Provisioning.Model.Folder.Folders
  id: Folders
  parent: PnP.Framework.Provisioning.Model.Folder
  langs:
  - csharp
  - vb
  name: Folders
  nameWithType: Folder.Folders
  fullName: PnP.Framework.Provisioning.Model.Folder.Folders
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Folders
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
    startLine: 50
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nDefines the child folders of the current Folder, if any\n"
  example: []
  syntax:
    content: public FolderCollection Folders { get; }
    parameters: []
    return:
      type: PnP.Framework.Provisioning.Model.FolderCollection
    content.vb: Public ReadOnly Property Folders As FolderCollection
  overload: PnP.Framework.Provisioning.Model.Folder.Folders*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PnP.Framework.Provisioning.Model.Folder.PropertyBagEntries
  commentId: P:PnP.Framework.Provisioning.Model.Folder.PropertyBagEntries
  id: PropertyBagEntries
  parent: PnP.Framework.Provisioning.Model.Folder
  langs:
  - csharp
  - vb
  name: PropertyBagEntries
  nameWithType: Folder.PropertyBagEntries
  fullName: PnP.Framework.Provisioning.Model.Folder.PropertyBagEntries
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: PropertyBagEntries
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
    startLine: 59
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nDefines the property bag properties for the current folder\n"
  example: []
  syntax:
    content: public PropertyBagEntryCollection PropertyBagEntries { get; }
    parameters: []
    return:
      type: PnP.Framework.Provisioning.Model.PropertyBagEntryCollection
    content.vb: Public ReadOnly Property PropertyBagEntries As PropertyBagEntryCollection
  overload: PnP.Framework.Provisioning.Model.Folder.PropertyBagEntries*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PnP.Framework.Provisioning.Model.Folder.DefaultColumnValues
  commentId: P:PnP.Framework.Provisioning.Model.Folder.DefaultColumnValues
  id: DefaultColumnValues
  parent: PnP.Framework.Provisioning.Model.Folder
  langs:
  - csharp
  - vb
  name: DefaultColumnValues
  nameWithType: Folder.DefaultColumnValues
  fullName: PnP.Framework.Provisioning.Model.Folder.DefaultColumnValues
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: DefaultColumnValues
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
    startLine: 68
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nDefines the default column values for the folder, if any\n"
  example: []
  syntax:
    content: public Dictionary<string, string> DefaultColumnValues { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public Property DefaultColumnValues As Dictionary(Of String, String)
  overload: PnP.Framework.Provisioning.Model.Folder.DefaultColumnValues*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Folder.Properties
  commentId: P:PnP.Framework.Provisioning.Model.Folder.Properties
  id: Properties
  parent: PnP.Framework.Provisioning.Model.Folder
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: Folder.Properties
  fullName: PnP.Framework.Provisioning.Model.Folder.Properties
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Properties
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
    startLine: 73
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nProperties of the folder\n"
  example: []
  syntax:
    content: public Dictionary<string, string> Properties { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public ReadOnly Property Properties As Dictionary(Of String, String)
  overload: PnP.Framework.Provisioning.Model.Folder.Properties*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PnP.Framework.Provisioning.Model.Folder.ContentTypeID
  commentId: P:PnP.Framework.Provisioning.Model.Folder.ContentTypeID
  id: ContentTypeID
  parent: PnP.Framework.Provisioning.Model.Folder
  langs:
  - csharp
  - vb
  name: ContentTypeID
  nameWithType: Folder.ContentTypeID
  fullName: PnP.Framework.Provisioning.Model.Folder.ContentTypeID
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ContentTypeID
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
    startLine: 78
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nThe Content Type ID for the Folder\n"
  example: []
  syntax:
    content: public string ContentTypeID { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ContentTypeID As String
  overload: PnP.Framework.Provisioning.Model.Folder.ContentTypeID*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Folder.#ctor
  commentId: M:PnP.Framework.Provisioning.Model.Folder.#ctor
  id: '#ctor'
  parent: PnP.Framework.Provisioning.Model.Folder
  langs:
  - csharp
  - vb
  name: Folder()
  nameWithType: Folder.Folder()
  fullName: PnP.Framework.Provisioning.Model.Folder.Folder()
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
    startLine: 86
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nConstructor for the Folder class\n"
  example: []
  syntax:
    content: public Folder()
    content.vb: Public Sub New
  overload: PnP.Framework.Provisioning.Model.Folder.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Folder.#ctor(System.String,System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Folder},PnP.Framework.Provisioning.Model.ObjectSecurity)
  commentId: M:PnP.Framework.Provisioning.Model.Folder.#ctor(System.String,System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Folder},PnP.Framework.Provisioning.Model.ObjectSecurity)
  id: '#ctor(System.String,System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Folder},PnP.Framework.Provisioning.Model.ObjectSecurity)'
  parent: PnP.Framework.Provisioning.Model.Folder
  langs:
  - csharp
  - vb
  name: Folder(String, List<Folder>, ObjectSecurity)
  nameWithType: Folder.Folder(String, List<Folder>, ObjectSecurity)
  fullName: PnP.Framework.Provisioning.Model.Folder.Folder(System.String, System.Collections.Generic.List<PnP.Framework.Provisioning.Model.Folder>, PnP.Framework.Provisioning.Model.ObjectSecurity)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
    startLine: 99
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nConstructor for the Folder class\n"
  example: []
  syntax:
    content: public Folder(string name, List<Folder> folders = null, ObjectSecurity security = null)
    parameters:
    - id: name
      type: System.String
      description: Name of the folder
    - id: folders
      type: System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Folder}
      description: List of the folders
    - id: security
      type: PnP.Framework.Provisioning.Model.ObjectSecurity
      description: ObjectSecurity for the folder
    content.vb: Public Sub New(name As String, folders As List(Of Folder) = Nothing, security As ObjectSecurity = Nothing)
  overload: PnP.Framework.Provisioning.Model.Folder.#ctor*
  nameWithType.vb: Folder.Folder(String, List(Of Folder), ObjectSecurity)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.Provisioning.Model.Folder.Folder(System.String, System.Collections.Generic.List(Of PnP.Framework.Provisioning.Model.Folder), PnP.Framework.Provisioning.Model.ObjectSecurity)
  name.vb: Folder(String, List(Of Folder), ObjectSecurity)
- uid: PnP.Framework.Provisioning.Model.Folder.GetHashCode
  commentId: M:PnP.Framework.Provisioning.Model.Folder.GetHashCode
  id: GetHashCode
  parent: PnP.Framework.Provisioning.Model.Folder
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Folder.GetHashCode()
  fullName: PnP.Framework.Provisioning.Model.Folder.GetHashCode()
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetHashCode
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
    startLine: 117
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets the hash code\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: Returns HashCode
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: PnP.Framework.Provisioning.Model.Folder.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: PnP.Framework.Provisioning.Model.Folder.Equals(System.Object)
  commentId: M:PnP.Framework.Provisioning.Model.Folder.Equals(System.Object)
  id: Equals(System.Object)
  parent: PnP.Framework.Provisioning.Model.Folder
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Folder.Equals(Object)
  fullName: PnP.Framework.Provisioning.Model.Folder.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Equals
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
    startLine: 135
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nCompares object with Folder\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: Object that represents Folder
    return:
      type: System.Boolean
      description: true if the current object is equal to the Folder
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: PnP.Framework.Provisioning.Model.Folder.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: PnP.Framework.Provisioning.Model.Folder.Equals(PnP.Framework.Provisioning.Model.Folder)
  commentId: M:PnP.Framework.Provisioning.Model.Folder.Equals(PnP.Framework.Provisioning.Model.Folder)
  id: Equals(PnP.Framework.Provisioning.Model.Folder)
  parent: PnP.Framework.Provisioning.Model.Folder
  langs:
  - csharp
  - vb
  name: Equals(Folder)
  nameWithType: Folder.Equals(Folder)
  fullName: PnP.Framework.Provisioning.Model.Folder.Equals(PnP.Framework.Provisioning.Model.Folder)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Equals
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/InformationArchitecture/Folder.cs
    startLine: 150
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nCompares Folder object based on Name, Folders, Security, \nPropertyBagEntries, DefaultColumnValues, Properties, and ContentTypeId properties.\n"
  example: []
  syntax:
    content: public bool Equals(Folder other)
    parameters:
    - id: other
      type: PnP.Framework.Provisioning.Model.Folder
      description: Folder object
    return:
      type: System.Boolean
      description: true if the Folder object is equal to the current object; otherwise, false.
    content.vb: Public Function Equals(other As Folder) As Boolean
  overload: PnP.Framework.Provisioning.Model.Folder.Equals*
  implements:
  - System.IEquatable{PnP.Framework.Provisioning.Model.Folder}.Equals(PnP.Framework.Provisioning.Model.Folder)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: PnP.Framework.Provisioning.Model
  commentId: N:PnP.Framework.Provisioning.Model
  name: PnP.Framework.Provisioning.Model
  nameWithType: PnP.Framework.Provisioning.Model
  fullName: PnP.Framework.Provisioning.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: PnP.Framework.Provisioning.Model.BaseModel
  commentId: T:PnP.Framework.Provisioning.Model.BaseModel
  parent: PnP.Framework.Provisioning.Model
  name: BaseModel
  nameWithType: BaseModel
  fullName: PnP.Framework.Provisioning.Model.BaseModel
- uid: PnP.Framework.Provisioning.Model.IProvisioningTemplateDescendant
  commentId: T:PnP.Framework.Provisioning.Model.IProvisioningTemplateDescendant
  parent: PnP.Framework.Provisioning.Model
  name: IProvisioningTemplateDescendant
  nameWithType: IProvisioningTemplateDescendant
  fullName: PnP.Framework.Provisioning.Model.IProvisioningTemplateDescendant
- uid: System.IEquatable{PnP.Framework.Provisioning.Model.Folder}
  commentId: T:System.IEquatable{PnP.Framework.Provisioning.Model.Folder}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Folder>
  nameWithType: IEquatable<Folder>
  fullName: System.IEquatable<PnP.Framework.Provisioning.Model.Folder>
  nameWithType.vb: IEquatable(Of Folder)
  fullName.vb: System.IEquatable(Of PnP.Framework.Provisioning.Model.Folder)
  name.vb: IEquatable(Of Folder)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Provisioning.Model.Folder
    name: Folder
    nameWithType: Folder
    fullName: PnP.Framework.Provisioning.Model.Folder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Provisioning.Model.Folder
    name: Folder
    nameWithType: Folder
    fullName: PnP.Framework.Provisioning.Model.Folder
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Provisioning.Model.BaseModel.ParentTemplate
  commentId: P:PnP.Framework.Provisioning.Model.BaseModel.ParentTemplate
  parent: PnP.Framework.Provisioning.Model.BaseModel
  name: ParentTemplate
  nameWithType: BaseModel.ParentTemplate
  fullName: PnP.Framework.Provisioning.Model.BaseModel.ParentTemplate
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Provisioning.Model.Folder.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  parent: System.ValidationExtensions
  definition: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  name: ValidateNotNullOrEmpty<Folder>(String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<Folder>(String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.Provisioning.Model.Folder>(System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of Folder)(String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.Provisioning.Model.Folder)(System.String)
  name.vb: ValidateNotNullOrEmpty(Of Folder)(String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty<Folder>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<Folder>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.Provisioning.Model.Folder>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty(Of Folder)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of Folder)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.Provisioning.Model.Folder)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Provisioning.Model.Folder.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.Provisioning.Model.Folder,{T}}},{T},System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  name: Set<Folder, T>(Expression<Func<Folder, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<Folder, T>(Expression<Func<Folder, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.Provisioning.Model.Folder, T>(System.Linq.Expressions.Expression<System.Func<PnP.Framework.Provisioning.Model.Folder, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of Folder, T)(Expression(Of Func(Of Folder, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.Provisioning.Model.Folder, T)(System.Linq.Expressions.Expression(Of System.Func(Of PnP.Framework.Provisioning.Model.Folder, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of Folder, T)(Expression(Of Func(Of Folder, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<Folder, T>
    nameWithType: ObjectExtensions.Set<Folder, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.Provisioning.Model.Folder, T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Provisioning.Model.Folder
    name: Folder
    nameWithType: Folder
    fullName: PnP.Framework.Provisioning.Model.Folder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of Folder, T)
    nameWithType: ObjectExtensions.Set(Of Folder, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.Provisioning.Model.Folder, T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Provisioning.Model.Folder
    name: Folder
    nameWithType: Folder
    fullName: PnP.Framework.Provisioning.Model.Folder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  name: GetPublicInstancePropertyValue(String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  name: GetPublicInstanceProperty(String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  name: SetPublicInstancePropertyValue(String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  parent: PnP.Framework.Modernization.Cache.Extensions
  definition: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  name: ToByteArray()
  nameWithType: Extensions.ToByteArray()
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray()
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  isExternal: true
  name: ValidateNotNullOrEmpty<T>(T, String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>(T, String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>(T, System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, System.String)
  name.vb: ValidateNotNullOrEmpty(Of T)(T, String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty<T>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty(Of T)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of T)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions
  commentId: T:System.ValidationExtensions
  parent: System
  name: ValidationExtensions
  nameWithType: ValidationExtensions
  fullName: System.ValidationExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  isExternal: true
  name: Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>(TObject, System.Linq.Expressions.Expression<System.Func<TObject, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)(TObject, System.Linq.Expressions.Expression(Of System.Func(Of TObject, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<TObject, T>
    nameWithType: ObjectExtensions.Set<TObject, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of TObject, T)
    nameWithType: ObjectExtensions.Set(Of TObject, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions
  commentId: T:PnP.Framework.Extensions.ObjectExtensions
  parent: PnP.Framework.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: PnP.Framework.Extensions.ObjectExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  isExternal: true
  name: GetPublicInstancePropertyValue(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  isExternal: true
  name: GetPublicInstanceProperty(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  isExternal: true
  name: SetPublicInstancePropertyValue(Object, String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(Object, String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object, System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  isExternal: true
  name: ToByteArray(Object)
  nameWithType: Extensions.ToByteArray(Object)
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions
  commentId: T:PnP.Framework.Modernization.Cache.Extensions
  parent: PnP.Framework.Modernization.Cache
  name: Extensions
  nameWithType: Extensions
  fullName: PnP.Framework.Modernization.Cache.Extensions
- uid: PnP.Framework.Extensions
  commentId: N:PnP.Framework.Extensions
  name: PnP.Framework.Extensions
  nameWithType: PnP.Framework.Extensions
  fullName: PnP.Framework.Extensions
- uid: PnP.Framework.Modernization.Cache
  commentId: N:PnP.Framework.Modernization.Cache
  name: PnP.Framework.Modernization.Cache
  nameWithType: PnP.Framework.Modernization.Cache
  fullName: PnP.Framework.Modernization.Cache
- uid: PnP.Framework.Provisioning.Model.Folder.Name*
  commentId: Overload:PnP.Framework.Provisioning.Model.Folder.Name
  name: Name
  nameWithType: Folder.Name
  fullName: PnP.Framework.Provisioning.Model.Folder.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: PnP.Framework.Provisioning.Model.Folder.Security*
  commentId: Overload:PnP.Framework.Provisioning.Model.Folder.Security
  name: Security
  nameWithType: Folder.Security
  fullName: PnP.Framework.Provisioning.Model.Folder.Security
- uid: PnP.Framework.Provisioning.Model.ObjectSecurity
  commentId: T:PnP.Framework.Provisioning.Model.ObjectSecurity
  parent: PnP.Framework.Provisioning.Model
  name: ObjectSecurity
  nameWithType: ObjectSecurity
  fullName: PnP.Framework.Provisioning.Model.ObjectSecurity
- uid: PnP.Framework.Provisioning.Model.Folder.Folders*
  commentId: Overload:PnP.Framework.Provisioning.Model.Folder.Folders
  name: Folders
  nameWithType: Folder.Folders
  fullName: PnP.Framework.Provisioning.Model.Folder.Folders
- uid: PnP.Framework.Provisioning.Model.FolderCollection
  commentId: T:PnP.Framework.Provisioning.Model.FolderCollection
  parent: PnP.Framework.Provisioning.Model
  name: FolderCollection
  nameWithType: FolderCollection
  fullName: PnP.Framework.Provisioning.Model.FolderCollection
- uid: PnP.Framework.Provisioning.Model.Folder.PropertyBagEntries*
  commentId: Overload:PnP.Framework.Provisioning.Model.Folder.PropertyBagEntries
  name: PropertyBagEntries
  nameWithType: Folder.PropertyBagEntries
  fullName: PnP.Framework.Provisioning.Model.Folder.PropertyBagEntries
- uid: PnP.Framework.Provisioning.Model.PropertyBagEntryCollection
  commentId: T:PnP.Framework.Provisioning.Model.PropertyBagEntryCollection
  parent: PnP.Framework.Provisioning.Model
  name: PropertyBagEntryCollection
  nameWithType: PropertyBagEntryCollection
  fullName: PnP.Framework.Provisioning.Model.PropertyBagEntryCollection
- uid: PnP.Framework.Provisioning.Model.Folder.DefaultColumnValues*
  commentId: Overload:PnP.Framework.Provisioning.Model.Folder.DefaultColumnValues
  name: DefaultColumnValues
  nameWithType: Folder.DefaultColumnValues
  fullName: PnP.Framework.Provisioning.Model.Folder.DefaultColumnValues
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: PnP.Framework.Provisioning.Model.Folder.Properties*
  commentId: Overload:PnP.Framework.Provisioning.Model.Folder.Properties
  name: Properties
  nameWithType: Folder.Properties
  fullName: PnP.Framework.Provisioning.Model.Folder.Properties
- uid: PnP.Framework.Provisioning.Model.Folder.ContentTypeID*
  commentId: Overload:PnP.Framework.Provisioning.Model.Folder.ContentTypeID
  name: ContentTypeID
  nameWithType: Folder.ContentTypeID
  fullName: PnP.Framework.Provisioning.Model.Folder.ContentTypeID
- uid: PnP.Framework.Provisioning.Model.Folder.#ctor*
  commentId: Overload:PnP.Framework.Provisioning.Model.Folder.#ctor
  name: Folder
  nameWithType: Folder.Folder
  fullName: PnP.Framework.Provisioning.Model.Folder.Folder
- uid: System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Folder}
  commentId: T:System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Folder}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Folder>
  nameWithType: List<Folder>
  fullName: System.Collections.Generic.List<PnP.Framework.Provisioning.Model.Folder>
  nameWithType.vb: List(Of Folder)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Provisioning.Model.Folder)
  name.vb: List(Of Folder)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Provisioning.Model.Folder
    name: Folder
    nameWithType: Folder
    fullName: PnP.Framework.Provisioning.Model.Folder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Provisioning.Model.Folder
    name: Folder
    nameWithType: Folder
    fullName: PnP.Framework.Provisioning.Model.Folder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Provisioning.Model.Folder.GetHashCode*
  commentId: Overload:PnP.Framework.Provisioning.Model.Folder.GetHashCode
  name: GetHashCode
  nameWithType: Folder.GetHashCode
  fullName: PnP.Framework.Provisioning.Model.Folder.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Provisioning.Model.Folder.Equals*
  commentId: Overload:PnP.Framework.Provisioning.Model.Folder.Equals
  name: Equals
  nameWithType: Folder.Equals
  fullName: PnP.Framework.Provisioning.Model.Folder.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{PnP.Framework.Provisioning.Model.Folder}.Equals(PnP.Framework.Provisioning.Model.Folder)
  commentId: M:System.IEquatable{PnP.Framework.Provisioning.Model.Folder}.Equals(PnP.Framework.Provisioning.Model.Folder)
  parent: System.IEquatable{PnP.Framework.Provisioning.Model.Folder}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Folder)
  nameWithType: IEquatable<Folder>.Equals(Folder)
  fullName: System.IEquatable<PnP.Framework.Provisioning.Model.Folder>.Equals(PnP.Framework.Provisioning.Model.Folder)
  nameWithType.vb: IEquatable(Of Folder).Equals(Folder)
  fullName.vb: System.IEquatable(Of PnP.Framework.Provisioning.Model.Folder).Equals(PnP.Framework.Provisioning.Model.Folder)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Folder>.Equals
    fullName: System.IEquatable<PnP.Framework.Provisioning.Model.Folder>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Provisioning.Model.Folder
    name: Folder
    nameWithType: Folder
    fullName: PnP.Framework.Provisioning.Model.Folder
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Folder).Equals
    fullName: System.IEquatable(Of PnP.Framework.Provisioning.Model.Folder).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Provisioning.Model.Folder
    name: Folder
    nameWithType: Folder
    fullName: PnP.Framework.Provisioning.Model.Folder
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Provisioning.Model.Folder
  commentId: T:PnP.Framework.Provisioning.Model.Folder
  parent: PnP.Framework.Provisioning.Model
  name: Folder
  nameWithType: Folder
  fullName: PnP.Framework.Provisioning.Model.Folder
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )

### YamlMime:ManagedReference
items:
- uid: PnP.Framework.Provisioning.Model.Term
  commentId: T:PnP.Framework.Provisioning.Model.Term
  id: Term
  parent: PnP.Framework.Provisioning.Model
  children:
  - PnP.Framework.Provisioning.Model.Term.#ctor
  - PnP.Framework.Provisioning.Model.Term.#ctor(System.Guid,System.String,System.Nullable{System.Int32},System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Term},System.Collections.Generic.List{PnP.Framework.Provisioning.Model.TermLabel},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})
  - PnP.Framework.Provisioning.Model.Term.CustomSortOrder
  - PnP.Framework.Provisioning.Model.Term.Description
  - PnP.Framework.Provisioning.Model.Term.Equals(PnP.Framework.Provisioning.Model.Term)
  - PnP.Framework.Provisioning.Model.Term.Equals(System.Object)
  - PnP.Framework.Provisioning.Model.Term.GetHashCode
  - PnP.Framework.Provisioning.Model.Term.Id
  - PnP.Framework.Provisioning.Model.Term.IsAvailableForTagging
  - PnP.Framework.Provisioning.Model.Term.IsDeprecated
  - PnP.Framework.Provisioning.Model.Term.IsReused
  - PnP.Framework.Provisioning.Model.Term.IsSourceTerm
  - PnP.Framework.Provisioning.Model.Term.Labels
  - PnP.Framework.Provisioning.Model.Term.Language
  - PnP.Framework.Provisioning.Model.Term.LocalProperties
  - PnP.Framework.Provisioning.Model.Term.Name
  - PnP.Framework.Provisioning.Model.Term.Owner
  - PnP.Framework.Provisioning.Model.Term.Properties
  - PnP.Framework.Provisioning.Model.Term.SourceTermId
  - PnP.Framework.Provisioning.Model.Term.Terms
  langs:
  - csharp
  - vb
  name: Term
  nameWithType: Term
  fullName: PnP.Framework.Provisioning.Model.Term
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Term
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 7
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  syntax:
    content: 'public class Term : BaseModel, IProvisioningTemplateDescendant, IEquatable<Term>'
    content.vb: >-
      Public Class Term
          Inherits BaseModel
          Implements IProvisioningTemplateDescendant, IEquatable(Of Term)
  inheritance:
  - System.Object
  - PnP.Framework.Provisioning.Model.BaseModel
  implements:
  - PnP.Framework.Provisioning.Model.IProvisioningTemplateDescendant
  - System.IEquatable{PnP.Framework.Provisioning.Model.Term}
  inheritedMembers:
  - PnP.Framework.Provisioning.Model.BaseModel.ParentTemplate
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - PnP.Framework.Provisioning.Model.Term.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  - PnP.Framework.Provisioning.Model.Term.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.Provisioning.Model.Term,{T}}},{T},System.Boolean,System.Boolean)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  - System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: PnP.Framework.Provisioning.Model.Term.Id
  commentId: P:PnP.Framework.Provisioning.Model.Term.Id
  id: Id
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Term.Id
  fullName: PnP.Framework.Provisioning.Model.Term.Id
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Id
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 21
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets the term id\n"
  example: []
  syntax:
    content: public Guid Id { get; set; }
    parameters: []
    return:
      type: System.Guid
    content.vb: Public Property Id As Guid
  overload: PnP.Framework.Provisioning.Model.Term.Id*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Term.Name
  commentId: P:PnP.Framework.Provisioning.Model.Term.Name
  id: Name
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Term.Name
  fullName: PnP.Framework.Provisioning.Model.Term.Name
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Name
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 25
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets the term name\n"
  example: []
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: PnP.Framework.Provisioning.Model.Term.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Term.Description
  commentId: P:PnP.Framework.Provisioning.Model.Term.Description
  id: Description
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: Term.Description
  fullName: PnP.Framework.Provisioning.Model.Term.Description
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Description
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 29
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets the term description\n"
  example: []
  syntax:
    content: public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Description As String
  overload: PnP.Framework.Provisioning.Model.Term.Description*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Term.Owner
  commentId: P:PnP.Framework.Provisioning.Model.Term.Owner
  id: Owner
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: Owner
  nameWithType: Term.Owner
  fullName: PnP.Framework.Provisioning.Model.Term.Owner
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Owner
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 33
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets the term owner\n"
  example: []
  syntax:
    content: public string Owner { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Owner As String
  overload: PnP.Framework.Provisioning.Model.Term.Owner*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Term.IsAvailableForTagging
  commentId: P:PnP.Framework.Provisioning.Model.Term.IsAvailableForTagging
  id: IsAvailableForTagging
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: IsAvailableForTagging
  nameWithType: Term.IsAvailableForTagging
  fullName: PnP.Framework.Provisioning.Model.Term.IsAvailableForTagging
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: IsAvailableForTagging
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 37
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets the IsAvailableForTagging flag for the term\n"
  example: []
  syntax:
    content: public bool IsAvailableForTagging { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsAvailableForTagging As Boolean
  overload: PnP.Framework.Provisioning.Model.Term.IsAvailableForTagging*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Term.IsReused
  commentId: P:PnP.Framework.Provisioning.Model.Term.IsReused
  id: IsReused
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: IsReused
  nameWithType: Term.IsReused
  fullName: PnP.Framework.Provisioning.Model.Term.IsReused
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: IsReused
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 41
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets the IsReused flag for the term\n"
  example: []
  syntax:
    content: public bool IsReused { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsReused As Boolean
  overload: PnP.Framework.Provisioning.Model.Term.IsReused*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Term.IsSourceTerm
  commentId: P:PnP.Framework.Provisioning.Model.Term.IsSourceTerm
  id: IsSourceTerm
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: IsSourceTerm
  nameWithType: Term.IsSourceTerm
  fullName: PnP.Framework.Provisioning.Model.Term.IsSourceTerm
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: IsSourceTerm
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 45
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets the IsSourceTerm flag for the term\n"
  example: []
  syntax:
    content: public bool IsSourceTerm { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsSourceTerm As Boolean
  overload: PnP.Framework.Provisioning.Model.Term.IsSourceTerm*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Term.SourceTermId
  commentId: P:PnP.Framework.Provisioning.Model.Term.SourceTermId
  id: SourceTermId
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: SourceTermId
  nameWithType: Term.SourceTermId
  fullName: PnP.Framework.Provisioning.Model.Term.SourceTermId
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SourceTermId
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 49
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets the term source id\n"
  example: []
  syntax:
    content: public Guid SourceTermId { get; set; }
    parameters: []
    return:
      type: System.Guid
    content.vb: Public Property SourceTermId As Guid
  overload: PnP.Framework.Provisioning.Model.Term.SourceTermId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Term.IsDeprecated
  commentId: P:PnP.Framework.Provisioning.Model.Term.IsDeprecated
  id: IsDeprecated
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: IsDeprecated
  nameWithType: Term.IsDeprecated
  fullName: PnP.Framework.Provisioning.Model.Term.IsDeprecated
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: IsDeprecated
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 53
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets the IsDeprecated flag for the term\n"
  example: []
  syntax:
    content: public bool IsDeprecated { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsDeprecated As Boolean
  overload: PnP.Framework.Provisioning.Model.Term.IsDeprecated*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Term.Language
  commentId: P:PnP.Framework.Provisioning.Model.Term.Language
  id: Language
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: Language
  nameWithType: Term.Language
  fullName: PnP.Framework.Provisioning.Model.Term.Language
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Language
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 57
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets Language of the term\n"
  example: []
  syntax:
    content: public int? Language { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property Language As Integer?
  overload: PnP.Framework.Provisioning.Model.Term.Language*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Term.CustomSortOrder
  commentId: P:PnP.Framework.Provisioning.Model.Term.CustomSortOrder
  id: CustomSortOrder
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: CustomSortOrder
  nameWithType: Term.CustomSortOrder
  fullName: PnP.Framework.Provisioning.Model.Term.CustomSortOrder
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: CustomSortOrder
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 61
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets the order of the term\n"
  example: []
  syntax:
    content: public int CustomSortOrder { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property CustomSortOrder As Integer
  overload: PnP.Framework.Provisioning.Model.Term.CustomSortOrder*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Term.Terms
  commentId: P:PnP.Framework.Provisioning.Model.Term.Terms
  id: Terms
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: Terms
  nameWithType: Term.Terms
  fullName: PnP.Framework.Provisioning.Model.Term.Terms
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Terms
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 65
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets terms\n"
  example: []
  syntax:
    content: public TermCollection Terms { get; }
    parameters: []
    return:
      type: PnP.Framework.Provisioning.Model.TermCollection
    content.vb: Public ReadOnly Property Terms As TermCollection
  overload: PnP.Framework.Provisioning.Model.Term.Terms*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PnP.Framework.Provisioning.Model.Term.Labels
  commentId: P:PnP.Framework.Provisioning.Model.Term.Labels
  id: Labels
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: Labels
  nameWithType: Term.Labels
  fullName: PnP.Framework.Provisioning.Model.Term.Labels
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Labels
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 73
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets term labels\n"
  example: []
  syntax:
    content: public TermLabelCollection Labels { get; }
    parameters: []
    return:
      type: PnP.Framework.Provisioning.Model.TermLabelCollection
    content.vb: Public ReadOnly Property Labels As TermLabelCollection
  overload: PnP.Framework.Provisioning.Model.Term.Labels*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PnP.Framework.Provisioning.Model.Term.Properties
  commentId: P:PnP.Framework.Provisioning.Model.Term.Properties
  id: Properties
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: Term.Properties
  fullName: PnP.Framework.Provisioning.Model.Term.Properties
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Properties
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 81
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets the properties of the term\n"
  example: []
  syntax:
    content: public Dictionary<string, string> Properties { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public ReadOnly Property Properties As Dictionary(Of String, String)
  overload: PnP.Framework.Provisioning.Model.Term.Properties*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PnP.Framework.Provisioning.Model.Term.LocalProperties
  commentId: P:PnP.Framework.Provisioning.Model.Term.LocalProperties
  id: LocalProperties
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: LocalProperties
  nameWithType: Term.LocalProperties
  fullName: PnP.Framework.Provisioning.Model.Term.LocalProperties
  type: Property
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: LocalProperties
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 89
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets or sets local properties for the term\n"
  example: []
  syntax:
    content: public Dictionary<string, string> LocalProperties { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public ReadOnly Property LocalProperties As Dictionary(Of String, String)
  overload: PnP.Framework.Provisioning.Model.Term.LocalProperties*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PnP.Framework.Provisioning.Model.Term.#ctor
  commentId: M:PnP.Framework.Provisioning.Model.Term.#ctor
  id: '#ctor'
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: Term()
  nameWithType: Term.Term()
  fullName: PnP.Framework.Provisioning.Model.Term.Term()
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 100
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nConstructor for Term class\n"
  example: []
  syntax:
    content: public Term()
    content.vb: Public Sub New
  overload: PnP.Framework.Provisioning.Model.Term.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PnP.Framework.Provisioning.Model.Term.#ctor(System.Guid,System.String,System.Nullable{System.Int32},System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Term},System.Collections.Generic.List{PnP.Framework.Provisioning.Model.TermLabel},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:PnP.Framework.Provisioning.Model.Term.#ctor(System.Guid,System.String,System.Nullable{System.Int32},System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Term},System.Collections.Generic.List{PnP.Framework.Provisioning.Model.TermLabel},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})
  id: '#ctor(System.Guid,System.String,System.Nullable{System.Int32},System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Term},System.Collections.Generic.List{PnP.Framework.Provisioning.Model.TermLabel},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})'
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: Term(Guid, String, Nullable<Int32>, List<Term>, List<TermLabel>, Dictionary<String, String>, Dictionary<String, String>)
  nameWithType: Term.Term(Guid, String, Nullable<Int32>, List<Term>, List<TermLabel>, Dictionary<String, String>, Dictionary<String, String>)
  fullName: PnP.Framework.Provisioning.Model.Term.Term(System.Guid, System.String, System.Nullable<System.Int32>, System.Collections.Generic.List<PnP.Framework.Provisioning.Model.Term>, System.Collections.Generic.List<PnP.Framework.Provisioning.Model.TermLabel>, System.Collections.Generic.Dictionary<System.String, System.String>, System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Constructor
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: .ctor
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 116
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nConstructor for Term class\n"
  example: []
  syntax:
    content: public Term(Guid id, string name, int? language, List<Term> terms, List<TermLabel> labels, Dictionary<string, string> properties, Dictionary<string, string> localProperties)
    parameters:
    - id: id
      type: System.Guid
      description: Id of the term
    - id: name
      type: System.String
      description: Name of the term
    - id: language
      type: System.Nullable{System.Int32}
      description: Language of the term
    - id: terms
      type: System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Term}
      description: Terms
    - id: labels
      type: System.Collections.Generic.List{PnP.Framework.Provisioning.Model.TermLabel}
      description: Labels of the term
    - id: properties
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: Properties of the term
    - id: localProperties
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: LocalProperties of the term
    content.vb: Public Sub New(id As Guid, name As String, language As Integer?, terms As List(Of Term), labels As List(Of TermLabel), properties As Dictionary(Of String, String), localProperties As Dictionary(Of String, String))
  overload: PnP.Framework.Provisioning.Model.Term.#ctor*
  nameWithType.vb: Term.Term(Guid, String, Nullable(Of Int32), List(Of Term), List(Of TermLabel), Dictionary(Of String, String), Dictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PnP.Framework.Provisioning.Model.Term.Term(System.Guid, System.String, System.Nullable(Of System.Int32), System.Collections.Generic.List(Of PnP.Framework.Provisioning.Model.Term), System.Collections.Generic.List(Of PnP.Framework.Provisioning.Model.TermLabel), System.Collections.Generic.Dictionary(Of System.String, System.String), System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Term(Guid, String, Nullable(Of Int32), List(Of Term), List(Of TermLabel), Dictionary(Of String, String), Dictionary(Of String, String))
- uid: PnP.Framework.Provisioning.Model.Term.GetHashCode
  commentId: M:PnP.Framework.Provisioning.Model.Term.GetHashCode
  id: GetHashCode
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Term.GetHashCode()
  fullName: PnP.Framework.Provisioning.Model.Term.GetHashCode()
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetHashCode
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 152
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nGets the hash code\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: Returns HashCode
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: PnP.Framework.Provisioning.Model.Term.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: PnP.Framework.Provisioning.Model.Term.Equals(System.Object)
  commentId: M:PnP.Framework.Provisioning.Model.Term.Equals(System.Object)
  id: Equals(System.Object)
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Term.Equals(Object)
  fullName: PnP.Framework.Provisioning.Model.Term.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Equals
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 178
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nCompares object with Term\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: Object that represents Term
    return:
      type: System.Boolean
      description: true if the current object is equal to the Term
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: PnP.Framework.Provisioning.Model.Term.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: PnP.Framework.Provisioning.Model.Term.Equals(PnP.Framework.Provisioning.Model.Term)
  commentId: M:PnP.Framework.Provisioning.Model.Term.Equals(PnP.Framework.Provisioning.Model.Term)
  id: Equals(PnP.Framework.Provisioning.Model.Term)
  parent: PnP.Framework.Provisioning.Model.Term
  langs:
  - csharp
  - vb
  name: Equals(Term)
  nameWithType: Term.Equals(Term)
  fullName: PnP.Framework.Provisioning.Model.Term.Equals(PnP.Framework.Provisioning.Model.Term)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Equals
    path: ../src/lib/PnP.Framework/Provisioning/Model/SharePoint/Taxonomy/Term.cs
    startLine: 193
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Provisioning.Model
  summary: "\nCompares Term object based on Id, Name, Description, Language, Owner, IsAvailableForTagging, IsReused, IsSourceTerm, SourceTermId, \nIsDeprecated, CustomSortOrder, Labels, Terms, Properties and LocalProperties.\n"
  example: []
  syntax:
    content: public bool Equals(Term other)
    parameters:
    - id: other
      type: PnP.Framework.Provisioning.Model.Term
      description: Term object
    return:
      type: System.Boolean
      description: true if the Term object is equal to the current object; otherwise, false.
    content.vb: Public Function Equals(other As Term) As Boolean
  overload: PnP.Framework.Provisioning.Model.Term.Equals*
  implements:
  - System.IEquatable{PnP.Framework.Provisioning.Model.Term}.Equals(PnP.Framework.Provisioning.Model.Term)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: PnP.Framework.Provisioning.Model
  commentId: N:PnP.Framework.Provisioning.Model
  name: PnP.Framework.Provisioning.Model
  nameWithType: PnP.Framework.Provisioning.Model
  fullName: PnP.Framework.Provisioning.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: PnP.Framework.Provisioning.Model.BaseModel
  commentId: T:PnP.Framework.Provisioning.Model.BaseModel
  parent: PnP.Framework.Provisioning.Model
  name: BaseModel
  nameWithType: BaseModel
  fullName: PnP.Framework.Provisioning.Model.BaseModel
- uid: PnP.Framework.Provisioning.Model.IProvisioningTemplateDescendant
  commentId: T:PnP.Framework.Provisioning.Model.IProvisioningTemplateDescendant
  parent: PnP.Framework.Provisioning.Model
  name: IProvisioningTemplateDescendant
  nameWithType: IProvisioningTemplateDescendant
  fullName: PnP.Framework.Provisioning.Model.IProvisioningTemplateDescendant
- uid: System.IEquatable{PnP.Framework.Provisioning.Model.Term}
  commentId: T:System.IEquatable{PnP.Framework.Provisioning.Model.Term}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Term>
  nameWithType: IEquatable<Term>
  fullName: System.IEquatable<PnP.Framework.Provisioning.Model.Term>
  nameWithType.vb: IEquatable(Of Term)
  fullName.vb: System.IEquatable(Of PnP.Framework.Provisioning.Model.Term)
  name.vb: IEquatable(Of Term)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Provisioning.Model.Term
    name: Term
    nameWithType: Term
    fullName: PnP.Framework.Provisioning.Model.Term
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Provisioning.Model.Term
    name: Term
    nameWithType: Term
    fullName: PnP.Framework.Provisioning.Model.Term
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Provisioning.Model.BaseModel.ParentTemplate
  commentId: P:PnP.Framework.Provisioning.Model.BaseModel.ParentTemplate
  parent: PnP.Framework.Provisioning.Model.BaseModel
  name: ParentTemplate
  nameWithType: BaseModel.ParentTemplate
  fullName: PnP.Framework.Provisioning.Model.BaseModel.ParentTemplate
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Provisioning.Model.Term.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  parent: System.ValidationExtensions
  definition: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  name: ValidateNotNullOrEmpty<Term>(String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<Term>(String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.Provisioning.Model.Term>(System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of Term)(String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.Provisioning.Model.Term)(System.String)
  name.vb: ValidateNotNullOrEmpty(Of Term)(String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty<Term>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<Term>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.Provisioning.Model.Term>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty(Of Term)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of Term)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.Provisioning.Model.Term)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Provisioning.Model.Term.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.Provisioning.Model.Term,{T}}},{T},System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  name: Set<Term, T>(Expression<Func<Term, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<Term, T>(Expression<Func<Term, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.Provisioning.Model.Term, T>(System.Linq.Expressions.Expression<System.Func<PnP.Framework.Provisioning.Model.Term, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of Term, T)(Expression(Of Func(Of Term, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.Provisioning.Model.Term, T)(System.Linq.Expressions.Expression(Of System.Func(Of PnP.Framework.Provisioning.Model.Term, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of Term, T)(Expression(Of Func(Of Term, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<Term, T>
    nameWithType: ObjectExtensions.Set<Term, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.Provisioning.Model.Term, T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Provisioning.Model.Term
    name: Term
    nameWithType: Term
    fullName: PnP.Framework.Provisioning.Model.Term
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of Term, T)
    nameWithType: ObjectExtensions.Set(Of Term, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.Provisioning.Model.Term, T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Provisioning.Model.Term
    name: Term
    nameWithType: Term
    fullName: PnP.Framework.Provisioning.Model.Term
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  name: GetPublicInstancePropertyValue(String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  name: GetPublicInstanceProperty(String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  name: SetPublicInstancePropertyValue(String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  parent: PnP.Framework.Modernization.Cache.Extensions
  definition: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  name: ToByteArray()
  nameWithType: Extensions.ToByteArray()
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray()
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  isExternal: true
  name: ValidateNotNullOrEmpty<T>(T, String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>(T, String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>(T, System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, System.String)
  name.vb: ValidateNotNullOrEmpty(Of T)(T, String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty<T>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty(Of T)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of T)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions
  commentId: T:System.ValidationExtensions
  parent: System
  name: ValidationExtensions
  nameWithType: ValidationExtensions
  fullName: System.ValidationExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  isExternal: true
  name: Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>(TObject, System.Linq.Expressions.Expression<System.Func<TObject, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)(TObject, System.Linq.Expressions.Expression(Of System.Func(Of TObject, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<TObject, T>
    nameWithType: ObjectExtensions.Set<TObject, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of TObject, T)
    nameWithType: ObjectExtensions.Set(Of TObject, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions
  commentId: T:PnP.Framework.Extensions.ObjectExtensions
  parent: PnP.Framework.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: PnP.Framework.Extensions.ObjectExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  isExternal: true
  name: GetPublicInstancePropertyValue(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  isExternal: true
  name: GetPublicInstanceProperty(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  isExternal: true
  name: SetPublicInstancePropertyValue(Object, String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(Object, String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object, System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  isExternal: true
  name: ToByteArray(Object)
  nameWithType: Extensions.ToByteArray(Object)
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions
  commentId: T:PnP.Framework.Modernization.Cache.Extensions
  parent: PnP.Framework.Modernization.Cache
  name: Extensions
  nameWithType: Extensions
  fullName: PnP.Framework.Modernization.Cache.Extensions
- uid: PnP.Framework.Extensions
  commentId: N:PnP.Framework.Extensions
  name: PnP.Framework.Extensions
  nameWithType: PnP.Framework.Extensions
  fullName: PnP.Framework.Extensions
- uid: PnP.Framework.Modernization.Cache
  commentId: N:PnP.Framework.Modernization.Cache
  name: PnP.Framework.Modernization.Cache
  nameWithType: PnP.Framework.Modernization.Cache
  fullName: PnP.Framework.Modernization.Cache
- uid: PnP.Framework.Provisioning.Model.Term.Id*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.Id
  name: Id
  nameWithType: Term.Id
  fullName: PnP.Framework.Provisioning.Model.Term.Id
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: PnP.Framework.Provisioning.Model.Term.Name*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.Name
  name: Name
  nameWithType: Term.Name
  fullName: PnP.Framework.Provisioning.Model.Term.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: PnP.Framework.Provisioning.Model.Term.Description*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.Description
  name: Description
  nameWithType: Term.Description
  fullName: PnP.Framework.Provisioning.Model.Term.Description
- uid: PnP.Framework.Provisioning.Model.Term.Owner*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.Owner
  name: Owner
  nameWithType: Term.Owner
  fullName: PnP.Framework.Provisioning.Model.Term.Owner
- uid: PnP.Framework.Provisioning.Model.Term.IsAvailableForTagging*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.IsAvailableForTagging
  name: IsAvailableForTagging
  nameWithType: Term.IsAvailableForTagging
  fullName: PnP.Framework.Provisioning.Model.Term.IsAvailableForTagging
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: PnP.Framework.Provisioning.Model.Term.IsReused*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.IsReused
  name: IsReused
  nameWithType: Term.IsReused
  fullName: PnP.Framework.Provisioning.Model.Term.IsReused
- uid: PnP.Framework.Provisioning.Model.Term.IsSourceTerm*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.IsSourceTerm
  name: IsSourceTerm
  nameWithType: Term.IsSourceTerm
  fullName: PnP.Framework.Provisioning.Model.Term.IsSourceTerm
- uid: PnP.Framework.Provisioning.Model.Term.SourceTermId*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.SourceTermId
  name: SourceTermId
  nameWithType: Term.SourceTermId
  fullName: PnP.Framework.Provisioning.Model.Term.SourceTermId
- uid: PnP.Framework.Provisioning.Model.Term.IsDeprecated*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.IsDeprecated
  name: IsDeprecated
  nameWithType: Term.IsDeprecated
  fullName: PnP.Framework.Provisioning.Model.Term.IsDeprecated
- uid: PnP.Framework.Provisioning.Model.Term.Language*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.Language
  name: Language
  nameWithType: Term.Language
  fullName: PnP.Framework.Provisioning.Model.Term.Language
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Provisioning.Model.Term.CustomSortOrder*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.CustomSortOrder
  name: CustomSortOrder
  nameWithType: Term.CustomSortOrder
  fullName: PnP.Framework.Provisioning.Model.Term.CustomSortOrder
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: PnP.Framework.Provisioning.Model.Term.Terms*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.Terms
  name: Terms
  nameWithType: Term.Terms
  fullName: PnP.Framework.Provisioning.Model.Term.Terms
- uid: PnP.Framework.Provisioning.Model.TermCollection
  commentId: T:PnP.Framework.Provisioning.Model.TermCollection
  parent: PnP.Framework.Provisioning.Model
  name: TermCollection
  nameWithType: TermCollection
  fullName: PnP.Framework.Provisioning.Model.TermCollection
- uid: PnP.Framework.Provisioning.Model.Term.Labels*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.Labels
  name: Labels
  nameWithType: Term.Labels
  fullName: PnP.Framework.Provisioning.Model.Term.Labels
- uid: PnP.Framework.Provisioning.Model.TermLabelCollection
  commentId: T:PnP.Framework.Provisioning.Model.TermLabelCollection
  parent: PnP.Framework.Provisioning.Model
  name: TermLabelCollection
  nameWithType: TermLabelCollection
  fullName: PnP.Framework.Provisioning.Model.TermLabelCollection
- uid: PnP.Framework.Provisioning.Model.Term.Properties*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.Properties
  name: Properties
  nameWithType: Term.Properties
  fullName: PnP.Framework.Provisioning.Model.Term.Properties
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: PnP.Framework.Provisioning.Model.Term.LocalProperties*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.LocalProperties
  name: LocalProperties
  nameWithType: Term.LocalProperties
  fullName: PnP.Framework.Provisioning.Model.Term.LocalProperties
- uid: PnP.Framework.Provisioning.Model.Term.#ctor*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.#ctor
  name: Term
  nameWithType: Term.Term
  fullName: PnP.Framework.Provisioning.Model.Term.Term
- uid: System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Term}
  commentId: T:System.Collections.Generic.List{PnP.Framework.Provisioning.Model.Term}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Term>
  nameWithType: List<Term>
  fullName: System.Collections.Generic.List<PnP.Framework.Provisioning.Model.Term>
  nameWithType.vb: List(Of Term)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Provisioning.Model.Term)
  name.vb: List(Of Term)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Provisioning.Model.Term
    name: Term
    nameWithType: Term
    fullName: PnP.Framework.Provisioning.Model.Term
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Provisioning.Model.Term
    name: Term
    nameWithType: Term
    fullName: PnP.Framework.Provisioning.Model.Term
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{PnP.Framework.Provisioning.Model.TermLabel}
  commentId: T:System.Collections.Generic.List{PnP.Framework.Provisioning.Model.TermLabel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TermLabel>
  nameWithType: List<TermLabel>
  fullName: System.Collections.Generic.List<PnP.Framework.Provisioning.Model.TermLabel>
  nameWithType.vb: List(Of TermLabel)
  fullName.vb: System.Collections.Generic.List(Of PnP.Framework.Provisioning.Model.TermLabel)
  name.vb: List(Of TermLabel)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Provisioning.Model.TermLabel
    name: TermLabel
    nameWithType: TermLabel
    fullName: PnP.Framework.Provisioning.Model.TermLabel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Provisioning.Model.TermLabel
    name: TermLabel
    nameWithType: TermLabel
    fullName: PnP.Framework.Provisioning.Model.TermLabel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Provisioning.Model.Term.GetHashCode*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.GetHashCode
  name: GetHashCode
  nameWithType: Term.GetHashCode
  fullName: PnP.Framework.Provisioning.Model.Term.GetHashCode
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Provisioning.Model.Term.Equals*
  commentId: Overload:PnP.Framework.Provisioning.Model.Term.Equals
  name: Equals
  nameWithType: Term.Equals
  fullName: PnP.Framework.Provisioning.Model.Term.Equals
- uid: System.IEquatable{PnP.Framework.Provisioning.Model.Term}.Equals(PnP.Framework.Provisioning.Model.Term)
  commentId: M:System.IEquatable{PnP.Framework.Provisioning.Model.Term}.Equals(PnP.Framework.Provisioning.Model.Term)
  parent: System.IEquatable{PnP.Framework.Provisioning.Model.Term}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Term)
  nameWithType: IEquatable<Term>.Equals(Term)
  fullName: System.IEquatable<PnP.Framework.Provisioning.Model.Term>.Equals(PnP.Framework.Provisioning.Model.Term)
  nameWithType.vb: IEquatable(Of Term).Equals(Term)
  fullName.vb: System.IEquatable(Of PnP.Framework.Provisioning.Model.Term).Equals(PnP.Framework.Provisioning.Model.Term)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Term>.Equals
    fullName: System.IEquatable<PnP.Framework.Provisioning.Model.Term>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Provisioning.Model.Term
    name: Term
    nameWithType: Term
    fullName: PnP.Framework.Provisioning.Model.Term
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Term).Equals
    fullName: System.IEquatable(Of PnP.Framework.Provisioning.Model.Term).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: PnP.Framework.Provisioning.Model.Term
    name: Term
    nameWithType: Term
    fullName: PnP.Framework.Provisioning.Model.Term
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Provisioning.Model.Term
  commentId: T:PnP.Framework.Provisioning.Model.Term
  parent: PnP.Framework.Provisioning.Model
  name: Term
  nameWithType: Term
  fullName: PnP.Framework.Provisioning.Model.Term
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )

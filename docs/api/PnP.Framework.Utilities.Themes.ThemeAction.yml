### YamlMime:ManagedReference
items:
- uid: PnP.Framework.Utilities.Themes.ThemeAction
  commentId: T:PnP.Framework.Utilities.Themes.ThemeAction
  id: ThemeAction
  parent: PnP.Framework.Utilities.Themes
  children:
  - PnP.Framework.Utilities.Themes.ThemeAction.AddTenantTheme
  - PnP.Framework.Utilities.Themes.ThemeAction.ApplyTheme
  - PnP.Framework.Utilities.Themes.ThemeAction.DeleteTenantTheme
  - PnP.Framework.Utilities.Themes.ThemeAction.GetTenantThemingOptions
  - PnP.Framework.Utilities.Themes.ThemeAction.UpdateTenantTheme
  langs:
  - csharp
  - vb
  name: ThemeAction
  nameWithType: ThemeAction
  fullName: PnP.Framework.Utilities.Themes.ThemeAction
  type: Enum
  source:
    remote:
      path: src/lib/PnP.Framework/Utilities/Themes/ThemeManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ThemeAction
    path: ../src/lib/PnP.Framework/Utilities/Themes/ThemeManager.cs
    startLine: 245
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Utilities.Themes
  summary: "\nAvailable actions for ThemeManager REST APIs\n"
  example: []
  syntax:
    content: public enum ThemeAction
    content.vb: Public Enum ThemeAction
  extensionMethods:
  - System.Enum.System.EnumerationExtensions.Include``1({T})
  - System.Enum.System.EnumerationExtensions.Remove``1({T})
  - System.Enum.System.EnumerationExtensions.Has``1({T})
  - System.Enum.System.EnumerationExtensions.Missing``1({T})
  - PnP.Framework.Utilities.Themes.ThemeAction.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  - PnP.Framework.Utilities.Themes.ThemeAction.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.Utilities.Themes.ThemeAction,{T}}},{T},System.Boolean,System.Boolean)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  - System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  - System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: PnP.Framework.Utilities.Themes.ThemeAction.AddTenantTheme
  commentId: F:PnP.Framework.Utilities.Themes.ThemeAction.AddTenantTheme
  id: AddTenantTheme
  parent: PnP.Framework.Utilities.Themes.ThemeAction
  langs:
  - csharp
  - vb
  name: AddTenantTheme
  nameWithType: ThemeAction.AddTenantTheme
  fullName: PnP.Framework.Utilities.Themes.ThemeAction.AddTenantTheme
  type: Field
  source:
    remote:
      path: src/lib/PnP.Framework/Utilities/Themes/ThemeManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: AddTenantTheme
    path: ../src/lib/PnP.Framework/Utilities/Themes/ThemeManager.cs
    startLine: 250
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Utilities.Themes
  summary: "\nAdd a new Tenant Theme\n"
  example: []
  syntax:
    content: AddTenantTheme = 0
    return:
      type: PnP.Framework.Utilities.Themes.ThemeAction
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: PnP.Framework.Utilities.Themes.ThemeAction.DeleteTenantTheme
  commentId: F:PnP.Framework.Utilities.Themes.ThemeAction.DeleteTenantTheme
  id: DeleteTenantTheme
  parent: PnP.Framework.Utilities.Themes.ThemeAction
  langs:
  - csharp
  - vb
  name: DeleteTenantTheme
  nameWithType: ThemeAction.DeleteTenantTheme
  fullName: PnP.Framework.Utilities.Themes.ThemeAction.DeleteTenantTheme
  type: Field
  source:
    remote:
      path: src/lib/PnP.Framework/Utilities/Themes/ThemeManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: DeleteTenantTheme
    path: ../src/lib/PnP.Framework/Utilities/Themes/ThemeManager.cs
    startLine: 254
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Utilities.Themes
  summary: "\nDelete an existing Tenant Theme\n"
  example: []
  syntax:
    content: DeleteTenantTheme = 1
    return:
      type: PnP.Framework.Utilities.Themes.ThemeAction
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: PnP.Framework.Utilities.Themes.ThemeAction.GetTenantThemingOptions
  commentId: F:PnP.Framework.Utilities.Themes.ThemeAction.GetTenantThemingOptions
  id: GetTenantThemingOptions
  parent: PnP.Framework.Utilities.Themes.ThemeAction
  langs:
  - csharp
  - vb
  name: GetTenantThemingOptions
  nameWithType: ThemeAction.GetTenantThemingOptions
  fullName: PnP.Framework.Utilities.Themes.ThemeAction.GetTenantThemingOptions
  type: Field
  source:
    remote:
      path: src/lib/PnP.Framework/Utilities/Themes/ThemeManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: GetTenantThemingOptions
    path: ../src/lib/PnP.Framework/Utilities/Themes/ThemeManager.cs
    startLine: 258
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Utilities.Themes
  summary: "\nGet the whole list of Tenant Themes\n"
  example: []
  syntax:
    content: GetTenantThemingOptions = 2
    return:
      type: PnP.Framework.Utilities.Themes.ThemeAction
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: PnP.Framework.Utilities.Themes.ThemeAction.ApplyTheme
  commentId: F:PnP.Framework.Utilities.Themes.ThemeAction.ApplyTheme
  id: ApplyTheme
  parent: PnP.Framework.Utilities.Themes.ThemeAction
  langs:
  - csharp
  - vb
  name: ApplyTheme
  nameWithType: ThemeAction.ApplyTheme
  fullName: PnP.Framework.Utilities.Themes.ThemeAction.ApplyTheme
  type: Field
  source:
    remote:
      path: src/lib/PnP.Framework/Utilities/Themes/ThemeManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ApplyTheme
    path: ../src/lib/PnP.Framework/Utilities/Themes/ThemeManager.cs
    startLine: 262
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Utilities.Themes
  summary: "\nApply a Theme to the target web\n"
  example: []
  syntax:
    content: ApplyTheme = 3
    return:
      type: PnP.Framework.Utilities.Themes.ThemeAction
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: PnP.Framework.Utilities.Themes.ThemeAction.UpdateTenantTheme
  commentId: F:PnP.Framework.Utilities.Themes.ThemeAction.UpdateTenantTheme
  id: UpdateTenantTheme
  parent: PnP.Framework.Utilities.Themes.ThemeAction
  langs:
  - csharp
  - vb
  name: UpdateTenantTheme
  nameWithType: ThemeAction.UpdateTenantTheme
  fullName: PnP.Framework.Utilities.Themes.ThemeAction.UpdateTenantTheme
  type: Field
  source:
    remote:
      path: src/lib/PnP.Framework/Utilities/Themes/ThemeManager.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: UpdateTenantTheme
    path: ../src/lib/PnP.Framework/Utilities/Themes/ThemeManager.cs
    startLine: 266
  assemblies:
  - PnP.Framework
  namespace: PnP.Framework.Utilities.Themes
  summary: "\nUpdate a Tenant Theme\n"
  example: []
  syntax:
    content: UpdateTenantTheme = 4
    return:
      type: PnP.Framework.Utilities.Themes.ThemeAction
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: PnP.Framework.Utilities.Themes
  commentId: N:PnP.Framework.Utilities.Themes
  name: PnP.Framework.Utilities.Themes
  nameWithType: PnP.Framework.Utilities.Themes
  fullName: PnP.Framework.Utilities.Themes
- uid: System.Enum.System.EnumerationExtensions.Include``1({T})
  commentId: M:System.EnumerationExtensions.Include``1(System.Enum,``0)
  parent: System.EnumerationExtensions
  definition: System.EnumerationExtensions.Include``1(System.Enum,``0)
  name: Include<T>(T)
  nameWithType: EnumerationExtensions.Include<T>(T)
  fullName: System.EnumerationExtensions.Include<T>(T)
  nameWithType.vb: EnumerationExtensions.Include(Of T)(T)
  fullName.vb: System.EnumerationExtensions.Include(Of T)(T)
  name.vb: Include(Of T)(T)
  spec.csharp:
  - uid: System.EnumerationExtensions.Include``1(``0)
    name: Include<T>
    nameWithType: EnumerationExtensions.Include<T>
    fullName: System.EnumerationExtensions.Include<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.EnumerationExtensions.Include``1(``0)
    name: Include(Of T)
    nameWithType: EnumerationExtensions.Include(Of T)
    fullName: System.EnumerationExtensions.Include(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Enum.System.EnumerationExtensions.Remove``1({T})
  commentId: M:System.EnumerationExtensions.Remove``1(System.Enum,``0)
  parent: System.EnumerationExtensions
  definition: System.EnumerationExtensions.Remove``1(System.Enum,``0)
  name: Remove<T>(T)
  nameWithType: EnumerationExtensions.Remove<T>(T)
  fullName: System.EnumerationExtensions.Remove<T>(T)
  nameWithType.vb: EnumerationExtensions.Remove(Of T)(T)
  fullName.vb: System.EnumerationExtensions.Remove(Of T)(T)
  name.vb: Remove(Of T)(T)
  spec.csharp:
  - uid: System.EnumerationExtensions.Remove``1(``0)
    name: Remove<T>
    nameWithType: EnumerationExtensions.Remove<T>
    fullName: System.EnumerationExtensions.Remove<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.EnumerationExtensions.Remove``1(``0)
    name: Remove(Of T)
    nameWithType: EnumerationExtensions.Remove(Of T)
    fullName: System.EnumerationExtensions.Remove(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Enum.System.EnumerationExtensions.Has``1({T})
  commentId: M:System.EnumerationExtensions.Has``1(System.Enum,``0)
  parent: System.EnumerationExtensions
  definition: System.EnumerationExtensions.Has``1(System.Enum,``0)
  name: Has<T>(T)
  nameWithType: EnumerationExtensions.Has<T>(T)
  fullName: System.EnumerationExtensions.Has<T>(T)
  nameWithType.vb: EnumerationExtensions.Has(Of T)(T)
  fullName.vb: System.EnumerationExtensions.Has(Of T)(T)
  name.vb: Has(Of T)(T)
  spec.csharp:
  - uid: System.EnumerationExtensions.Has``1(``0)
    name: Has<T>
    nameWithType: EnumerationExtensions.Has<T>
    fullName: System.EnumerationExtensions.Has<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.EnumerationExtensions.Has``1(``0)
    name: Has(Of T)
    nameWithType: EnumerationExtensions.Has(Of T)
    fullName: System.EnumerationExtensions.Has(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Enum.System.EnumerationExtensions.Missing``1({T})
  commentId: M:System.EnumerationExtensions.Missing``1(System.Enum,``0)
  parent: System.EnumerationExtensions
  definition: System.EnumerationExtensions.Missing``1(System.Enum,``0)
  name: Missing<T>(T)
  nameWithType: EnumerationExtensions.Missing<T>(T)
  fullName: System.EnumerationExtensions.Missing<T>(T)
  nameWithType.vb: EnumerationExtensions.Missing(Of T)(T)
  fullName.vb: System.EnumerationExtensions.Missing(Of T)(T)
  name.vb: Missing(Of T)(T)
  spec.csharp:
  - uid: System.EnumerationExtensions.Missing``1(``0)
    name: Missing<T>
    nameWithType: EnumerationExtensions.Missing<T>
    fullName: System.EnumerationExtensions.Missing<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.EnumerationExtensions.Missing``1(``0)
    name: Missing(Of T)
    nameWithType: EnumerationExtensions.Missing(Of T)
    fullName: System.EnumerationExtensions.Missing(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Utilities.Themes.ThemeAction.System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  parent: System.ValidationExtensions
  definition: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  name: ValidateNotNullOrEmpty<ThemeAction>(String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<ThemeAction>(String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.Utilities.Themes.ThemeAction>(System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of ThemeAction)(String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.Utilities.Themes.ThemeAction)(System.String)
  name.vb: ValidateNotNullOrEmpty(Of ThemeAction)(String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty<ThemeAction>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<ThemeAction>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<PnP.Framework.Utilities.Themes.ThemeAction>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(System.String)
    name: ValidateNotNullOrEmpty(Of ThemeAction)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of ThemeAction)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of PnP.Framework.Utilities.Themes.ThemeAction)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Utilities.Themes.ThemeAction.PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{PnP.Framework.Utilities.Themes.ThemeAction,{T}}},{T},System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  name: Set<ThemeAction, T>(Expression<Func<ThemeAction, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<ThemeAction, T>(Expression<Func<ThemeAction, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.Utilities.Themes.ThemeAction, T>(System.Linq.Expressions.Expression<System.Func<PnP.Framework.Utilities.Themes.ThemeAction, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of ThemeAction, T)(Expression(Of Func(Of ThemeAction, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.Utilities.Themes.ThemeAction, T)(System.Linq.Expressions.Expression(Of System.Func(Of PnP.Framework.Utilities.Themes.ThemeAction, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of ThemeAction, T)(Expression(Of Func(Of ThemeAction, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<ThemeAction, T>
    nameWithType: ObjectExtensions.Set<ThemeAction, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<PnP.Framework.Utilities.Themes.ThemeAction, T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PnP.Framework.Utilities.Themes.ThemeAction
    name: ThemeAction
    nameWithType: ThemeAction
    fullName: PnP.Framework.Utilities.Themes.ThemeAction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of ThemeAction, T)
    nameWithType: ObjectExtensions.Set(Of ThemeAction, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of PnP.Framework.Utilities.Themes.ThemeAction, T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PnP.Framework.Utilities.Themes.ThemeAction
    name: ThemeAction
    nameWithType: ThemeAction
    fullName: PnP.Framework.Utilities.Themes.ThemeAction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  name: GetPublicInstancePropertyValue(String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  name: GetPublicInstanceProperty(String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  parent: PnP.Framework.Extensions.ObjectExtensions
  definition: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  name: SetPublicInstancePropertyValue(String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  parent: PnP.Framework.Modernization.Cache.Extensions
  definition: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  name: ToByteArray()
  nameWithType: Extensions.ToByteArray()
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray()
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EnumerationExtensions.Include``1(System.Enum,``0)
  commentId: M:System.EnumerationExtensions.Include``1(System.Enum,``0)
  isExternal: true
  name: Include<T>(Enum, T)
  nameWithType: EnumerationExtensions.Include<T>(Enum, T)
  fullName: System.EnumerationExtensions.Include<T>(System.Enum, T)
  nameWithType.vb: EnumerationExtensions.Include(Of T)(Enum, T)
  fullName.vb: System.EnumerationExtensions.Include(Of T)(System.Enum, T)
  name.vb: Include(Of T)(Enum, T)
  spec.csharp:
  - uid: System.EnumerationExtensions.Include``1(System.Enum,``0)
    name: Include<T>
    nameWithType: EnumerationExtensions.Include<T>
    fullName: System.EnumerationExtensions.Include<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Enum
    name: Enum
    nameWithType: Enum
    fullName: System.Enum
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.EnumerationExtensions.Include``1(System.Enum,``0)
    name: Include(Of T)
    nameWithType: EnumerationExtensions.Include(Of T)
    fullName: System.EnumerationExtensions.Include(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Enum
    name: Enum
    nameWithType: Enum
    fullName: System.Enum
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EnumerationExtensions
  commentId: T:System.EnumerationExtensions
  parent: System
  name: EnumerationExtensions
  nameWithType: EnumerationExtensions
  fullName: System.EnumerationExtensions
- uid: System.EnumerationExtensions.Remove``1(System.Enum,``0)
  commentId: M:System.EnumerationExtensions.Remove``1(System.Enum,``0)
  isExternal: true
  name: Remove<T>(Enum, T)
  nameWithType: EnumerationExtensions.Remove<T>(Enum, T)
  fullName: System.EnumerationExtensions.Remove<T>(System.Enum, T)
  nameWithType.vb: EnumerationExtensions.Remove(Of T)(Enum, T)
  fullName.vb: System.EnumerationExtensions.Remove(Of T)(System.Enum, T)
  name.vb: Remove(Of T)(Enum, T)
  spec.csharp:
  - uid: System.EnumerationExtensions.Remove``1(System.Enum,``0)
    name: Remove<T>
    nameWithType: EnumerationExtensions.Remove<T>
    fullName: System.EnumerationExtensions.Remove<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Enum
    name: Enum
    nameWithType: Enum
    fullName: System.Enum
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.EnumerationExtensions.Remove``1(System.Enum,``0)
    name: Remove(Of T)
    nameWithType: EnumerationExtensions.Remove(Of T)
    fullName: System.EnumerationExtensions.Remove(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Enum
    name: Enum
    nameWithType: Enum
    fullName: System.Enum
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EnumerationExtensions.Has``1(System.Enum,``0)
  commentId: M:System.EnumerationExtensions.Has``1(System.Enum,``0)
  isExternal: true
  name: Has<T>(Enum, T)
  nameWithType: EnumerationExtensions.Has<T>(Enum, T)
  fullName: System.EnumerationExtensions.Has<T>(System.Enum, T)
  nameWithType.vb: EnumerationExtensions.Has(Of T)(Enum, T)
  fullName.vb: System.EnumerationExtensions.Has(Of T)(System.Enum, T)
  name.vb: Has(Of T)(Enum, T)
  spec.csharp:
  - uid: System.EnumerationExtensions.Has``1(System.Enum,``0)
    name: Has<T>
    nameWithType: EnumerationExtensions.Has<T>
    fullName: System.EnumerationExtensions.Has<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Enum
    name: Enum
    nameWithType: Enum
    fullName: System.Enum
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.EnumerationExtensions.Has``1(System.Enum,``0)
    name: Has(Of T)
    nameWithType: EnumerationExtensions.Has(Of T)
    fullName: System.EnumerationExtensions.Has(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Enum
    name: Enum
    nameWithType: Enum
    fullName: System.Enum
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EnumerationExtensions.Missing``1(System.Enum,``0)
  commentId: M:System.EnumerationExtensions.Missing``1(System.Enum,``0)
  isExternal: true
  name: Missing<T>(Enum, T)
  nameWithType: EnumerationExtensions.Missing<T>(Enum, T)
  fullName: System.EnumerationExtensions.Missing<T>(System.Enum, T)
  nameWithType.vb: EnumerationExtensions.Missing(Of T)(Enum, T)
  fullName.vb: System.EnumerationExtensions.Missing(Of T)(System.Enum, T)
  name.vb: Missing(Of T)(Enum, T)
  spec.csharp:
  - uid: System.EnumerationExtensions.Missing``1(System.Enum,``0)
    name: Missing<T>
    nameWithType: EnumerationExtensions.Missing<T>
    fullName: System.EnumerationExtensions.Missing<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Enum
    name: Enum
    nameWithType: Enum
    fullName: System.Enum
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.EnumerationExtensions.Missing``1(System.Enum,``0)
    name: Missing(Of T)
    nameWithType: EnumerationExtensions.Missing(Of T)
    fullName: System.EnumerationExtensions.Missing(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Enum
    name: Enum
    nameWithType: Enum
    fullName: System.Enum
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  commentId: M:System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
  isExternal: true
  name: ValidateNotNullOrEmpty<T>(T, String)
  nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>(T, String)
  fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>(T, System.String)
  nameWithType.vb: ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, String)
  fullName.vb: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)(T, System.String)
  name.vb: ValidateNotNullOrEmpty(Of T)(T, String)
  spec.csharp:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty<T>
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty<T>
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValidationExtensions.ValidateNotNullOrEmpty``1(``0,System.String)
    name: ValidateNotNullOrEmpty(Of T)
    nameWithType: ValidationExtensions.ValidateNotNullOrEmpty(Of T)
    fullName: System.ValidationExtensions.ValidateNotNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValidationExtensions
  commentId: T:System.ValidationExtensions
  parent: System
  name: ValidationExtensions
  nameWithType: ValidationExtensions
  fullName: System.ValidationExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
  isExternal: true
  name: Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  nameWithType: ObjectExtensions.Set<TObject, T>(TObject, Expression<Func<TObject, T>>, T, Boolean, Boolean)
  fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>(TObject, System.Linq.Expressions.Expression<System.Func<TObject, T>>, T, System.Boolean, System.Boolean)
  nameWithType.vb: ObjectExtensions.Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  fullName.vb: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)(TObject, System.Linq.Expressions.Expression(Of System.Func(Of TObject, T)), T, System.Boolean, System.Boolean)
  name.vb: Set(Of TObject, T)(TObject, Expression(Of Func(Of TObject, T)), T, Boolean, Boolean)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set<TObject, T>
    nameWithType: ObjectExtensions.Set<TObject, T>
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set<TObject, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean,System.Boolean)
    name: Set(Of TObject, T)
    nameWithType: ObjectExtensions.Set(Of TObject, T)
    fullName: PnP.Framework.Extensions.ObjectExtensions.Set(Of TObject, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TObject
    nameWithType: TObject
    fullName: TObject
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions
  commentId: T:PnP.Framework.Extensions.ObjectExtensions
  parent: PnP.Framework.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: PnP.Framework.Extensions.ObjectExtensions
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
  isExternal: true
  name: GetPublicInstancePropertyValue(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstancePropertyValue(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue(System.Object,System.String)
    name: GetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.GetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
  isExternal: true
  name: GetPublicInstanceProperty(Object, String)
  nameWithType: ObjectExtensions.GetPublicInstanceProperty(Object, String)
  fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object, System.String)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty(System.Object,System.String)
    name: GetPublicInstanceProperty
    nameWithType: ObjectExtensions.GetPublicInstanceProperty
    fullName: PnP.Framework.Extensions.ObjectExtensions.GetPublicInstanceProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  commentId: M:PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
  isExternal: true
  name: SetPublicInstancePropertyValue(Object, String, Object)
  nameWithType: ObjectExtensions.SetPublicInstancePropertyValue(Object, String, Object)
  fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object, System.String, System.Object)
  spec.csharp:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue(System.Object,System.String,System.Object)
    name: SetPublicInstancePropertyValue
    nameWithType: ObjectExtensions.SetPublicInstancePropertyValue
    fullName: PnP.Framework.Extensions.ObjectExtensions.SetPublicInstancePropertyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  commentId: M:PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  isExternal: true
  name: ToByteArray(Object)
  nameWithType: Extensions.ToByteArray(Object)
  fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
  spec.csharp:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PnP.Framework.Modernization.Cache.Extensions.ToByteArray(System.Object)
    name: ToByteArray
    nameWithType: Extensions.ToByteArray
    fullName: PnP.Framework.Modernization.Cache.Extensions.ToByteArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PnP.Framework.Modernization.Cache.Extensions
  commentId: T:PnP.Framework.Modernization.Cache.Extensions
  parent: PnP.Framework.Modernization.Cache
  name: Extensions
  nameWithType: Extensions
  fullName: PnP.Framework.Modernization.Cache.Extensions
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: PnP.Framework.Extensions
  commentId: N:PnP.Framework.Extensions
  name: PnP.Framework.Extensions
  nameWithType: PnP.Framework.Extensions
  fullName: PnP.Framework.Extensions
- uid: PnP.Framework.Modernization.Cache
  commentId: N:PnP.Framework.Modernization.Cache
  name: PnP.Framework.Modernization.Cache
  nameWithType: PnP.Framework.Modernization.Cache
  fullName: PnP.Framework.Modernization.Cache
- uid: PnP.Framework.Utilities.Themes.ThemeAction
  commentId: T:PnP.Framework.Utilities.Themes.ThemeAction
  parent: PnP.Framework.Utilities.Themes
  name: ThemeAction
  nameWithType: ThemeAction
  fullName: PnP.Framework.Utilities.Themes.ThemeAction

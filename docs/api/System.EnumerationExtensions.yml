### YamlMime:ManagedReference
items:
- uid: System.EnumerationExtensions
  commentId: T:System.EnumerationExtensions
  id: EnumerationExtensions
  parent: System
  children:
  - System.EnumerationExtensions.Has``1(System.Enum,``0)
  - System.EnumerationExtensions.Include``1(System.Enum,``0)
  - System.EnumerationExtensions.Missing``1(System.Enum,``0)
  - System.EnumerationExtensions.Remove``1(System.Enum,``0)
  langs:
  - csharp
  - vb
  name: EnumerationExtensions
  nameWithType: EnumerationExtensions
  fullName: System.EnumerationExtensions
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/EnumerationExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: EnumerationExtensions
    path: ../src/lib/PnP.Framework/Extensions/EnumerationExtensions.cs
    startLine: 5
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nExtension methods to make working with Enum values easier. Copied from http://hugoware.net/blog/enumeration-extensions-2-0.\n"
  example: []
  syntax:
    content: public static class EnumerationExtensions
    content.vb: Public Module EnumerationExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.EnumerationExtensions.Include``1(System.Enum,``0)
  commentId: M:System.EnumerationExtensions.Include``1(System.Enum,``0)
  id: Include``1(System.Enum,``0)
  isExtensionMethod: true
  parent: System.EnumerationExtensions
  langs:
  - csharp
  - vb
  name: Include<T>(Enum, T)
  nameWithType: EnumerationExtensions.Include<T>(Enum, T)
  fullName: System.EnumerationExtensions.Include<T>(System.Enum, T)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/EnumerationExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Include
    path: ../src/lib/PnP.Framework/Extensions/EnumerationExtensions.cs
    startLine: 17
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nIncludes an enumerated type and returns the new value\n"
  example: []
  syntax:
    content: public static T Include<T>(this Enum value, T append)
    parameters:
    - id: value
      type: System.Enum
      description: Enum value
    - id: append
      type: '{T}'
      description: Generic type parameter
    typeParameters:
    - id: T
      description: Generic type
    return:
      type: '{T}'
      description: Returns new value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Include(Of T)(value As  Enum, append As T) As T
  overload: System.EnumerationExtensions.Include*
  nameWithType.vb: EnumerationExtensions.Include(Of T)(Enum, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.EnumerationExtensions.Include(Of T)(System.Enum, T)
  name.vb: Include(Of T)(Enum, T)
- uid: System.EnumerationExtensions.Remove``1(System.Enum,``0)
  commentId: M:System.EnumerationExtensions.Remove``1(System.Enum,``0)
  id: Remove``1(System.Enum,``0)
  isExtensionMethod: true
  parent: System.EnumerationExtensions
  langs:
  - csharp
  - vb
  name: Remove<T>(Enum, T)
  nameWithType: EnumerationExtensions.Remove<T>(Enum, T)
  fullName: System.EnumerationExtensions.Remove<T>(System.Enum, T)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/EnumerationExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Remove
    path: ../src/lib/PnP.Framework/Extensions/EnumerationExtensions.cs
    startLine: 44
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nRemoves an enumerated type and returns the new value\n"
  example: []
  syntax:
    content: public static T Remove<T>(this Enum value, T remove)
    parameters:
    - id: value
      type: System.Enum
      description: Enum value
    - id: remove
      type: '{T}'
      description: Generic type parameter
    typeParameters:
    - id: T
      description: Generic type
    return:
      type: '{T}'
      description: Returns new value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Remove(Of T)(value As  Enum, remove As T) As T
  overload: System.EnumerationExtensions.Remove*
  nameWithType.vb: EnumerationExtensions.Remove(Of T)(Enum, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.EnumerationExtensions.Remove(Of T)(System.Enum, T)
  name.vb: Remove(Of T)(Enum, T)
- uid: System.EnumerationExtensions.Has``1(System.Enum,``0)
  commentId: M:System.EnumerationExtensions.Has``1(System.Enum,``0)
  id: Has``1(System.Enum,``0)
  isExtensionMethod: true
  parent: System.EnumerationExtensions
  langs:
  - csharp
  - vb
  name: Has<T>(Enum, T)
  nameWithType: EnumerationExtensions.Has<T>(Enum, T)
  fullName: System.EnumerationExtensions.Has<T>(System.Enum, T)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/EnumerationExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Has
    path: ../src/lib/PnP.Framework/Extensions/EnumerationExtensions.cs
    startLine: 71
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nChecks if an enumerated type contains a value\n"
  example: []
  syntax:
    content: public static bool Has<T>(this Enum value, T check)
    parameters:
    - id: value
      type: System.Enum
      description: Enum value
    - id: check
      type: '{T}'
      description: Generic type parameter
    typeParameters:
    - id: T
      description: Generic type
    return:
      type: System.Boolean
      description: Returns true if condition matches and enumerated type contains value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Has(Of T)(value As  Enum, check As T) As Boolean
  overload: System.EnumerationExtensions.Has*
  nameWithType.vb: EnumerationExtensions.Has(Of T)(Enum, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.EnumerationExtensions.Has(Of T)(System.Enum, T)
  name.vb: Has(Of T)(Enum, T)
- uid: System.EnumerationExtensions.Missing``1(System.Enum,``0)
  commentId: M:System.EnumerationExtensions.Missing``1(System.Enum,``0)
  id: Missing``1(System.Enum,``0)
  isExtensionMethod: true
  parent: System.EnumerationExtensions
  langs:
  - csharp
  - vb
  name: Missing<T>(Enum, T)
  nameWithType: EnumerationExtensions.Missing<T>(Enum, T)
  fullName: System.EnumerationExtensions.Missing<T>(System.Enum, T)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/EnumerationExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: Missing
    path: ../src/lib/PnP.Framework/Extensions/EnumerationExtensions.cs
    startLine: 99
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nChecks if an enumerated type is missing a value\n"
  example: []
  syntax:
    content: public static bool Missing<T>(this Enum obj, T value)
    parameters:
    - id: obj
      type: System.Enum
      description: Enum object
    - id: value
      type: '{T}'
      description: Generic type parameter
    typeParameters:
    - id: T
      description: Generic type
    return:
      type: System.Boolean
      description: Returns true if enumerated type is missing a value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Missing(Of T)(obj As  Enum, value As T) As Boolean
  overload: System.EnumerationExtensions.Missing*
  nameWithType.vb: EnumerationExtensions.Missing(Of T)(Enum, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.EnumerationExtensions.Missing(Of T)(System.Enum, T)
  name.vb: Missing(Of T)(Enum, T)
references:
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EnumerationExtensions.Include*
  commentId: Overload:System.EnumerationExtensions.Include
  name: Include
  nameWithType: EnumerationExtensions.Include
  fullName: System.EnumerationExtensions.Include
- uid: System.Enum
  commentId: T:System.Enum
  parent: System
  isExternal: true
  name: Enum
  nameWithType: Enum
  fullName: System.Enum
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.EnumerationExtensions.Remove*
  commentId: Overload:System.EnumerationExtensions.Remove
  name: Remove
  nameWithType: EnumerationExtensions.Remove
  fullName: System.EnumerationExtensions.Remove
- uid: System.EnumerationExtensions.Has*
  commentId: Overload:System.EnumerationExtensions.Has
  name: Has
  nameWithType: EnumerationExtensions.Has
  fullName: System.EnumerationExtensions.Has
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.EnumerationExtensions.Missing*
  commentId: Overload:System.EnumerationExtensions.Missing
  name: Missing
  nameWithType: EnumerationExtensions.Missing
  fullName: System.EnumerationExtensions.Missing

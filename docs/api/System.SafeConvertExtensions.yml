### YamlMime:ManagedReference
items:
- uid: System.SafeConvertExtensions
  commentId: T:System.SafeConvertExtensions
  id: SafeConvertExtensions
  parent: System
  children:
  - System.SafeConvertExtensions.ToBoolean(System.String)
  - System.SafeConvertExtensions.ToBoolean(System.String,System.Boolean)
  - System.SafeConvertExtensions.ToDouble(System.String)
  - System.SafeConvertExtensions.ToDouble(System.String,System.Double)
  - System.SafeConvertExtensions.ToEnum``1(System.Byte)
  - System.SafeConvertExtensions.ToEnum``1(System.Int32)
  - System.SafeConvertExtensions.ToEnum``1(System.String)
  - System.SafeConvertExtensions.ToGuid(System.String)
  - System.SafeConvertExtensions.ToGuid(System.String,System.Guid)
  - System.SafeConvertExtensions.ToInt32(System.String)
  - System.SafeConvertExtensions.ToInt32(System.String,System.Int32)
  - System.SafeConvertExtensions.ToInt64(System.String)
  - System.SafeConvertExtensions.ToInt64(System.String,System.Int32)
  langs:
  - csharp
  - vb
  name: SafeConvertExtensions
  nameWithType: SafeConvertExtensions
  fullName: System.SafeConvertExtensions
  type: Class
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: SafeConvertExtensions
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 5
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nSafely convert strings to specified types.\n"
  example: []
  syntax:
    content: public static class SafeConvertExtensions
    content.vb: Public Module SafeConvertExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.SafeConvertExtensions.ToBoolean(System.String,System.Boolean)
  commentId: M:System.SafeConvertExtensions.ToBoolean(System.String,System.Boolean)
  id: ToBoolean(System.String,System.Boolean)
  isExtensionMethod: true
  parent: System.SafeConvertExtensions
  langs:
  - csharp
  - vb
  name: ToBoolean(String, Boolean)
  nameWithType: SafeConvertExtensions.ToBoolean(String, Boolean)
  fullName: System.SafeConvertExtensions.ToBoolean(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToBoolean
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 13
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nConverts the input string to a boolean and if null, it returns the default value.\n"
  example: []
  syntax:
    content: public static bool ToBoolean(this string input, bool defaultValue)
    parameters:
    - id: input
      type: System.String
      description: Input string.
    - id: defaultValue
      type: System.Boolean
      description: A default value to return for a null input value.
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBoolean(input As String, defaultValue As Boolean) As Boolean
  overload: System.SafeConvertExtensions.ToBoolean*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.SafeConvertExtensions.ToBoolean(System.String)
  commentId: M:System.SafeConvertExtensions.ToBoolean(System.String)
  id: ToBoolean(System.String)
  isExtensionMethod: true
  parent: System.SafeConvertExtensions
  langs:
  - csharp
  - vb
  name: ToBoolean(String)
  nameWithType: SafeConvertExtensions.ToBoolean(String)
  fullName: System.SafeConvertExtensions.ToBoolean(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToBoolean
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 28
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nConverts the input string to a boolean and if null, it returns the default value.\n"
  example: []
  syntax:
    content: public static bool ToBoolean(this string input)
    parameters:
    - id: input
      type: System.String
      description: Input string.
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBoolean(input As String) As Boolean
  overload: System.SafeConvertExtensions.ToBoolean*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.SafeConvertExtensions.ToInt32(System.String,System.Int32)
  commentId: M:System.SafeConvertExtensions.ToInt32(System.String,System.Int32)
  id: ToInt32(System.String,System.Int32)
  isExtensionMethod: true
  parent: System.SafeConvertExtensions
  langs:
  - csharp
  - vb
  name: ToInt32(String, Int32)
  nameWithType: SafeConvertExtensions.ToInt32(String, Int32)
  fullName: System.SafeConvertExtensions.ToInt32(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToInt32
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 40
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nConverts the input string to a Int32 and if null, it returns the default value.\n"
  example: []
  syntax:
    content: public static int ToInt32(this string input, int defaultValue)
    parameters:
    - id: input
      type: System.String
      description: Input string.
    - id: defaultValue
      type: System.Int32
      description: A default value to return for a null input value.
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInt32(input As String, defaultValue As Integer) As Integer
  overload: System.SafeConvertExtensions.ToInt32*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.SafeConvertExtensions.ToInt32(System.String)
  commentId: M:System.SafeConvertExtensions.ToInt32(System.String)
  id: ToInt32(System.String)
  isExtensionMethod: true
  parent: System.SafeConvertExtensions
  langs:
  - csharp
  - vb
  name: ToInt32(String)
  nameWithType: SafeConvertExtensions.ToInt32(String)
  fullName: System.SafeConvertExtensions.ToInt32(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToInt32
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 55
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nConverts the input string to a Int64 and if null, it returns the default value.\n"
  example: []
  syntax:
    content: public static int ToInt32(this string input)
    parameters:
    - id: input
      type: System.String
      description: Input string.
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInt32(input As String) As Integer
  overload: System.SafeConvertExtensions.ToInt32*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.SafeConvertExtensions.ToInt64(System.String,System.Int32)
  commentId: M:System.SafeConvertExtensions.ToInt64(System.String,System.Int32)
  id: ToInt64(System.String,System.Int32)
  isExtensionMethod: true
  parent: System.SafeConvertExtensions
  langs:
  - csharp
  - vb
  name: ToInt64(String, Int32)
  nameWithType: SafeConvertExtensions.ToInt64(String, Int32)
  fullName: System.SafeConvertExtensions.ToInt64(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToInt64
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 67
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nConverts the input string to a Int32 and if null, it returns the default value.\n"
  example: []
  syntax:
    content: public static long ToInt64(this string input, int defaultValue)
    parameters:
    - id: input
      type: System.String
      description: Input string.
    - id: defaultValue
      type: System.Int32
      description: A default value to return for a null input value.
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInt64(input As String, defaultValue As Integer) As Long
  overload: System.SafeConvertExtensions.ToInt64*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.SafeConvertExtensions.ToInt64(System.String)
  commentId: M:System.SafeConvertExtensions.ToInt64(System.String)
  id: ToInt64(System.String)
  isExtensionMethod: true
  parent: System.SafeConvertExtensions
  langs:
  - csharp
  - vb
  name: ToInt64(String)
  nameWithType: SafeConvertExtensions.ToInt64(String)
  fullName: System.SafeConvertExtensions.ToInt64(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToInt64
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 82
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nConverts the input string to a Int32 and if null, it returns the default value.\n"
  example: []
  syntax:
    content: public static long ToInt64(this string input)
    parameters:
    - id: input
      type: System.String
      description: Input string.
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInt64(input As String) As Long
  overload: System.SafeConvertExtensions.ToInt64*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.SafeConvertExtensions.ToDouble(System.String,System.Double)
  commentId: M:System.SafeConvertExtensions.ToDouble(System.String,System.Double)
  id: ToDouble(System.String,System.Double)
  isExtensionMethod: true
  parent: System.SafeConvertExtensions
  langs:
  - csharp
  - vb
  name: ToDouble(String, Double)
  nameWithType: SafeConvertExtensions.ToDouble(String, Double)
  fullName: System.SafeConvertExtensions.ToDouble(System.String, System.Double)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToDouble
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 94
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nConverts the input string to a double and if null, it returns the default value.\n"
  example: []
  syntax:
    content: public static double ToDouble(this string input, double defaultValue)
    parameters:
    - id: input
      type: System.String
      description: Input string.
    - id: defaultValue
      type: System.Double
      description: A default value to return for a null input value.
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDouble(input As String, defaultValue As Double) As Double
  overload: System.SafeConvertExtensions.ToDouble*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.SafeConvertExtensions.ToDouble(System.String)
  commentId: M:System.SafeConvertExtensions.ToDouble(System.String)
  id: ToDouble(System.String)
  isExtensionMethod: true
  parent: System.SafeConvertExtensions
  langs:
  - csharp
  - vb
  name: ToDouble(String)
  nameWithType: SafeConvertExtensions.ToDouble(String)
  fullName: System.SafeConvertExtensions.ToDouble(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToDouble
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 109
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nConverts the input string to a double and if null, it returns the default value.\n"
  example: []
  syntax:
    content: public static double ToDouble(this string input)
    parameters:
    - id: input
      type: System.String
      description: Input string.
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDouble(input As String) As Double
  overload: System.SafeConvertExtensions.ToDouble*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.SafeConvertExtensions.ToGuid(System.String)
  commentId: M:System.SafeConvertExtensions.ToGuid(System.String)
  id: ToGuid(System.String)
  isExtensionMethod: true
  parent: System.SafeConvertExtensions
  langs:
  - csharp
  - vb
  name: ToGuid(String)
  nameWithType: SafeConvertExtensions.ToGuid(String)
  fullName: System.SafeConvertExtensions.ToGuid(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToGuid
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 120
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nConverts the input string to a Guid and if null, it returns the default value.\n"
  example: []
  syntax:
    content: public static Guid ToGuid(this string input)
    parameters:
    - id: input
      type: System.String
      description: Input string.
    return:
      type: System.Guid
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToGuid(input As String) As Guid
  overload: System.SafeConvertExtensions.ToGuid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.SafeConvertExtensions.ToGuid(System.String,System.Guid)
  commentId: M:System.SafeConvertExtensions.ToGuid(System.String,System.Guid)
  id: ToGuid(System.String,System.Guid)
  isExtensionMethod: true
  parent: System.SafeConvertExtensions
  langs:
  - csharp
  - vb
  name: ToGuid(String, Guid)
  nameWithType: SafeConvertExtensions.ToGuid(String, Guid)
  fullName: System.SafeConvertExtensions.ToGuid(System.String, System.Guid)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToGuid
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 129
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nConverts the input string to a Guid and if null, it returns the default value.\n"
  example: []
  syntax:
    content: public static Guid ToGuid(this string input, Guid defaultValue)
    parameters:
    - id: input
      type: System.String
      description: Input string.
    - id: defaultValue
      type: System.Guid
      description: A default value to return for a null input value.
    return:
      type: System.Guid
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToGuid(input As String, defaultValue As Guid) As Guid
  overload: System.SafeConvertExtensions.ToGuid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.SafeConvertExtensions.ToEnum``1(System.Int32)
  commentId: M:System.SafeConvertExtensions.ToEnum``1(System.Int32)
  id: ToEnum``1(System.Int32)
  isExtensionMethod: true
  parent: System.SafeConvertExtensions
  langs:
  - csharp
  - vb
  name: ToEnum<T>(Int32)
  nameWithType: SafeConvertExtensions.ToEnum<T>(Int32)
  fullName: System.SafeConvertExtensions.ToEnum<T>(System.Int32)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToEnum
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 149
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nConverts integer input to Enum\n"
  example: []
  syntax:
    content: public static T ToEnum<T>(this int enumValue)
    parameters:
    - id: enumValue
      type: System.Int32
      description: integer input
    typeParameters:
    - id: T
      description: Generic Type
    return:
      type: '{T}'
      description: Return Generic Type of Enum
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToEnum(Of T)(enumValue As Integer) As T
  overload: System.SafeConvertExtensions.ToEnum*
  nameWithType.vb: SafeConvertExtensions.ToEnum(Of T)(Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.SafeConvertExtensions.ToEnum(Of T)(System.Int32)
  name.vb: ToEnum(Of T)(Int32)
- uid: System.SafeConvertExtensions.ToEnum``1(System.Byte)
  commentId: M:System.SafeConvertExtensions.ToEnum``1(System.Byte)
  id: ToEnum``1(System.Byte)
  isExtensionMethod: true
  parent: System.SafeConvertExtensions
  langs:
  - csharp
  - vb
  name: ToEnum<T>(Byte)
  nameWithType: SafeConvertExtensions.ToEnum<T>(Byte)
  fullName: System.SafeConvertExtensions.ToEnum<T>(System.Byte)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToEnum
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 162
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nConverts byte input to Enum\n"
  example: []
  syntax:
    content: public static T ToEnum<T>(this byte enumValue)
    parameters:
    - id: enumValue
      type: System.Byte
      description: byte input
    typeParameters:
    - id: T
      description: Generic Type
    return:
      type: '{T}'
      description: Return Generic Type of Enum
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToEnum(Of T)(enumValue As Byte) As T
  overload: System.SafeConvertExtensions.ToEnum*
  nameWithType.vb: SafeConvertExtensions.ToEnum(Of T)(Byte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.SafeConvertExtensions.ToEnum(Of T)(System.Byte)
  name.vb: ToEnum(Of T)(Byte)
- uid: System.SafeConvertExtensions.ToEnum``1(System.String)
  commentId: M:System.SafeConvertExtensions.ToEnum``1(System.String)
  id: ToEnum``1(System.String)
  isExtensionMethod: true
  parent: System.SafeConvertExtensions
  langs:
  - csharp
  - vb
  name: ToEnum<T>(String)
  nameWithType: SafeConvertExtensions.ToEnum<T>(String)
  fullName: System.SafeConvertExtensions.ToEnum<T>(System.String)
  type: Method
  source:
    remote:
      path: src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
      branch: dev
      repo: https://github.com/pkbullock/pnpframework.git
    id: ToEnum
    path: ../src/lib/PnP.Framework/Extensions/SafeConvertExtensions.cs
    startLine: 175
  assemblies:
  - PnP.Framework
  namespace: System
  summary: "\nConverts input string to Enum\n"
  example: []
  syntax:
    content: public static T ToEnum<T>(this string name)
    parameters:
    - id: name
      type: System.String
      description: string input
    typeParameters:
    - id: T
      description: Generic Type
    return:
      type: '{T}'
      description: Return Generic Type of Enum
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToEnum(Of T)(name As String) As T
  overload: System.SafeConvertExtensions.ToEnum*
  nameWithType.vb: SafeConvertExtensions.ToEnum(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.SafeConvertExtensions.ToEnum(Of T)(System.String)
  name.vb: ToEnum(Of T)(String)
references:
- uid: System
  commentId: N:System
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.SafeConvertExtensions.ToBoolean*
  commentId: Overload:System.SafeConvertExtensions.ToBoolean
  name: ToBoolean
  nameWithType: SafeConvertExtensions.ToBoolean
  fullName: System.SafeConvertExtensions.ToBoolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.SafeConvertExtensions.ToInt32*
  commentId: Overload:System.SafeConvertExtensions.ToInt32
  name: ToInt32
  nameWithType: SafeConvertExtensions.ToInt32
  fullName: System.SafeConvertExtensions.ToInt32
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.SafeConvertExtensions.ToInt64*
  commentId: Overload:System.SafeConvertExtensions.ToInt64
  name: ToInt64
  nameWithType: SafeConvertExtensions.ToInt64
  fullName: System.SafeConvertExtensions.ToInt64
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.SafeConvertExtensions.ToDouble*
  commentId: Overload:System.SafeConvertExtensions.ToDouble
  name: ToDouble
  nameWithType: SafeConvertExtensions.ToDouble
  fullName: System.SafeConvertExtensions.ToDouble
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.SafeConvertExtensions.ToGuid*
  commentId: Overload:System.SafeConvertExtensions.ToGuid
  name: ToGuid
  nameWithType: SafeConvertExtensions.ToGuid
  fullName: System.SafeConvertExtensions.ToGuid
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.SafeConvertExtensions.ToEnum*
  commentId: Overload:System.SafeConvertExtensions.ToEnum
  name: ToEnum
  nameWithType: SafeConvertExtensions.ToEnum
  fullName: System.SafeConvertExtensions.ToEnum
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
